{
  "version": 3,
  "sources": [
    "/Users/arhansubasi/Algorand-dApp-Quick-Start-Template-TypeScript/QuickStartTemplate/projects/QuickStartTemplate-contracts/smart_contracts/security/emergency_pause.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAiUE;;AAAA;AAAA;AAAA;;AAAA;AAjUF;;;AAAA;AAiUE;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAlRF;;;AAAA;AAkRE;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA7QF;;;AAAA;;;AA6QE;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AA9OF;;;AAAA;;;AA8OE;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAhBC;;AAAA;AAAA;AAAA;;AAAA;AA9NH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA8NG;;;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AApNH;;;AAAA;;;AAAA;;;AAAA;;;AAoNG;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AA3LH;;;AAAA;AA2LG;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAnJH;;;AAAA;;;AAmJG;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AA1IH;;;AAAA;;;AA0IG;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AA9GH;;;AAAA;AAAA;;;AAAA;;;AA8GG;;;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AAvFH;;;AAAA;AAAA;;;AAAA;;;AAuFG;;;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AA/DH;;;AAAA;AAAA;;;AAAA;;;AA+DG;;;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AA/BH;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA+BG;;;AAAA;;AA/BH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BE;;;AA5BA;AAAA;AAAA;AAAA;AAmCS;AAAP;AA9BF;AAgCE;;AAAA;AAtCF;AAvBmC;AA8DjC;AAtCF;AAuC+B;AAA7B;AAtCF;AAuC8B;AAA5B;AAtCF;;AAuCiC;AAA/B;AAhCF;;AAiCE;;AAAA;AAhCF;;AAiCE;;AAAA;AAhCF;;AAiCE;;AAAA;AA9BF;;AAiC2C;;AAAzC;AAhCF;;AAiC0C;;AAAxC;AAhCF;;AAiCwC;;;;;;AAAtC;AA9BF;;AAiC8B;;;;;;AAA5B;AAhCF;;AAiCkC;AAAhC;AAhCF;;AAiCsC;;AAApC;AA9BF;;AAgC4B;AAA1B;AA9BF;;AA+BiC;AAA/B;;AAGF;;;AAEuC;;AAA9B;;;AAAA;;;AAAmD;;AAzD5D;AAAA;AAAA;AAAA;AAyDwD;AAA/C;;;;AAAP;AACA;;AAAA;AACI;;AApFiC;AAoFjC;AAAJ;;;AACgD;;AA/DlD;AAAA;;AAAA;AAAA;AA+D2C;AAxD3C;AAAA;;AAAA;AAAA;AAyDW;AAAP;AAjEJ;AAAA;AAAA;AAAA;AAmEsD;AAA5B;AAEE;AAAA;AA5ErB;AA4E2C;;AA5E3C;AA4EL;;AAAA;AAAA;AAAA;;AAAA;AA5EK;;AA6E0C;;AA7E1C;AA6EL;AAAA;;AAAA;;AAAA;AA7EK;;AA8E0C;;AA9E1C;AA8E0E;;AAA/E;;AAAA;;AAAA;AA9EK;;AA+E2C;;AA/E3C;AA+E4E;;AAAjF;AAAA;AA/EK;;AAgF2C;;AAhF3C;AAgFoE;AAAzE;AAAA;AAAA;;AAAA;AAhFK;;AAiF2C;;AAjF3C;AAiFL;AAAA;AAjFK;AAkF0C;;AAlF1C;AAkF4E;;AAAjF;;AAAA;;AAAA;AA7EF;AA8EE;;AAAA;AA7EF;AA8E+B;AAA7B;AA7EF;AA8EE;;AAAA;AA7EF;;AA8EwC;;AAAtC;AACI;;;;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAA;;AAAA;AAA8C;;AAA9C;AAAA;;;;;;AAGF;;;AAEa;;AAjFb;AAAA;AAAA;AAAA;AAiFS;AAAP;AAtFF;AAAA;AAAA;AAAA;AAuFE;AAC2B;;AAAA;AAAA;;AAAsB;;AA9F5C;AAAA;;AA+F8C;;AA/F9C;AAAA;;AAgG8C;;AAhG9C;AAiGoC;;AAAA;AAAA;;AAAzC;AACmD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5C;AAAP;AA5FF;AAAA;AAAA;AAAA;AA6FS;;AAAA;AAAP;AAC0C;AAA1C;AAAA;;AAAA;AAAA;AACmD;;AAAnD;AAAA;;AAAA;AAAA;AAC+C;;AAA/C;;AAAA;;AAAA;AAlGF;AAvBmC;AA0HjC;AAlGF;AAmG+B;AAA7B;AA3EF;AAAA;;AAAA;AAAA;AA4EE;;;AA5EF;;AA6E8B;AAA1B;AA3EJ;;AA4EmC;AAA/B;AAEE;;;;;;;;;;;;;;;;;;;;AAAJ;;AAAA;AAAA;;AAAA;AAAmD;;AAAnD;AAAA;;AAGF;;;AAEa;;AAxGb;AAAA;AAAA;AAAA;AAwGS;AAAP;AA7GF;AAAA;AAAA;AAAA;AA8GE;AA/GF;AAAA;AAAA;AAAA;AAgHS;;AAAA;AAAP;AAhHF;AAkHE;;AAAA;AAEA;;AAAA;AAAI;;;;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAA;;AAAA;AAAiD;;AAAjD;AAAA;;AAGF;;;;;AAtHA;AAAA;AAAA;AAAA;AAwHM;;;AAA6B;AAvHnC;AAAA;AAAA;AAAA;AAwH0D;AAAwC;;AA/H3F;AA+H6G;AAAA;AAAA;AAAA;AAAA;AAC3E;;AAAnC;AAA4B;AAA5B;;AA3HN;AAAA;AAAA;AAAA;AAtBkC;AAmJ5B;AAAA;;;AAlHN;AAAA;;AAAA;AAAA;AAkHkE;;AAAA;AAA5D;;;AA3HN;AAAA;AAAA;AAAA;AA4HqD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAjD;;;AACA;AAnHJ;AAAA;;AAAA;AAAA;AAsHM;;AAAA;AAAJ;;;AAlIF;AAnBuC;AAsJnC;AAjIJ;AAAA;AAAA;AAAA;AAkII;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAA;;AAIJ;;;AAEa;;AApIb;AAAA;AAAA;AAAA;AAoIS;AAAP;AAII;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;;AAAA;AAAA;;AAGF;;;AAEa;;AA7Ib;AAAA;AAAA;AAAA;AA6IS;AAAP;AAGI;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;;AAAA;AAAA;;AAtJF;AAAA;AAAA;AAAA;AAnBuC;AA8K9B;AAAP;AACqC;;AAA9B;;;AAAP;AAnIF;AAAA;;AAAA;AAAA;AAqIM;;;AArIN;;AAsI8B;AAA1B;AArIJ;;;;;;;;;;;;;;;;;;;AAsI0C;;AAAtC;AArIJ;;AAsImC;AAA/B;AAtIJ;AAAA;;AAAA;AAAA;AA0IgE;AAA/B;AA1IjC;;AA0IE;AAAA;AAEI;;;;;;;;;;;;;;;;;;;;;;;;AAA8B;;AAAlC;AA5IF;AAAA;;AAAA;AAAA;AA4IE;AAAA;AAAA;;AA9IF;AAAA;;AAAA;AAAA;AAmJE;AAjJF;AAAA;;AAAA;AAAA;AAkJyC;;AAAhC;AAAP;AACW;;AAxKb;AAAA;AAAA;AAAA;AAwKS;AAAP;AA9KF;AAvBmC;AAwMjC;AAhLF;AAiL+B;AAA7B;AAzJF;;AA0J4B;AAA1B;AAxJF;;AAyJiC;AAA/B;AAEI;;;;;;;;;;;;;;;;;;;AAAyB;;AAA7B;AAAA;;AAGF;;;;;AAGuC;;AAtKvC;AAAA;;AAAA;AAAA;AAsKgC;AAAuD;;;;AAAxD;AAC7B;;;AAxKF;;AAyKoC;AAAhC;AAxKJ;;AAyKwC;;AAApC;AA1KJ;AAAA;;AAAA;AAAA;AA6KM;;AAAyB;AAAzB;AAAA;;AA9KN;AAAA;;AAAA;AAAA;AA+KM;AAAJ;;;AAxNmC;AAyNa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA9C;;;AACO;AAAP;AAAA;AApLJ;AAAA;;AAAA;AAAA;AAuLM;;AAAA;AAAJ;;;AACE;;AAAA;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;AAAA;AAAwD;;AAAxD;AAAA;AAxMJ;AAAA;AAAA;AAAA;AAyMQ;;;AAhO0B;AAiOe;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA3C;;;AAtLN;;AAyLE;;AAAA;AACO;AAAP;AAAA;AAGF;;;AAIM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAJ;;AAAA;AAAA;;AAAA;AAA+D;;AAA/D;AAAA;;AAMF;;;AAOa;;AA7Nb;AAAA;AAAA;AAAA;AA6NS;AAAP;AApNF;;AAsNE;;AAAA;AArNF;;AAsNE;;AAAA;AArNF;;AAsNE;;AAAA;AAnNF;;AAoNE;;AAAA;;AAIF;;;;;AA3OA;AAAA;AAAA;AAAA;AA4OM;;;AACK;AAAP;AAAA;AA9OJ;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAnBuC;AAsQjC;AAAJ;;;AAES;;AAAkB;;AAAlB;AAAA;;;AAAiC;;AAAkB;AAAlB;AAAjC;;;;AAAP;AAAA;;;;;AAGE;;AA5Q6B;;AA4Q7B;AAAJ;;;AAES;;AAAkB;;AAAlB;AAAA;;;AAAiC;;AAAkB;AAAlB;AAAjC;;;AAA8D;;AAAkB;;AAAlB;AAA9D;;;;AAAP;AAAA;;;;;AAGE;;AAlR+B;AAkR/B;AAAJ;;;AAES;;AAAkB;;;;;;;;;;AAAlB;AAAA;;;AAAgC;;AAAkB;;AAAlB;AAAhC;;;AAA4D;;AAAkB;;AAAlB;AAA5D;;;AAA6F;;AAAkB;AAAlB;AAA7F;;;;AAAP;AAAA;;;;;AAGE;;AAxR4B;AAwR5B;AAAJ;;;AAES;;AAAkB;;;;;;;;;AAAlB;AAAP;AAAA;AAGK;AAAP;AAAA;AAIF;;;AArQA;AAAA;AAAA;AAAA;AAuQS;;AAAA;AAAP;AAGF;;;AAC0B;;AAAA;AAtRnB;AAsRyC;;AAtRzC;AAAA;;AAuR0C;;AAvR1C;AAAA;;AAwR+C;;AAxR/C;AAAA;;AAyR6C;;AAzR7C;AAAA;;AA0R4C;;AA1R5C;AAAA;;AA2R8C;;AA3R9C;AAAA;;AA4R8C;;AA5R9C;AA8RmC;;AAAA;AAAA;AAAA;AAAA;AAAA;AACC;;AAAA;AAAA;AACU;;AAAA;AAAA;AACH;;AAAA;AAAA;AAAA;AAAA;AAAA;AACF;;AAAA;AAAA;AAAA;AAAA;AAAA;AACI;;AAAA;AAAA;AAAA;AAAA;AAAA;AACD;;AAAA;AAAA;AAPjD;AAWF;;;AACyB;AAnSzB;AAAA;AAAA;AAAA;AAoSE;;;AAnSF;AAAA;AAAA;AAAA;AAoS4D;AAAwC;;AA3S7F;AA2S+G;AAAA;AAAA;AAAA;AAAA;AAChG;;AAAlB;AAAW;AAAX;;AAtSJ;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAuBA;AAAA;;AAAA;AAAA;AAgRE;;AAAA;;AAAA;;AAAA;;AAAA;AASF;;;AAC0B;AA/R1B;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AA+RM;AAAJ;;;AAhSF;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAgSgB;AAAZ;;AAhSJ;AAAA;;AAAA;AAAA;AADA;AAAA;;AAAA;AAAA;AAEA;AAAA;;AAAA;AAAA;AAiSE;;AAAA;;AAAA;;AAAA;;AAAA;AAQF;;;;AACmJ;;;;;;AAC7H;AA/TtB;AAAA;AAAA;AAAA;AAiUS;;AAAA;;;AAAS;;AAAA;;AAAA;AAAT;;;AACmB;;AAAA;AAAgB;;AAzUrC;AA0UgC;AAAA;;;;;;;;;;AAAnC;;;AACgB;;AAAA;;;AAAR;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AACkB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;AAAf;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;;AAAA;;;AACT;;AAAgB;AAAR;;;;;;;;;;;;;AAEV;;AAAQ;AAAJ;AAAJ;;;;;AAEF;;AAAA;;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 4"
    },
    "7": {
      "op": "bytecblock \"emergencyActive\" \"admin\" \"currentEmergencyLevel\" \"emergencyCount\" \"recoveryMode\" \"recoveryApprovals\" 0x151f7c75 \"currentDailyVolume\" \"maxDailyVolume\" 0x00 \"lastVolumeReset\" \"_timestamp\" \"lastEmergencyTime\" \"largeWithdrawalThreshold\" \"_level\" \"_resolved\" \"_resolvedAt\" \"_resolvedBy\" \"emergency\" 0x0026 \"cooldownPeriod\" \"autoResolveTime\" \"maxEmergencyDuration\" \"suspiciousActivityThreshold\" \"failedTransactionThreshold\" \"_reason\" \"_triggeredBy\" \"view\""
    },
    "397": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "399": {
      "op": "bz main_bare_routing@23",
      "stack_out": []
    },
    "402": {
      "op": "pushbytess 0x746dbfad 0xaab98960 0x93a8a511 0x55855f63 0xc49c7b9f 0x3d65945c 0x677197b6 0xa9bc75a7 0xadcaf210 0x018f01e9 0x124da275 0xdace6156 0x8b9c86e6 0x040674ff 0x9cdf7976 0x4ce275f3 0xbc2f94d1 0x0da7ee6e // method \"initialize(byte[],uint64,uint64,uint64)void\", method \"triggerEmergency(uint64,string)void\", method \"resolveEmergency(uint64,string)void\", method \"escalateEmergency(uint64,string)void\", method \"autoResolveCheck()void\", method \"addEmergencyOperator(byte[])void\", method \"removeEmergencyOperator(byte[])void\", method \"activateRecoveryMode()void\", method \"executeRecovery()void\", method \"checkCircuitBreaker(uint64)bool\", method \"reportSuspiciousActivity(string,string)void\", method \"updateEmergencyThresholds(uint64,uint64,uint64,uint64)void\", method \"isOperationAllowed(string)bool\", method \"isAuthorizedOperator(byte[])bool\", method \"getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])\", method \"getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)\", method \"getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)\", method \"getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]\"",
      "defined_out": [
        "Method(activateRecoveryMode()void)",
        "Method(addEmergencyOperator(byte[])void)",
        "Method(autoResolveCheck()void)",
        "Method(checkCircuitBreaker(uint64)bool)",
        "Method(escalateEmergency(uint64,string)void)",
        "Method(executeRecovery()void)",
        "Method(getCircuitBreakerStatus()(uint64,uint64,uint64,uint64))",
        "Method(getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool))",
        "Method(getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[]))",
        "Method(getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[])",
        "Method(initialize(byte[],uint64,uint64,uint64)void)",
        "Method(isAuthorizedOperator(byte[])bool)",
        "Method(isOperationAllowed(string)bool)",
        "Method(removeEmergencyOperator(byte[])void)",
        "Method(reportSuspiciousActivity(string,string)void)",
        "Method(resolveEmergency(uint64,string)void)",
        "Method(triggerEmergency(uint64,string)void)",
        "Method(updateEmergencyThresholds(uint64,uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(initialize(byte[],uint64,uint64,uint64)void)",
        "Method(triggerEmergency(uint64,string)void)",
        "Method(resolveEmergency(uint64,string)void)",
        "Method(escalateEmergency(uint64,string)void)",
        "Method(autoResolveCheck()void)",
        "Method(addEmergencyOperator(byte[])void)",
        "Method(removeEmergencyOperator(byte[])void)",
        "Method(activateRecoveryMode()void)",
        "Method(executeRecovery()void)",
        "Method(checkCircuitBreaker(uint64)bool)",
        "Method(reportSuspiciousActivity(string,string)void)",
        "Method(updateEmergencyThresholds(uint64,uint64,uint64,uint64)void)",
        "Method(isOperationAllowed(string)bool)",
        "Method(isAuthorizedOperator(byte[])bool)",
        "Method(getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[]))",
        "Method(getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool))",
        "Method(getCircuitBreakerStatus()(uint64,uint64,uint64,uint64))",
        "Method(getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[])"
      ]
    },
    "494": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(activateRecoveryMode()void)",
        "Method(addEmergencyOperator(byte[])void)",
        "Method(autoResolveCheck()void)",
        "Method(checkCircuitBreaker(uint64)bool)",
        "Method(escalateEmergency(uint64,string)void)",
        "Method(executeRecovery()void)",
        "Method(getCircuitBreakerStatus()(uint64,uint64,uint64,uint64))",
        "Method(getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool))",
        "Method(getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[]))",
        "Method(getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[])",
        "Method(initialize(byte[],uint64,uint64,uint64)void)",
        "Method(isAuthorizedOperator(byte[])bool)",
        "Method(isOperationAllowed(string)bool)",
        "Method(removeEmergencyOperator(byte[])void)",
        "Method(reportSuspiciousActivity(string,string)void)",
        "Method(resolveEmergency(uint64,string)void)",
        "Method(triggerEmergency(uint64,string)void)",
        "Method(updateEmergencyThresholds(uint64,uint64,uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(initialize(byte[],uint64,uint64,uint64)void)",
        "Method(triggerEmergency(uint64,string)void)",
        "Method(resolveEmergency(uint64,string)void)",
        "Method(escalateEmergency(uint64,string)void)",
        "Method(autoResolveCheck()void)",
        "Method(addEmergencyOperator(byte[])void)",
        "Method(removeEmergencyOperator(byte[])void)",
        "Method(activateRecoveryMode()void)",
        "Method(executeRecovery()void)",
        "Method(checkCircuitBreaker(uint64)bool)",
        "Method(reportSuspiciousActivity(string,string)void)",
        "Method(updateEmergencyThresholds(uint64,uint64,uint64,uint64)void)",
        "Method(isOperationAllowed(string)bool)",
        "Method(isAuthorizedOperator(byte[])bool)",
        "Method(getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[]))",
        "Method(getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool))",
        "Method(getCircuitBreakerStatus()(uint64,uint64,uint64,uint64))",
        "Method(getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[])",
        "tmp%2#0"
      ]
    },
    "497": {
      "op": "match main_initialize_route@3 main_triggerEmergency_route@4 main_resolveEmergency_route@5 main_escalateEmergency_route@6 main_autoResolveCheck_route@7 main_addEmergencyOperator_route@8 main_removeEmergencyOperator_route@9 main_activateRecoveryMode_route@10 main_executeRecovery_route@11 main_checkCircuitBreaker_route@12 main_reportSuspiciousActivity_route@13 main_updateEmergencyThresholds_route@14 main_isOperationAllowed_route@15 main_isAuthorizedOperator_route@16 main_getEmergencyEvent_route@17 main_getCurrentEmergencyStatus_route@18 main_getCircuitBreakerStatus_route@19 main_getEmergencyHistory_route@20",
      "stack_out": []
    },
    "535": {
      "block": "main_after_if_else@27",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "536": {
      "op": "return",
      "stack_out": []
    },
    "537": {
      "block": "main_getEmergencyHistory_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "539": {
      "op": "!",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "540": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "541": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "543": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "544": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "547": {
      "op": "btoi",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "548": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.getEmergencyHistory",
      "op": "callsub getEmergencyHistory",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "551": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0",
        "0x151f7c75"
      ]
    },
    "553": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%114#0"
      ]
    },
    "554": {
      "op": "concat",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "555": {
      "op": "log",
      "stack_out": []
    },
    "556": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "557": {
      "op": "return",
      "stack_out": []
    },
    "558": {
      "block": "main_getCircuitBreakerStatus_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "560": {
      "op": "!",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "561": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "562": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "564": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "565": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.getCircuitBreakerStatus",
      "op": "callsub getCircuitBreakerStatus",
      "defined_out": [
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0"
      ],
      "stack_out": [
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0"
      ]
    },
    "568": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%12#0"
      ]
    },
    "570": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "val_as_bytes%7#0"
      ]
    },
    "571": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "val_as_bytes%7#0",
        "elements_to_encode%13#0"
      ]
    },
    "573": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "574": {
      "op": "uncover 3",
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "elements_to_encode%14#0"
      ]
    },
    "576": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "577": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "elements_to_encode%15#0"
      ]
    },
    "579": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%10#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "580": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%7#0"
      ]
    },
    "582": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "584": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "val_as_bytes%10#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "585": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_tuple_buffer%19#0",
        "val_as_bytes%9#0"
      ]
    },
    "587": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%20#0",
        "val_as_bytes%10#0"
      ],
      "stack_out": [
        "val_as_bytes%10#0",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "588": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%20#0",
        "val_as_bytes%10#0"
      ]
    },
    "589": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%21#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%21#0"
      ]
    },
    "590": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%21#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%21#0",
        "0x151f7c75"
      ]
    },
    "592": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%21#0"
      ]
    },
    "593": {
      "op": "concat",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "594": {
      "op": "log",
      "stack_out": []
    },
    "595": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "596": {
      "op": "return",
      "stack_out": []
    },
    "597": {
      "block": "main_getCurrentEmergencyStatus_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "599": {
      "op": "!",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "600": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "601": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "603": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "604": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.getCurrentEmergencyStatus",
      "op": "callsub getCurrentEmergencyStatus",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0"
      ]
    },
    "607": {
      "op": "bytec 9 // 0x00",
      "defined_out": [
        "0x00",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "0x00"
      ]
    },
    "609": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "0x00",
        "0"
      ]
    },
    "610": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "0x00",
        "0",
        "elements_to_encode%7#0"
      ]
    },
    "612": {
      "op": "setbit",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "encoded_bool%3#0"
      ]
    },
    "613": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "encoded_bool%3#0",
        "elements_to_encode%8#0"
      ]
    },
    "615": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%9#0",
        "encoded_bool%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "encoded_bool%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "616": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "encoded_bool%3#0",
        "val_as_bytes%4#0",
        "elements_to_encode%9#0"
      ]
    },
    "618": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "encoded_bool%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "encoded_bool%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "619": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%11#0",
        "encoded_bool%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "elements_to_encode%10#0"
      ]
    },
    "621": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%11#0",
        "encoded_bool%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%11#0",
        "encoded_bool%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "622": {
      "op": "bytec 9 // 0x00",
      "stack_out": [
        "elements_to_encode%11#0",
        "encoded_bool%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0x00"
      ]
    },
    "624": {
      "op": "intc_0 // 0",
      "stack_out": [
        "elements_to_encode%11#0",
        "encoded_bool%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0x00",
        "0"
      ]
    },
    "625": {
      "op": "uncover 6",
      "stack_out": [
        "encoded_bool%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "0x00",
        "0",
        "elements_to_encode%11#0"
      ]
    },
    "627": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%3#0",
        "encoded_bool%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_bool%4#0"
      ]
    },
    "628": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0"
      ]
    },
    "630": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_bool%4#0",
        "encoded_bool%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "632": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%4#0",
        "encoded_tuple_buffer%13#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "encoded_bool%4#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "633": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%6#0",
        "encoded_bool%4#0",
        "encoded_tuple_buffer%13#0",
        "val_as_bytes%5#0"
      ]
    },
    "635": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%4#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "encoded_bool%4#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "636": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_bool%4#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%6#0"
      ]
    },
    "638": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%4#0",
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "encoded_bool%4#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "639": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%15#0",
        "encoded_bool%4#0"
      ]
    },
    "640": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%16#0"
      ]
    },
    "641": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%16#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%16#0",
        "0x151f7c75"
      ]
    },
    "643": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "644": {
      "op": "concat",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "645": {
      "op": "log",
      "stack_out": []
    },
    "646": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "647": {
      "op": "return",
      "stack_out": []
    },
    "648": {
      "block": "main_getEmergencyEvent_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "650": {
      "op": "!",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "651": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "652": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "654": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "655": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "658": {
      "op": "btoi",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "659": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.getEmergencyEvent",
      "op": "callsub getEmergencyEvent",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0"
      ]
    },
    "662": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%0#0"
      ]
    },
    "664": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0"
      ]
    },
    "665": {
      "op": "dig 6",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%1#0 (copy)",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "elements_to_encode%1#0 (copy)"
      ]
    },
    "667": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "length%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "length%0#0"
      ]
    },
    "668": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "as_bytes%0#0"
      ]
    },
    "669": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "length_uint16%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "length_uint16%0#0"
      ]
    },
    "672": {
      "op": "uncover 7",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "length_uint16%0#0",
        "elements_to_encode%1#0"
      ]
    },
    "674": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0"
      ]
    },
    "675": {
      "op": "dig 6",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%2#0 (copy)",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "elements_to_encode%2#0 (copy)"
      ]
    },
    "677": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "encoded_value%0#0",
        "length%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "678": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "679": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "682": {
      "op": "uncover 7",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "elements_to_encode%2#0"
      ]
    },
    "684": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "685": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "elements_to_encode%3#0"
      ]
    },
    "687": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "688": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "elements_to_encode%4#0"
      ]
    },
    "690": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "691": {
      "op": "uncover 6",
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "elements_to_encode%5#0"
      ]
    },
    "693": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "694": {
      "op": "dig 6",
      "defined_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%6#0 (copy)",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "elements_to_encode%6#0 (copy)"
      ]
    },
    "696": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "length%2#0"
      ]
    },
    "697": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "elements_to_encode%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "as_bytes%2#0"
      ]
    },
    "698": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length_uint16%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "length_uint16%2#0"
      ]
    },
    "701": {
      "op": "uncover 7",
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "length_uint16%2#0",
        "elements_to_encode%6#0"
      ]
    },
    "703": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0"
      ]
    },
    "704": {
      "op": "uncover 6",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "706": {
      "op": "bytec 19 // 0x0026",
      "defined_out": [
        "0x0026",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "0x0026"
      ]
    },
    "708": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "709": {
      "op": "dig 6",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "711": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%2#0",
        "data_length%0#0"
      ]
    },
    "712": {
      "op": "pushint 38 // 38",
      "defined_out": [
        "38",
        "data_length%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%2#0",
        "data_length%0#0",
        "38"
      ]
    },
    "714": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0"
      ]
    },
    "715": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)"
      ]
    },
    "716": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0",
        "as_bytes%4#0"
      ]
    },
    "717": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0"
      ]
    },
    "720": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "722": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%1#0"
      ]
    },
    "723": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "724": {
      "op": "dig 6",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%1#0 (copy)",
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%1#0 (copy)"
      ]
    },
    "726": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%1#0",
        "data_length%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0",
        "data_length%1#0"
      ]
    },
    "727": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%3#0",
        "data_length%1#0",
        "current_tail_offset%1#0"
      ]
    },
    "729": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%2#0"
      ]
    },
    "730": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "731": {
      "op": "uncover 5",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "733": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "734": {
      "op": "uncover 4",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%2#0"
      ]
    },
    "736": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "737": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%3#0"
      ]
    },
    "739": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "740": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%6#0",
        "current_tail_offset%2#0"
      ]
    },
    "741": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%6#0",
        "as_bytes%5#0"
      ]
    },
    "742": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%6#0",
        "offset_as_uint16%2#0"
      ]
    },
    "745": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "746": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0"
      ]
    },
    "748": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "encoded_value%1#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "749": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%1#0"
      ]
    },
    "751": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "752": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_value%2#0"
      ]
    },
    "753": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0"
      ]
    },
    "754": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%10#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%10#0",
        "0x151f7c75"
      ]
    },
    "756": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "757": {
      "op": "concat",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "758": {
      "op": "log",
      "stack_out": []
    },
    "759": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "760": {
      "op": "return",
      "stack_out": []
    },
    "761": {
      "block": "main_isAuthorizedOperator_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "763": {
      "op": "!",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "764": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "765": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "767": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "768": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "771": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "774": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.isAuthorizedOperator",
      "op": "callsub isAuthorizedOperator",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "777": {
      "op": "bytec 9 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00"
      ]
    },
    "779": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00",
        "0"
      ]
    },
    "780": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%2#0"
      ]
    },
    "782": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0"
      ]
    },
    "783": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0",
        "0x151f7c75"
      ]
    },
    "785": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ]
    },
    "786": {
      "op": "concat",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "787": {
      "op": "log",
      "stack_out": []
    },
    "788": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "789": {
      "op": "return",
      "stack_out": []
    },
    "790": {
      "block": "main_isOperationAllowed_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "792": {
      "op": "!",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "793": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "794": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "796": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "797": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "800": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "803": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.isOperationAllowed",
      "op": "callsub isOperationAllowed",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "806": {
      "op": "bytec 9 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00"
      ]
    },
    "808": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00",
        "0"
      ]
    },
    "809": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%1#0"
      ]
    },
    "811": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "812": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "814": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ]
    },
    "815": {
      "op": "concat",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "816": {
      "op": "log",
      "stack_out": []
    },
    "817": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "818": {
      "op": "return",
      "stack_out": []
    },
    "819": {
      "block": "main_updateEmergencyThresholds_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "821": {
      "op": "!",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "822": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "823": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "825": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "826": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "829": {
      "op": "btoi",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "830": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%8#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "833": {
      "op": "btoi",
      "defined_out": [
        "tmp%75#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0"
      ]
    },
    "834": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%75#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "837": {
      "op": "btoi",
      "defined_out": [
        "tmp%75#0",
        "tmp%76#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0",
        "tmp%77#0"
      ]
    },
    "838": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "tmp%75#0",
        "tmp%76#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0",
        "tmp%77#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "841": {
      "op": "btoi",
      "defined_out": [
        "tmp%75#0",
        "tmp%76#0",
        "tmp%77#0",
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%75#0",
        "tmp%76#0",
        "tmp%77#0",
        "tmp%78#0"
      ]
    },
    "842": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.updateEmergencyThresholds",
      "op": "callsub updateEmergencyThresholds",
      "stack_out": []
    },
    "845": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "846": {
      "op": "return",
      "stack_out": []
    },
    "847": {
      "block": "main_reportSuspiciousActivity_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "849": {
      "op": "!",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "850": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "851": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "853": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "854": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "857": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "860": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%68#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%69#0"
      ]
    },
    "863": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%68#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%68#0",
        "tmp%70#0"
      ]
    },
    "866": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.reportSuspiciousActivity",
      "op": "callsub reportSuspiciousActivity",
      "stack_out": []
    },
    "869": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "870": {
      "op": "return",
      "stack_out": []
    },
    "871": {
      "block": "main_checkCircuitBreaker_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "873": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "874": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "875": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "877": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "878": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "881": {
      "op": "btoi",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "882": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.checkCircuitBreaker",
      "op": "callsub checkCircuitBreaker",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "885": {
      "op": "bytec 9 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "887": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "888": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "890": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "891": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "893": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "894": {
      "op": "concat",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "895": {
      "op": "log",
      "stack_out": []
    },
    "896": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "897": {
      "op": "return",
      "stack_out": []
    },
    "898": {
      "block": "main_executeRecovery_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "900": {
      "op": "!",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "901": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "902": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "904": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "905": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.executeRecovery",
      "op": "callsub executeRecovery"
    },
    "908": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "909": {
      "op": "return",
      "stack_out": []
    },
    "910": {
      "block": "main_activateRecoveryMode_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "912": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "913": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "914": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "916": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "917": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.activateRecoveryMode",
      "op": "callsub activateRecoveryMode"
    },
    "920": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "921": {
      "op": "return",
      "stack_out": []
    },
    "922": {
      "block": "main_removeEmergencyOperator_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "924": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "925": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "926": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "928": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "929": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "932": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "935": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.removeEmergencyOperator",
      "op": "callsub removeEmergencyOperator",
      "stack_out": []
    },
    "938": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "939": {
      "op": "return",
      "stack_out": []
    },
    "940": {
      "block": "main_addEmergencyOperator_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "942": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "943": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "944": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "946": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "947": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "950": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "953": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.addEmergencyOperator",
      "op": "callsub addEmergencyOperator",
      "stack_out": []
    },
    "956": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "957": {
      "op": "return",
      "stack_out": []
    },
    "958": {
      "block": "main_autoResolveCheck_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "960": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "961": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "962": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "964": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "965": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.autoResolveCheck",
      "op": "callsub autoResolveCheck"
    },
    "968": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "969": {
      "op": "return",
      "stack_out": []
    },
    "970": {
      "block": "main_escalateEmergency_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "972": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "973": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "974": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "976": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "977": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "980": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "981": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "984": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%30#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%32#0"
      ]
    },
    "987": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.escalateEmergency",
      "op": "callsub escalateEmergency",
      "stack_out": []
    },
    "990": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "991": {
      "op": "return",
      "stack_out": []
    },
    "992": {
      "block": "main_resolveEmergency_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "994": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "995": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "996": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "998": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "999": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "1002": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1003": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "1006": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%23#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%23#0",
        "tmp%25#0"
      ]
    },
    "1009": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.resolveEmergency",
      "op": "callsub resolveEmergency",
      "stack_out": []
    },
    "1012": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1013": {
      "op": "return",
      "stack_out": []
    },
    "1014": {
      "block": "main_triggerEmergency_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1016": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1017": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1018": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1020": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1021": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "1024": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1025": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1028": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%16#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%18#0"
      ]
    },
    "1031": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.triggerEmergency",
      "op": "callsub triggerEmergency",
      "stack_out": []
    },
    "1034": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1035": {
      "op": "return",
      "stack_out": []
    },
    "1036": {
      "block": "main_initialize_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1038": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1039": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1040": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1042": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1043": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1046": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1049": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1052": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1053": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1056": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1057": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1060": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "1061": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.initialize",
      "op": "callsub initialize",
      "stack_out": []
    },
    "1064": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1065": {
      "op": "return",
      "stack_out": []
    },
    "1066": {
      "block": "main_bare_routing@23",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "1068": {
      "op": "bnz main_after_if_else@27",
      "stack_out": []
    },
    "1071": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "1073": {
      "op": "!",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "1074": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1075": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1076": {
      "op": "return",
      "stack_out": []
    },
    "1077": {
      "subroutine": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "params": {
        "array_items_count#0": "uint64",
        "array_head_and_tail#0": "bytes",
        "new_items_count#0": "uint64",
        "new_head_and_tail#0": "bytes"
      },
      "block": "dynamic_array_concat_dynamic_element",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "1080": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "item_offset_adjustment#2"
      ]
    },
    "1082": {
      "op": "dup"
    },
    "1083": {
      "op": "frame_dig -2"
    },
    "1085": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "new_head#0",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "new_items_count#0 (copy)",
        "2"
      ]
    },
    "1086": {
      "op": "*",
      "defined_out": [
        "item_offset_adjustment#0",
        "new_head#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0"
      ]
    },
    "1087": {
      "op": "frame_dig -4",
      "defined_out": [
        "array_items_count#0 (copy)",
        "item_offset_adjustment#0",
        "new_head#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "array_items_count#0 (copy)"
      ]
    },
    "1089": {
      "op": "intc_2 // 2",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "array_items_count#0 (copy)",
        "2"
      ]
    },
    "1090": {
      "op": "*",
      "defined_out": [
        "item_offset_adjustment#0",
        "new_head#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0"
      ]
    },
    "1091": {
      "op": "intc_0 // 0",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "new_head#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "1092": {
      "block": "dynamic_array_concat_dynamic_element_for_header@1",
      "stack_in": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "1094": {
      "op": "frame_dig 3",
      "defined_out": [
        "head_offset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%0#0"
      ]
    },
    "1096": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "head_offset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "continue_looping%0#0"
      ]
    },
    "1097": {
      "op": "bz dynamic_array_concat_dynamic_element_after_for@4",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "1100": {
      "op": "frame_dig -3",
      "defined_out": [
        "array_head_and_tail#0 (copy)",
        "head_offset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "1102": {
      "op": "frame_dig 4",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "array_head_and_tail#0 (copy)",
        "head_offset#0"
      ]
    },
    "1104": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail#0 (copy)",
        "head_offset#0",
        "head_offset#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "array_head_and_tail#0 (copy)",
        "head_offset#0 (copy)",
        "head_offset#0 (copy)"
      ]
    },
    "1105": {
      "op": "cover 2",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "array_head_and_tail#0 (copy)",
        "head_offset#0 (copy)"
      ]
    },
    "1107": {
      "op": "extract_uint16",
      "defined_out": [
        "head_offset#0",
        "item_offset#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "item_offset#0"
      ]
    },
    "1108": {
      "op": "frame_dig 2",
      "defined_out": [
        "head_offset#0",
        "item_offset#0",
        "item_offset_adjustment#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "item_offset#0",
        "item_offset_adjustment#0"
      ]
    },
    "1110": {
      "op": "+",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%1#0"
      ]
    },
    "1111": {
      "op": "itob",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%2#0"
      ]
    },
    "1112": {
      "op": "extract 6 2",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%3#0"
      ]
    },
    "1115": {
      "op": "frame_dig 1",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "new_head#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%3#0",
        "new_head#0"
      ]
    },
    "1117": {
      "op": "swap",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "new_head#0",
        "tmp%3#0"
      ]
    },
    "1118": {
      "op": "concat",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "new_head#0"
      ]
    },
    "1119": {
      "op": "frame_bury 1",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "new_head#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "1121": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "head_offset#0",
        "item_offset_adjustment#0",
        "new_head#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "2"
      ]
    },
    "1122": {
      "op": "+",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "1123": {
      "op": "frame_bury 4",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "new_head#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "1125": {
      "op": "b dynamic_array_concat_dynamic_element_for_header@1"
    },
    "1128": {
      "block": "dynamic_array_concat_dynamic_element_after_for@4",
      "stack_in": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig -3",
      "defined_out": [
        "array_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "1130": {
      "op": "len",
      "defined_out": [
        "item_offset_adjustment#2"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "item_offset_adjustment#2"
      ]
    },
    "1131": {
      "op": "frame_bury 0",
      "defined_out": [
        "item_offset_adjustment#2"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "1133": {
      "op": "intc_0 // 0",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#2"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "1134": {
      "op": "frame_bury 4",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#2"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "1136": {
      "block": "dynamic_array_concat_dynamic_element_for_header@5",
      "stack_in": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "1138": {
      "op": "frame_dig 2",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "item_offset_adjustment#0"
      ]
    },
    "1140": {
      "op": "<",
      "defined_out": [
        "continue_looping%1#0",
        "head_offset#0",
        "item_offset_adjustment#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "continue_looping%1#0"
      ]
    },
    "1141": {
      "op": "bz dynamic_array_concat_dynamic_element_after_for@8",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "1144": {
      "op": "frame_dig -1",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "new_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "new_head_and_tail#0 (copy)"
      ]
    },
    "1146": {
      "op": "frame_dig 4",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "new_head_and_tail#0 (copy)",
        "head_offset#0"
      ]
    },
    "1148": {
      "op": "dup",
      "defined_out": [
        "head_offset#0",
        "head_offset#0 (copy)",
        "item_offset_adjustment#0",
        "new_head_and_tail#0 (copy)"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "new_head_and_tail#0 (copy)",
        "head_offset#0 (copy)",
        "head_offset#0 (copy)"
      ]
    },
    "1149": {
      "op": "cover 2",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "new_head_and_tail#0 (copy)",
        "head_offset#0 (copy)"
      ]
    },
    "1151": {
      "op": "extract_uint16",
      "defined_out": [
        "head_offset#0",
        "item_offset#0",
        "item_offset_adjustment#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "item_offset#0"
      ]
    },
    "1152": {
      "op": "frame_dig 0",
      "defined_out": [
        "head_offset#0",
        "item_offset#0",
        "item_offset_adjustment#0",
        "item_offset_adjustment#2"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "item_offset#0",
        "item_offset_adjustment#2"
      ]
    },
    "1154": {
      "op": "+",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "item_offset_adjustment#2",
        "tmp%5#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%5#0"
      ]
    },
    "1155": {
      "op": "itob",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "item_offset_adjustment#2",
        "tmp%6#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%6#0"
      ]
    },
    "1156": {
      "op": "extract 6 2",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "item_offset_adjustment#2",
        "tmp%7#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%7#0"
      ]
    },
    "1159": {
      "op": "frame_dig 1",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "tmp%7#0",
        "new_head#0"
      ]
    },
    "1161": {
      "op": "swap",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "new_head#0",
        "tmp%7#0"
      ]
    },
    "1162": {
      "op": "concat",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "new_head#0"
      ]
    },
    "1163": {
      "op": "frame_bury 1",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "item_offset_adjustment#2",
        "new_head#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "1165": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "head_offset#0",
        "item_offset_adjustment#0",
        "item_offset_adjustment#2",
        "new_head#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0",
        "2"
      ]
    },
    "1166": {
      "op": "+",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "head_offset#0"
      ]
    },
    "1167": {
      "op": "frame_bury 4",
      "defined_out": [
        "head_offset#0",
        "item_offset_adjustment#0",
        "item_offset_adjustment#2",
        "new_head#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ]
    },
    "1169": {
      "op": "b dynamic_array_concat_dynamic_element_for_header@5"
    },
    "1172": {
      "block": "dynamic_array_concat_dynamic_element_after_for@8",
      "stack_in": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0"
      ],
      "op": "frame_dig -4",
      "defined_out": [
        "array_items_count#0 (copy)"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "array_items_count#0 (copy)"
      ]
    },
    "1174": {
      "op": "frame_dig -2",
      "defined_out": [
        "array_items_count#0 (copy)",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "array_items_count#0 (copy)",
        "new_items_count#0 (copy)"
      ]
    },
    "1176": {
      "op": "+",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%8#0"
      ]
    },
    "1177": {
      "op": "itob",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%9#0"
      ]
    },
    "1178": {
      "op": "extract 6 2",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%10#0"
      ]
    },
    "1181": {
      "op": "frame_dig 1",
      "defined_out": [
        "new_head#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%10#0",
        "new_head#0"
      ]
    },
    "1183": {
      "op": "concat",
      "defined_out": [
        "new_head#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0"
      ]
    },
    "1184": {
      "op": "frame_dig -3",
      "defined_out": [
        "array_head_and_tail#0 (copy)",
        "new_head#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "array_head_and_tail#0 (copy)"
      ]
    },
    "1186": {
      "op": "frame_dig 3",
      "defined_out": [
        "array_head_and_tail#0 (copy)",
        "new_head#0",
        "tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "array_head_and_tail#0 (copy)",
        "tmp%0#0"
      ]
    },
    "1188": {
      "op": "frame_dig 0",
      "defined_out": [
        "array_head_and_tail#0 (copy)",
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "array_head_and_tail#0 (copy)",
        "tmp%0#0",
        "item_offset_adjustment#2"
      ]
    },
    "1190": {
      "op": "substring3",
      "defined_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%11#0",
        "tmp%14#0"
      ]
    },
    "1191": {
      "op": "concat",
      "defined_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0"
      ]
    },
    "1192": {
      "op": "frame_dig -1",
      "defined_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "new_head_and_tail#0 (copy)",
        "tmp%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "new_head_and_tail#0 (copy)"
      ]
    },
    "1194": {
      "op": "len",
      "defined_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "1195": {
      "op": "frame_dig -1",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%17#0",
        "new_head_and_tail#0 (copy)"
      ]
    },
    "1197": {
      "op": "frame_dig 2",
      "defined_out": [
        "item_offset_adjustment#0",
        "item_offset_adjustment#2",
        "new_head#0",
        "new_head_and_tail#0 (copy)",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%17#0",
        "new_head_and_tail#0 (copy)",
        "item_offset_adjustment#0"
      ]
    },
    "1199": {
      "op": "uncover 2",
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "new_head_and_tail#0 (copy)",
        "item_offset_adjustment#0",
        "tmp%17#0"
      ]
    },
    "1201": {
      "op": "substring3",
      "defined_out": [
        "item_offset_adjustment#0",
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%15#0",
        "tmp%18#0"
      ]
    },
    "1202": {
      "op": "concat",
      "defined_out": [
        "item_offset_adjustment#0",
        "item_offset_adjustment#2",
        "new_head#0",
        "tmp%0#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "item_offset_adjustment#2",
        "new_head#0",
        "item_offset_adjustment#0",
        "tmp%0#0",
        "head_offset#0",
        "tmp%19#0"
      ]
    },
    "1203": {
      "op": "frame_bury 0"
    },
    "1205": {
      "retsub": true,
      "op": "retsub"
    },
    "1206": {
      "subroutine": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.initialize",
      "params": {
        "admin#0": "bytes",
        "cooldownPeriod#0": "uint64",
        "autoResolveTime#0": "uint64",
        "maxEmergencyDuration#0": "uint64"
      },
      "block": "initialize",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "1209": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1210": {
      "op": "bytec_0 // \"emergencyActive\"",
      "defined_out": [
        "\"emergencyActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"emergencyActive\""
      ]
    },
    "1211": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1212": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1213": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1214": {
      "op": "assert",
      "stack_out": []
    },
    "1215": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "1216": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"admin\"",
        "admin#0 (copy)"
      ],
      "stack_out": [
        "\"admin\"",
        "admin#0 (copy)"
      ]
    },
    "1218": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1219": {
      "op": "bytec_2 // \"currentEmergencyLevel\"",
      "defined_out": [
        "\"currentEmergencyLevel\""
      ],
      "stack_out": [
        "\"currentEmergencyLevel\""
      ]
    },
    "1220": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"currentEmergencyLevel\"",
        "0"
      ]
    },
    "1221": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1222": {
      "op": "bytec_0 // \"emergencyActive\"",
      "stack_out": [
        "\"emergencyActive\""
      ]
    },
    "1223": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"emergencyActive\"",
        "0"
      ]
    },
    "1224": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1225": {
      "op": "bytec_3 // \"emergencyCount\"",
      "defined_out": [
        "\"emergencyCount\""
      ],
      "stack_out": [
        "\"emergencyCount\""
      ]
    },
    "1226": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"emergencyCount\"",
        "0"
      ]
    },
    "1227": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1228": {
      "op": "bytec 12 // \"lastEmergencyTime\"",
      "defined_out": [
        "\"lastEmergencyTime\""
      ],
      "stack_out": [
        "\"lastEmergencyTime\""
      ]
    },
    "1230": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"lastEmergencyTime\"",
        "0"
      ]
    },
    "1231": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1232": {
      "op": "bytec 20 // \"cooldownPeriod\"",
      "defined_out": [
        "\"cooldownPeriod\""
      ],
      "stack_out": [
        "\"cooldownPeriod\""
      ]
    },
    "1234": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"cooldownPeriod\"",
        "cooldownPeriod#0 (copy)"
      ],
      "stack_out": [
        "\"cooldownPeriod\"",
        "cooldownPeriod#0 (copy)"
      ]
    },
    "1236": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1237": {
      "op": "bytec 21 // \"autoResolveTime\"",
      "defined_out": [
        "\"autoResolveTime\""
      ],
      "stack_out": [
        "\"autoResolveTime\""
      ]
    },
    "1239": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"autoResolveTime\"",
        "autoResolveTime#0 (copy)"
      ],
      "stack_out": [
        "\"autoResolveTime\"",
        "autoResolveTime#0 (copy)"
      ]
    },
    "1241": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1242": {
      "op": "bytec 22 // \"maxEmergencyDuration\"",
      "defined_out": [
        "\"maxEmergencyDuration\""
      ],
      "stack_out": [
        "\"maxEmergencyDuration\""
      ]
    },
    "1244": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"maxEmergencyDuration\"",
        "maxEmergencyDuration#0 (copy)"
      ],
      "stack_out": [
        "\"maxEmergencyDuration\"",
        "maxEmergencyDuration#0 (copy)"
      ]
    },
    "1246": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1247": {
      "op": "bytec 23 // \"suspiciousActivityThreshold\"",
      "defined_out": [
        "\"suspiciousActivityThreshold\""
      ],
      "stack_out": [
        "\"suspiciousActivityThreshold\""
      ]
    },
    "1249": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "\"suspiciousActivityThreshold\"",
        "10"
      ],
      "stack_out": [
        "\"suspiciousActivityThreshold\"",
        "10"
      ]
    },
    "1251": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1252": {
      "op": "bytec 24 // \"failedTransactionThreshold\"",
      "defined_out": [
        "\"failedTransactionThreshold\""
      ],
      "stack_out": [
        "\"failedTransactionThreshold\""
      ]
    },
    "1254": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "\"failedTransactionThreshold\"",
        "100"
      ],
      "stack_out": [
        "\"failedTransactionThreshold\"",
        "100"
      ]
    },
    "1256": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1257": {
      "op": "bytec 13 // \"largeWithdrawalThreshold\"",
      "defined_out": [
        "\"largeWithdrawalThreshold\""
      ],
      "stack_out": [
        "\"largeWithdrawalThreshold\""
      ]
    },
    "1259": {
      "op": "pushint 1000000000 // 1000000000",
      "defined_out": [
        "\"largeWithdrawalThreshold\"",
        "1000000000"
      ],
      "stack_out": [
        "\"largeWithdrawalThreshold\"",
        "1000000000"
      ]
    },
    "1265": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1266": {
      "op": "bytec 8 // \"maxDailyVolume\"",
      "defined_out": [
        "\"maxDailyVolume\""
      ],
      "stack_out": [
        "\"maxDailyVolume\""
      ]
    },
    "1268": {
      "op": "pushint 10000000000 // 10000000000",
      "defined_out": [
        "\"maxDailyVolume\"",
        "10000000000"
      ],
      "stack_out": [
        "\"maxDailyVolume\"",
        "10000000000"
      ]
    },
    "1274": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1275": {
      "op": "bytec 7 // \"currentDailyVolume\"",
      "defined_out": [
        "\"currentDailyVolume\""
      ],
      "stack_out": [
        "\"currentDailyVolume\""
      ]
    },
    "1277": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"currentDailyVolume\"",
        "0"
      ]
    },
    "1278": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1279": {
      "op": "bytec 10 // \"lastVolumeReset\"",
      "defined_out": [
        "\"lastVolumeReset\""
      ],
      "stack_out": [
        "\"lastVolumeReset\""
      ]
    },
    "1281": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"lastVolumeReset\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"lastVolumeReset\"",
        "new_state_value%0#0"
      ]
    },
    "1283": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1284": {
      "op": "bytec 4 // \"recoveryMode\"",
      "defined_out": [
        "\"recoveryMode\""
      ],
      "stack_out": [
        "\"recoveryMode\""
      ]
    },
    "1286": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"recoveryMode\"",
        "0"
      ]
    },
    "1287": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1288": {
      "op": "bytec 5 // \"recoveryApprovals\"",
      "defined_out": [
        "\"recoveryApprovals\""
      ],
      "stack_out": [
        "\"recoveryApprovals\""
      ]
    },
    "1290": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"recoveryApprovals\"",
        "0"
      ]
    },
    "1291": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1292": {
      "retsub": true,
      "op": "retsub"
    },
    "1293": {
      "subroutine": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.triggerEmergency",
      "params": {
        "level#0": "uint64",
        "reason#0": "bytes"
      },
      "block": "triggerEmergency",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1296": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1298": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.isAuthorizedOperator",
      "op": "callsub isAuthorizedOperator",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1301": {
      "op": "bnz triggerEmergency_bool_true@2",
      "stack_out": []
    },
    "1304": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1306": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "1307": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"admin\""
      ]
    },
    "1308": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1309": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0"
      ]
    },
    "1310": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1311": {
      "op": "bz triggerEmergency_bool_false@3",
      "stack_out": []
    },
    "1314": {
      "block": "triggerEmergency_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "1315": {
      "block": "triggerEmergency_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": []
    },
    "1316": {
      "op": "frame_dig -2",
      "defined_out": [
        "level#0 (copy)"
      ],
      "stack_out": [
        "level#0 (copy)"
      ]
    },
    "1318": {
      "op": "assert",
      "stack_out": []
    },
    "1319": {
      "op": "frame_dig -2",
      "stack_out": [
        "level#0 (copy)"
      ]
    },
    "1321": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "level#0 (copy)"
      ],
      "stack_out": [
        "level#0 (copy)",
        "4"
      ]
    },
    "1322": {
      "op": "<",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1323": {
      "op": "bz triggerEmergency_after_if_else@6",
      "stack_out": []
    },
    "1326": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1328": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "1329": {
      "op": "bytec 12 // \"lastEmergencyTime\"",
      "defined_out": [
        "\"lastEmergencyTime\"",
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0",
        "\"lastEmergencyTime\""
      ]
    },
    "1331": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1332": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%1#0"
      ]
    },
    "1333": {
      "op": "-",
      "defined_out": [
        "timeSinceLastEmergency#0"
      ],
      "stack_out": [
        "timeSinceLastEmergency#0"
      ]
    },
    "1334": {
      "op": "intc_0 // 0",
      "stack_out": [
        "timeSinceLastEmergency#0",
        "0"
      ]
    },
    "1335": {
      "op": "bytec 20 // \"cooldownPeriod\"",
      "defined_out": [
        "\"cooldownPeriod\"",
        "0",
        "timeSinceLastEmergency#0"
      ],
      "stack_out": [
        "timeSinceLastEmergency#0",
        "0",
        "\"cooldownPeriod\""
      ]
    },
    "1337": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "timeSinceLastEmergency#0"
      ],
      "stack_out": [
        "timeSinceLastEmergency#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1338": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "timeSinceLastEmergency#0",
        "maybe_value%2#0"
      ]
    },
    "1339": {
      "op": ">=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1340": {
      "op": "assert",
      "stack_out": []
    },
    "1341": {
      "block": "triggerEmergency_after_if_else@6",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1342": {
      "op": "bytec_3 // \"emergencyCount\"",
      "defined_out": [
        "\"emergencyCount\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"emergencyCount\""
      ]
    },
    "1343": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1344": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1345": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "1346": {
      "op": "+",
      "defined_out": [
        "eventId#0"
      ],
      "stack_out": [
        "eventId#0"
      ]
    },
    "1347": {
      "op": "dup",
      "defined_out": [
        "eventId#0",
        "eventId#0 (copy)"
      ],
      "stack_out": [
        "eventId#0",
        "eventId#0 (copy)"
      ]
    },
    "1348": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "eventId#0"
      ],
      "stack_out": [
        "eventId#0",
        "a#0"
      ]
    },
    "1349": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "eventId#0"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1350": {
      "op": "bytec 14 // \"_level\"",
      "defined_out": [
        "\"_level\"",
        "a#0",
        "a#0 (copy)",
        "eventId#0"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "a#0 (copy)",
        "\"_level\""
      ]
    },
    "1352": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "eventId#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "tmp%0#1"
      ]
    },
    "1353": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "eventId#0",
        "level#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "tmp%0#1",
        "level#0 (copy)"
      ]
    },
    "1355": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "eventId#0",
        "new_box_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "tmp%0#1",
        "new_box_value%0#0"
      ]
    },
    "1356": {
      "op": "swap",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1"
      ]
    },
    "1357": {
      "op": "dig 1",
      "defined_out": [
        "a#0",
        "eventId#0",
        "new_box_value%0#0",
        "new_box_value%0#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "new_box_value%0#0 (copy)"
      ]
    },
    "1359": {
      "op": "box_put",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0"
      ]
    },
    "1360": {
      "op": "dig 1",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "a#0 (copy)"
      ]
    },
    "1362": {
      "op": "bytec 25 // \"_reason\"",
      "defined_out": [
        "\"_reason\"",
        "a#0",
        "a#0 (copy)",
        "eventId#0",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "a#0 (copy)",
        "\"_reason\""
      ]
    },
    "1364": {
      "op": "concat",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1"
      ]
    },
    "1365": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "eventId#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "tmp%0#1 (copy)"
      ]
    },
    "1366": {
      "op": "box_del",
      "defined_out": [
        "a#0",
        "eventId#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "{box_del}"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "{box_del}"
      ]
    },
    "1367": {
      "op": "pop",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1"
      ]
    },
    "1368": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "eventId#0",
        "new_box_value%0#0",
        "reason#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "reason#0 (copy)"
      ]
    },
    "1370": {
      "op": "box_put",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0"
      ]
    },
    "1371": {
      "op": "dig 1",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "a#0 (copy)"
      ]
    },
    "1373": {
      "op": "bytec 26 // \"_triggeredBy\"",
      "defined_out": [
        "\"_triggeredBy\"",
        "a#0",
        "a#0 (copy)",
        "eventId#0",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "a#0 (copy)",
        "\"_triggeredBy\""
      ]
    },
    "1375": {
      "op": "concat",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1"
      ]
    },
    "1376": {
      "op": "txn Sender",
      "defined_out": [
        "a#0",
        "eventId#0",
        "new_box_value%0#0",
        "new_box_value%1#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "new_box_value%1#0"
      ]
    },
    "1378": {
      "op": "dig 1",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "new_box_value%1#0",
        "tmp%0#1 (copy)"
      ]
    },
    "1380": {
      "op": "box_del",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "new_box_value%1#0",
        "{box_del}"
      ]
    },
    "1381": {
      "op": "pop",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "new_box_value%1#0"
      ]
    },
    "1382": {
      "op": "box_put",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0"
      ]
    },
    "1383": {
      "op": "dig 1",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "a#0 (copy)"
      ]
    },
    "1385": {
      "op": "bytec 11 // \"_timestamp\"",
      "defined_out": [
        "\"_timestamp\"",
        "a#0",
        "a#0 (copy)",
        "eventId#0",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "a#0 (copy)",
        "\"_timestamp\""
      ]
    },
    "1387": {
      "op": "concat",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1"
      ]
    },
    "1388": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "a#0",
        "eventId#0",
        "new_box_value%0#0",
        "new_box_value%2#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "new_box_value%2#0"
      ]
    },
    "1390": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "eventId#0",
        "new_box_value%0#0",
        "new_box_value%3#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "new_box_value%3#0"
      ]
    },
    "1391": {
      "op": "box_put",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0"
      ]
    },
    "1392": {
      "op": "dig 1",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "a#0 (copy)"
      ]
    },
    "1394": {
      "op": "bytec 15 // \"_resolved\"",
      "defined_out": [
        "\"_resolved\"",
        "a#0",
        "a#0 (copy)",
        "eventId#0",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "a#0 (copy)",
        "\"_resolved\""
      ]
    },
    "1396": {
      "op": "concat",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1"
      ]
    },
    "1397": {
      "op": "intc_0 // 0",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "0"
      ]
    },
    "1398": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "eventId#0",
        "new_box_value%0#0",
        "new_box_value%4#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "new_box_value%4#0"
      ]
    },
    "1399": {
      "op": "swap",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "new_box_value%4#0",
        "tmp%0#1"
      ]
    },
    "1400": {
      "op": "dig 1",
      "defined_out": [
        "a#0",
        "eventId#0",
        "new_box_value%0#0",
        "new_box_value%4#0",
        "new_box_value%4#0 (copy)",
        "tmp%0#1"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "new_box_value%4#0",
        "tmp%0#1",
        "new_box_value%4#0 (copy)"
      ]
    },
    "1402": {
      "op": "box_put",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "new_box_value%4#0"
      ]
    },
    "1403": {
      "op": "dig 2",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "new_box_value%4#0",
        "a#0 (copy)"
      ]
    },
    "1405": {
      "op": "bytec 16 // \"_resolvedAt\"",
      "defined_out": [
        "\"_resolvedAt\"",
        "a#0",
        "a#0 (copy)",
        "eventId#0",
        "new_box_value%0#0",
        "new_box_value%4#0"
      ],
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "new_box_value%4#0",
        "a#0 (copy)",
        "\"_resolvedAt\""
      ]
    },
    "1407": {
      "op": "concat",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "new_box_value%4#0",
        "tmp%0#1"
      ]
    },
    "1408": {
      "op": "swap",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "new_box_value%4#0"
      ]
    },
    "1409": {
      "op": "box_put",
      "stack_out": [
        "eventId#0",
        "a#0",
        "new_box_value%0#0"
      ]
    },
    "1410": {
      "op": "swap",
      "stack_out": [
        "eventId#0",
        "new_box_value%0#0",
        "a#0"
      ]
    },
    "1411": {
      "op": "bytec 17 // \"_resolvedBy\"",
      "defined_out": [
        "\"_resolvedBy\"",
        "a#0",
        "eventId#0",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "eventId#0",
        "new_box_value%0#0",
        "a#0",
        "\"_resolvedBy\""
      ]
    },
    "1413": {
      "op": "concat",
      "stack_out": [
        "eventId#0",
        "new_box_value%0#0",
        "tmp%0#1"
      ]
    },
    "1414": {
      "op": "global ZeroAddress",
      "defined_out": [
        "eventId#0",
        "new_box_value%0#0",
        "new_box_value%6#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "eventId#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "new_box_value%6#0"
      ]
    },
    "1416": {
      "op": "dig 1",
      "stack_out": [
        "eventId#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "new_box_value%6#0",
        "tmp%0#1 (copy)"
      ]
    },
    "1418": {
      "op": "box_del",
      "stack_out": [
        "eventId#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "new_box_value%6#0",
        "{box_del}"
      ]
    },
    "1419": {
      "op": "pop",
      "stack_out": [
        "eventId#0",
        "new_box_value%0#0",
        "tmp%0#1",
        "new_box_value%6#0"
      ]
    },
    "1420": {
      "op": "box_put",
      "stack_out": [
        "eventId#0",
        "new_box_value%0#0"
      ]
    },
    "1421": {
      "op": "bytec_2 // \"currentEmergencyLevel\"",
      "defined_out": [
        "\"currentEmergencyLevel\"",
        "eventId#0",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "eventId#0",
        "new_box_value%0#0",
        "\"currentEmergencyLevel\""
      ]
    },
    "1422": {
      "op": "frame_dig -2",
      "stack_out": [
        "eventId#0",
        "new_box_value%0#0",
        "\"currentEmergencyLevel\"",
        "level#0 (copy)"
      ]
    },
    "1424": {
      "op": "app_global_put",
      "stack_out": [
        "eventId#0",
        "new_box_value%0#0"
      ]
    },
    "1425": {
      "op": "bytec_0 // \"emergencyActive\"",
      "defined_out": [
        "\"emergencyActive\"",
        "eventId#0",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "eventId#0",
        "new_box_value%0#0",
        "\"emergencyActive\""
      ]
    },
    "1426": {
      "op": "intc_1 // 1",
      "stack_out": [
        "eventId#0",
        "new_box_value%0#0",
        "\"emergencyActive\"",
        "1"
      ]
    },
    "1427": {
      "op": "app_global_put",
      "stack_out": [
        "eventId#0",
        "new_box_value%0#0"
      ]
    },
    "1428": {
      "op": "bytec_3 // \"emergencyCount\"",
      "stack_out": [
        "eventId#0",
        "new_box_value%0#0",
        "\"emergencyCount\""
      ]
    },
    "1429": {
      "op": "uncover 2",
      "stack_out": [
        "new_box_value%0#0",
        "\"emergencyCount\"",
        "eventId#0"
      ]
    },
    "1431": {
      "op": "app_global_put",
      "stack_out": [
        "new_box_value%0#0"
      ]
    },
    "1432": {
      "op": "bytec 12 // \"lastEmergencyTime\"",
      "defined_out": [
        "\"lastEmergencyTime\"",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0",
        "\"lastEmergencyTime\""
      ]
    },
    "1434": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"lastEmergencyTime\"",
        "new_box_value%0#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0",
        "\"lastEmergencyTime\"",
        "new_state_value%0#0"
      ]
    },
    "1436": {
      "op": "app_global_put",
      "stack_out": [
        "new_box_value%0#0"
      ]
    },
    "1437": {
      "op": "pushbytes \"EMERGENCY_ACTIVATED\"",
      "defined_out": [
        "\"EMERGENCY_ACTIVATED\"",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0",
        "\"EMERGENCY_ACTIVATED\""
      ]
    },
    "1458": {
      "op": "swap",
      "stack_out": [
        "\"EMERGENCY_ACTIVATED\"",
        "new_box_value%0#0"
      ]
    },
    "1459": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "1460": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%23#0",
        "reason#0 (copy)"
      ]
    },
    "1462": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1463": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "1465": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1466": {
      "op": "log",
      "stack_out": []
    },
    "1467": {
      "retsub": true,
      "op": "retsub"
    },
    "1468": {
      "block": "triggerEmergency_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "1469": {
      "op": "b triggerEmergency_bool_merge@4"
    },
    "1472": {
      "subroutine": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.resolveEmergency",
      "params": {
        "eventId#0": "uint64",
        "resolution#0": "bytes"
      },
      "block": "resolveEmergency",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1475": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1477": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1478": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1479": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1480": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1481": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1482": {
      "op": "assert",
      "stack_out": []
    },
    "1483": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1484": {
      "op": "bytec_0 // \"emergencyActive\"",
      "defined_out": [
        "\"emergencyActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"emergencyActive\""
      ]
    },
    "1485": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1486": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1487": {
      "op": "assert",
      "stack_out": []
    },
    "1488": {
      "op": "frame_dig -2",
      "defined_out": [
        "eventId#0 (copy)"
      ],
      "stack_out": [
        "eventId#0 (copy)"
      ]
    },
    "1490": {
      "op": "itob",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "1491": {
      "op": "dupn 2",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1493": {
      "op": "bytec 15 // \"_resolved\"",
      "defined_out": [
        "\"_resolved\"",
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "a#0 (copy)",
        "\"_resolved\""
      ]
    },
    "1495": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "resolvedKey#0"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "resolvedKey#0"
      ]
    },
    "1496": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "a#0",
        "resolvedKey#0",
        "a#0 (copy)"
      ]
    },
    "1498": {
      "op": "bytec 16 // \"_resolvedAt\"",
      "defined_out": [
        "\"_resolvedAt\"",
        "a#0",
        "a#0 (copy)",
        "resolvedKey#0"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "resolvedKey#0",
        "a#0 (copy)",
        "\"_resolvedAt\""
      ]
    },
    "1500": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "resolvedAtKey#0",
        "resolvedKey#0"
      ],
      "stack_out": [
        "a#0",
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0"
      ]
    },
    "1501": {
      "op": "uncover 2",
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "a#0"
      ]
    },
    "1503": {
      "op": "bytec 17 // \"_resolvedBy\"",
      "defined_out": [
        "\"_resolvedBy\"",
        "a#0",
        "resolvedAtKey#0",
        "resolvedKey#0"
      ],
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "a#0",
        "\"_resolvedBy\""
      ]
    },
    "1505": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0"
      ],
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0"
      ]
    },
    "1506": {
      "op": "dig 2",
      "defined_out": [
        "a#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0",
        "resolvedKey#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0 (copy)"
      ]
    },
    "1508": {
      "op": "box_len",
      "defined_out": [
        "a#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0"
      ],
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1509": {
      "op": "bury 1",
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_exists%2#0"
      ]
    },
    "1511": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0"
      ]
    },
    "1512": {
      "op": "dig 2",
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0 (copy)"
      ]
    },
    "1514": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0"
      ],
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1515": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "1516": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "resolved#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0"
      ],
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_exists%3#0",
        "resolved#0"
      ]
    },
    "1517": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolved#0",
        "maybe_exists%3#0"
      ]
    },
    "1518": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolved#0"
      ]
    },
    "1519": {
      "op": "!",
      "defined_out": [
        "a#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "tmp%5#0"
      ]
    },
    "1520": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0"
      ]
    },
    "1521": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "0"
      ]
    },
    "1522": {
      "op": "bytec_3 // \"emergencyCount\"",
      "defined_out": [
        "\"emergencyCount\"",
        "0",
        "a#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0"
      ],
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "0",
        "\"emergencyCount\""
      ]
    },
    "1523": {
      "op": "app_global_get_ex",
      "defined_out": [
        "a#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0"
      ],
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1524": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value%4#0"
      ]
    },
    "1525": {
      "op": "frame_dig -2",
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value%4#0",
        "eventId#0 (copy)"
      ]
    },
    "1527": {
      "op": "==",
      "defined_out": [
        "a#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "tmp%6#0"
      ]
    },
    "1528": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0"
      ]
    },
    "1529": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "a#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0"
      ],
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "1"
      ]
    },
    "1530": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "new_box_value%0#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0"
      ],
      "stack_out": [
        "a#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "new_box_value%0#0"
      ]
    },
    "1531": {
      "op": "uncover 3",
      "stack_out": [
        "a#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "new_box_value%0#0",
        "resolvedKey#0"
      ]
    },
    "1533": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0",
        "new_box_value%0#0"
      ]
    },
    "1534": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "resolvedAtKey#0",
        "resolvedByKey#0"
      ]
    },
    "1535": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "a#0",
        "new_box_value%1#0",
        "resolvedAtKey#0",
        "resolvedByKey#0"
      ],
      "stack_out": [
        "a#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "new_box_value%1#0"
      ]
    },
    "1537": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "new_box_value%2#0",
        "resolvedAtKey#0",
        "resolvedByKey#0"
      ],
      "stack_out": [
        "a#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "new_box_value%2#0"
      ]
    },
    "1538": {
      "op": "uncover 2",
      "stack_out": [
        "a#0",
        "resolvedByKey#0",
        "new_box_value%2#0",
        "resolvedAtKey#0"
      ]
    },
    "1540": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "resolvedByKey#0",
        "resolvedAtKey#0",
        "new_box_value%2#0"
      ]
    },
    "1541": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "resolvedByKey#0"
      ]
    },
    "1542": {
      "op": "txn Sender",
      "defined_out": [
        "a#0",
        "new_box_value%3#0",
        "resolvedByKey#0"
      ],
      "stack_out": [
        "a#0",
        "resolvedByKey#0",
        "new_box_value%3#0"
      ]
    },
    "1544": {
      "op": "dig 1",
      "defined_out": [
        "a#0",
        "new_box_value%3#0",
        "resolvedByKey#0",
        "resolvedByKey#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "resolvedByKey#0",
        "new_box_value%3#0",
        "resolvedByKey#0 (copy)"
      ]
    },
    "1546": {
      "op": "box_del",
      "defined_out": [
        "a#0",
        "new_box_value%3#0",
        "resolvedByKey#0",
        "{box_del}"
      ],
      "stack_out": [
        "a#0",
        "resolvedByKey#0",
        "new_box_value%3#0",
        "{box_del}"
      ]
    },
    "1547": {
      "op": "pop",
      "stack_out": [
        "a#0",
        "resolvedByKey#0",
        "new_box_value%3#0"
      ]
    },
    "1548": {
      "op": "box_put",
      "stack_out": [
        "a#0"
      ]
    },
    "1549": {
      "op": "bytec_2 // \"currentEmergencyLevel\"",
      "defined_out": [
        "\"currentEmergencyLevel\"",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "\"currentEmergencyLevel\""
      ]
    },
    "1550": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "\"currentEmergencyLevel\"",
        "0"
      ]
    },
    "1551": {
      "op": "app_global_put",
      "stack_out": [
        "a#0"
      ]
    },
    "1552": {
      "op": "bytec_0 // \"emergencyActive\"",
      "stack_out": [
        "a#0",
        "\"emergencyActive\""
      ]
    },
    "1553": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "\"emergencyActive\"",
        "0"
      ]
    },
    "1554": {
      "op": "app_global_put",
      "stack_out": [
        "a#0"
      ]
    },
    "1555": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "0"
      ]
    },
    "1556": {
      "op": "bytec 4 // \"recoveryMode\"",
      "defined_out": [
        "\"recoveryMode\"",
        "0",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "0",
        "\"recoveryMode\""
      ]
    },
    "1558": {
      "op": "app_global_get_ex",
      "defined_out": [
        "a#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1559": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "a#0",
        "maybe_value%5#0"
      ]
    },
    "1560": {
      "op": "bz resolveEmergency_after_if_else@2",
      "stack_out": [
        "a#0"
      ]
    },
    "1563": {
      "op": "bytec 4 // \"recoveryMode\"",
      "stack_out": [
        "a#0",
        "\"recoveryMode\""
      ]
    },
    "1565": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "\"recoveryMode\"",
        "0"
      ]
    },
    "1566": {
      "op": "app_global_put",
      "stack_out": [
        "a#0"
      ]
    },
    "1567": {
      "op": "bytec 5 // \"recoveryApprovals\"",
      "defined_out": [
        "\"recoveryApprovals\"",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "\"recoveryApprovals\""
      ]
    },
    "1569": {
      "op": "intc_0 // 0",
      "stack_out": [
        "a#0",
        "\"recoveryApprovals\"",
        "0"
      ]
    },
    "1570": {
      "op": "app_global_put",
      "stack_out": [
        "a#0"
      ]
    },
    "1571": {
      "block": "resolveEmergency_after_if_else@2",
      "stack_in": [
        "a#0"
      ],
      "op": "pushbytes \"EMERGENCY_RESOLVED\"",
      "defined_out": [
        "\"EMERGENCY_RESOLVED\""
      ],
      "stack_out": [
        "a#0",
        "\"EMERGENCY_RESOLVED\""
      ]
    },
    "1591": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"EMERGENCY_RESOLVED\"",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "\"EMERGENCY_RESOLVED\"",
        "a#0"
      ]
    },
    "1593": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%8#0"
      ]
    },
    "1594": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "resolution#0 (copy)",
        "tmp%8#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%8#0",
        "resolution#0 (copy)"
      ]
    },
    "1596": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%9#0"
      ]
    },
    "1597": {
      "op": "txn Sender",
      "defined_out": [
        "a#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1599": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "a#0",
        "tmp%11#0"
      ]
    },
    "1600": {
      "op": "log",
      "stack_out": [
        "a#0"
      ]
    },
    "1601": {
      "retsub": true,
      "op": "retsub"
    },
    "1602": {
      "subroutine": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.escalateEmergency",
      "params": {
        "newLevel#0": "uint64",
        "reason#0": "bytes"
      },
      "block": "escalateEmergency",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1605": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1607": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1608": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1609": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1610": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1611": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1612": {
      "op": "assert",
      "stack_out": []
    },
    "1613": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1614": {
      "op": "bytec_0 // \"emergencyActive\"",
      "defined_out": [
        "\"emergencyActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"emergencyActive\""
      ]
    },
    "1615": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1616": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1617": {
      "op": "assert",
      "stack_out": []
    },
    "1618": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1619": {
      "op": "bytec_2 // \"currentEmergencyLevel\"",
      "defined_out": [
        "\"currentEmergencyLevel\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"currentEmergencyLevel\""
      ]
    },
    "1620": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1621": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1622": {
      "op": "frame_dig -2",
      "defined_out": [
        "maybe_value%2#0",
        "newLevel#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "newLevel#0 (copy)"
      ]
    },
    "1624": {
      "op": "<",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1625": {
      "op": "assert",
      "stack_out": []
    },
    "1626": {
      "op": "bytec_2 // \"currentEmergencyLevel\"",
      "stack_out": [
        "\"currentEmergencyLevel\""
      ]
    },
    "1627": {
      "op": "frame_dig -2",
      "stack_out": [
        "\"currentEmergencyLevel\"",
        "newLevel#0 (copy)"
      ]
    },
    "1629": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1630": {
      "op": "frame_dig -2",
      "stack_out": [
        "newLevel#0 (copy)"
      ]
    },
    "1632": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1633": {
      "op": "pushbytes \"EMERGENCY_ESCALATED\"",
      "defined_out": [
        "\"EMERGENCY_ESCALATED\"",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "\"EMERGENCY_ESCALATED\""
      ]
    },
    "1654": {
      "op": "swap",
      "stack_out": [
        "\"EMERGENCY_ESCALATED\"",
        "tmp%3#0"
      ]
    },
    "1655": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1656": {
      "op": "frame_dig -1",
      "defined_out": [
        "reason#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "reason#0 (copy)"
      ]
    },
    "1658": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1659": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1661": {
      "op": "concat",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1662": {
      "op": "log",
      "stack_out": []
    },
    "1663": {
      "retsub": true,
      "op": "retsub"
    },
    "1664": {
      "subroutine": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.autoResolveCheck",
      "params": {},
      "block": "autoResolveCheck",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1667": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "emergencyDuration#0"
      ]
    },
    "1669": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "0"
      ]
    },
    "1670": {
      "op": "bytec_0 // \"emergencyActive\"",
      "defined_out": [
        "\"emergencyActive\"",
        "0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "0",
        "\"emergencyActive\""
      ]
    },
    "1671": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1672": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%0#0"
      ]
    },
    "1673": {
      "op": "bnz autoResolveCheck_after_if_else@2",
      "stack_out": [
        "emergencyDuration#0"
      ]
    },
    "1676": {
      "retsub": true,
      "op": "retsub"
    },
    "1677": {
      "block": "autoResolveCheck_after_if_else@2",
      "stack_in": [
        "emergencyDuration#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "0"
      ]
    },
    "1678": {
      "op": "bytec_3 // \"emergencyCount\"",
      "defined_out": [
        "\"emergencyCount\"",
        "0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "0",
        "\"emergencyCount\""
      ]
    },
    "1679": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1680": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%1#0"
      ]
    },
    "1681": {
      "op": "itob",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "a#0"
      ]
    },
    "1682": {
      "op": "bytec 11 // \"_timestamp\"",
      "defined_out": [
        "\"_timestamp\"",
        "a#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "a#0",
        "\"_timestamp\""
      ]
    },
    "1684": {
      "op": "concat",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "tmp%0#1"
      ]
    },
    "1685": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1686": {
      "op": "swap",
      "stack_out": [
        "emergencyDuration#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "1687": {
      "op": "btoi",
      "defined_out": [
        "currentEventTimestamp#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "maybe_exists%2#0",
        "currentEventTimestamp#0"
      ]
    },
    "1688": {
      "op": "swap",
      "stack_out": [
        "emergencyDuration#0",
        "currentEventTimestamp#0",
        "maybe_exists%2#0"
      ]
    },
    "1689": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "emergencyDuration#0",
        "currentEventTimestamp#0"
      ]
    },
    "1690": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "currentEventTimestamp#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "currentEventTimestamp#0",
        "tmp%2#0"
      ]
    },
    "1692": {
      "op": "swap",
      "stack_out": [
        "emergencyDuration#0",
        "tmp%2#0",
        "currentEventTimestamp#0"
      ]
    },
    "1693": {
      "op": "-",
      "defined_out": [
        "emergencyDuration#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "emergencyDuration#0"
      ]
    },
    "1694": {
      "op": "frame_bury 0",
      "defined_out": [
        "emergencyDuration#0"
      ],
      "stack_out": [
        "emergencyDuration#0"
      ]
    },
    "1696": {
      "op": "intc_0 // 0",
      "stack_out": [
        "emergencyDuration#0",
        "0"
      ]
    },
    "1697": {
      "op": "bytec_2 // \"currentEmergencyLevel\"",
      "defined_out": [
        "\"currentEmergencyLevel\"",
        "0",
        "emergencyDuration#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "0",
        "\"currentEmergencyLevel\""
      ]
    },
    "1698": {
      "op": "app_global_get_ex",
      "defined_out": [
        "emergencyDuration#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1699": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%3#0"
      ]
    },
    "1700": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "emergencyDuration#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "1701": {
      "op": "==",
      "defined_out": [
        "emergencyDuration#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "tmp%3#0"
      ]
    },
    "1702": {
      "op": "bz autoResolveCheck_after_if_else@5",
      "stack_out": [
        "emergencyDuration#0"
      ]
    },
    "1705": {
      "op": "intc_0 // 0",
      "stack_out": [
        "emergencyDuration#0",
        "0"
      ]
    },
    "1706": {
      "op": "bytec 21 // \"autoResolveTime\"",
      "defined_out": [
        "\"autoResolveTime\"",
        "0",
        "emergencyDuration#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "0",
        "\"autoResolveTime\""
      ]
    },
    "1708": {
      "op": "app_global_get_ex",
      "defined_out": [
        "emergencyDuration#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1709": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%4#0"
      ]
    },
    "1710": {
      "op": "frame_dig 0",
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%4#0",
        "emergencyDuration#0"
      ]
    },
    "1712": {
      "op": "<=",
      "defined_out": [
        "emergencyDuration#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "tmp%4#0"
      ]
    },
    "1713": {
      "op": "bz autoResolveCheck_after_if_else@5",
      "stack_out": [
        "emergencyDuration#0"
      ]
    },
    "1716": {
      "op": "intc_0 // 0",
      "stack_out": [
        "emergencyDuration#0",
        "0"
      ]
    },
    "1717": {
      "op": "bytec_3 // \"emergencyCount\"",
      "stack_out": [
        "emergencyDuration#0",
        "0",
        "\"emergencyCount\""
      ]
    },
    "1718": {
      "op": "app_global_get_ex",
      "defined_out": [
        "emergencyDuration#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1719": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%5#0"
      ]
    },
    "1720": {
      "op": "pushbytes \"Auto-resolved after timeout\"",
      "defined_out": [
        "\"Auto-resolved after timeout\"",
        "emergencyDuration#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%5#0",
        "\"Auto-resolved after timeout\""
      ]
    },
    "1749": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.resolveEmergency",
      "op": "callsub resolveEmergency",
      "stack_out": [
        "emergencyDuration#0"
      ]
    },
    "1752": {
      "retsub": true,
      "op": "retsub"
    },
    "1753": {
      "block": "autoResolveCheck_after_if_else@5",
      "stack_in": [
        "emergencyDuration#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "0"
      ]
    },
    "1754": {
      "op": "bytec 22 // \"maxEmergencyDuration\"",
      "defined_out": [
        "\"maxEmergencyDuration\"",
        "0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "0",
        "\"maxEmergencyDuration\""
      ]
    },
    "1756": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1757": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%6#0"
      ]
    },
    "1758": {
      "op": "frame_dig 0",
      "defined_out": [
        "emergencyDuration#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%6#0",
        "emergencyDuration#0"
      ]
    },
    "1760": {
      "op": "<=",
      "defined_out": [
        "emergencyDuration#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "tmp%5#0"
      ]
    },
    "1761": {
      "op": "bz autoResolveCheck_after_if_else@7",
      "stack_out": [
        "emergencyDuration#0"
      ]
    },
    "1764": {
      "op": "bytec_2 // \"currentEmergencyLevel\"",
      "defined_out": [
        "\"currentEmergencyLevel\"",
        "emergencyDuration#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "\"currentEmergencyLevel\""
      ]
    },
    "1765": {
      "op": "intc_3 // 4",
      "defined_out": [
        "\"currentEmergencyLevel\"",
        "4",
        "emergencyDuration#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "\"currentEmergencyLevel\"",
        "4"
      ]
    },
    "1766": {
      "op": "app_global_put",
      "stack_out": [
        "emergencyDuration#0"
      ]
    },
    "1767": {
      "op": "intc_0 // 0",
      "stack_out": [
        "emergencyDuration#0",
        "0"
      ]
    },
    "1768": {
      "op": "bytec_3 // \"emergencyCount\"",
      "defined_out": [
        "\"emergencyCount\"",
        "0",
        "emergencyDuration#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "0",
        "\"emergencyCount\""
      ]
    },
    "1769": {
      "op": "app_global_get_ex",
      "defined_out": [
        "emergencyDuration#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1770": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "emergencyDuration#0",
        "maybe_value%7#0"
      ]
    },
    "1771": {
      "op": "itob",
      "defined_out": [
        "emergencyDuration#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "tmp%6#0"
      ]
    },
    "1772": {
      "op": "pushbytes \"EMERGENCY_MAX_DURATION_EXCEEDED\"",
      "defined_out": [
        "\"EMERGENCY_MAX_DURATION_EXCEEDED\"",
        "emergencyDuration#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "tmp%6#0",
        "\"EMERGENCY_MAX_DURATION_EXCEEDED\""
      ]
    },
    "1805": {
      "op": "swap",
      "stack_out": [
        "emergencyDuration#0",
        "\"EMERGENCY_MAX_DURATION_EXCEEDED\"",
        "tmp%6#0"
      ]
    },
    "1806": {
      "op": "concat",
      "defined_out": [
        "emergencyDuration#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "emergencyDuration#0",
        "tmp%7#0"
      ]
    },
    "1807": {
      "op": "log",
      "stack_out": [
        "emergencyDuration#0"
      ]
    },
    "1808": {
      "block": "autoResolveCheck_after_if_else@7",
      "stack_in": [
        "emergencyDuration#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1809": {
      "subroutine": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.addEmergencyOperator",
      "params": {
        "operator#0": "bytes"
      },
      "block": "addEmergencyOperator",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1812": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1814": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1815": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1816": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1817": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1818": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1819": {
      "op": "assert",
      "stack_out": []
    },
    "1820": {
      "op": "pushbytes \"EMERGENCY_OPERATOR_ADDED\"",
      "defined_out": [
        "\"EMERGENCY_OPERATOR_ADDED\""
      ],
      "stack_out": [
        "\"EMERGENCY_OPERATOR_ADDED\""
      ]
    },
    "1846": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"EMERGENCY_OPERATOR_ADDED\"",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "\"EMERGENCY_OPERATOR_ADDED\"",
        "operator#0 (copy)"
      ]
    },
    "1848": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1849": {
      "op": "log",
      "stack_out": []
    },
    "1850": {
      "retsub": true,
      "op": "retsub"
    },
    "1851": {
      "subroutine": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.removeEmergencyOperator",
      "params": {
        "operator#0": "bytes"
      },
      "block": "removeEmergencyOperator",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1854": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1856": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1857": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1858": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1859": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1860": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1861": {
      "op": "assert",
      "stack_out": []
    },
    "1862": {
      "op": "pushbytes \"EMERGENCY_OPERATOR_REMOVED\"",
      "defined_out": [
        "\"EMERGENCY_OPERATOR_REMOVED\""
      ],
      "stack_out": [
        "\"EMERGENCY_OPERATOR_REMOVED\""
      ]
    },
    "1890": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"EMERGENCY_OPERATOR_REMOVED\"",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "\"EMERGENCY_OPERATOR_REMOVED\"",
        "operator#0 (copy)"
      ]
    },
    "1892": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1893": {
      "op": "log",
      "stack_out": []
    },
    "1894": {
      "retsub": true,
      "op": "retsub"
    },
    "1895": {
      "subroutine": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.activateRecoveryMode",
      "params": {},
      "block": "activateRecoveryMode",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1896": {
      "op": "bytec_2 // \"currentEmergencyLevel\"",
      "defined_out": [
        "\"currentEmergencyLevel\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"currentEmergencyLevel\""
      ]
    },
    "1897": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1898": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1899": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "4"
      ]
    },
    "1900": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1901": {
      "op": "assert",
      "stack_out": []
    },
    "1902": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1904": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.isAuthorizedOperator",
      "op": "callsub isAuthorizedOperator",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1907": {
      "op": "assert",
      "stack_out": []
    },
    "1908": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1909": {
      "op": "bytec 4 // \"recoveryMode\"",
      "defined_out": [
        "\"recoveryMode\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"recoveryMode\""
      ]
    },
    "1911": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1912": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1913": {
      "op": "bnz activateRecoveryMode_after_if_else@2",
      "stack_out": []
    },
    "1916": {
      "op": "bytec 4 // \"recoveryMode\"",
      "stack_out": [
        "\"recoveryMode\""
      ]
    },
    "1918": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"recoveryMode\"",
        "1"
      ],
      "stack_out": [
        "\"recoveryMode\"",
        "1"
      ]
    },
    "1919": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1920": {
      "op": "pushbytes \"recoveryStartTime\"",
      "defined_out": [
        "\"recoveryStartTime\""
      ],
      "stack_out": [
        "\"recoveryStartTime\""
      ]
    },
    "1939": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"recoveryStartTime\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"recoveryStartTime\"",
        "new_state_value%0#0"
      ]
    },
    "1941": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1942": {
      "op": "bytec 5 // \"recoveryApprovals\"",
      "defined_out": [
        "\"recoveryApprovals\""
      ],
      "stack_out": [
        "\"recoveryApprovals\""
      ]
    },
    "1944": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"recoveryApprovals\"",
        "0"
      ]
    },
    "1945": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1946": {
      "block": "activateRecoveryMode_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1947": {
      "op": "bytec 5 // \"recoveryApprovals\"",
      "defined_out": [
        "\"recoveryApprovals\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"recoveryApprovals\""
      ]
    },
    "1949": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1950": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1951": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "1"
      ]
    },
    "1952": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "1953": {
      "op": "bytec 5 // \"recoveryApprovals\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"recoveryApprovals\""
      ]
    },
    "1955": {
      "op": "swap",
      "stack_out": [
        "\"recoveryApprovals\"",
        "new_state_value%1#0"
      ]
    },
    "1956": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1957": {
      "op": "pushbytes \"RECOVERY_MODE_APPROVAL\"",
      "defined_out": [
        "\"RECOVERY_MODE_APPROVAL\""
      ],
      "stack_out": [
        "\"RECOVERY_MODE_APPROVAL\""
      ]
    },
    "1981": {
      "op": "txn Sender",
      "defined_out": [
        "\"RECOVERY_MODE_APPROVAL\"",
        "tmp%3#0"
      ],
      "stack_out": [
        "\"RECOVERY_MODE_APPROVAL\"",
        "tmp%3#0"
      ]
    },
    "1983": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1984": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%4#0",
        "0"
      ]
    },
    "1985": {
      "op": "bytec 5 // \"recoveryApprovals\"",
      "stack_out": [
        "tmp%4#0",
        "0",
        "\"recoveryApprovals\""
      ]
    },
    "1987": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1988": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%4#0",
        "maybe_value%3#0"
      ]
    },
    "1989": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1990": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1991": {
      "op": "log",
      "stack_out": []
    },
    "1992": {
      "retsub": true,
      "op": "retsub"
    },
    "1993": {
      "subroutine": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.executeRecovery",
      "params": {},
      "block": "executeRecovery",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1994": {
      "op": "bytec 4 // \"recoveryMode\"",
      "defined_out": [
        "\"recoveryMode\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"recoveryMode\""
      ]
    },
    "1996": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1997": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1998": {
      "op": "assert",
      "stack_out": []
    },
    "1999": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2000": {
      "op": "bytec 5 // \"recoveryApprovals\"",
      "defined_out": [
        "\"recoveryApprovals\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"recoveryApprovals\""
      ]
    },
    "2002": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2003": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2004": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "3"
      ]
    },
    "2006": {
      "op": ">=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2007": {
      "op": "assert",
      "stack_out": []
    },
    "2008": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2010": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "2011": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"admin\""
      ]
    },
    "2012": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2013": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%2#0"
      ]
    },
    "2014": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2015": {
      "op": "assert",
      "stack_out": []
    },
    "2016": {
      "op": "bytec_2 // \"currentEmergencyLevel\"",
      "defined_out": [
        "\"currentEmergencyLevel\""
      ],
      "stack_out": [
        "\"currentEmergencyLevel\""
      ]
    },
    "2017": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"currentEmergencyLevel\"",
        "0"
      ]
    },
    "2018": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2019": {
      "op": "bytec_0 // \"emergencyActive\"",
      "defined_out": [
        "\"emergencyActive\""
      ],
      "stack_out": [
        "\"emergencyActive\""
      ]
    },
    "2020": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"emergencyActive\"",
        "0"
      ]
    },
    "2021": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2022": {
      "op": "bytec 4 // \"recoveryMode\"",
      "stack_out": [
        "\"recoveryMode\""
      ]
    },
    "2024": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"recoveryMode\"",
        "0"
      ]
    },
    "2025": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2026": {
      "op": "bytec 5 // \"recoveryApprovals\"",
      "stack_out": [
        "\"recoveryApprovals\""
      ]
    },
    "2028": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"recoveryApprovals\"",
        "0"
      ]
    },
    "2029": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2030": {
      "op": "pushbytes \"RECOVERY_EXECUTED\"",
      "defined_out": [
        "\"RECOVERY_EXECUTED\""
      ],
      "stack_out": [
        "\"RECOVERY_EXECUTED\""
      ]
    },
    "2049": {
      "op": "txn Sender",
      "defined_out": [
        "\"RECOVERY_EXECUTED\"",
        "tmp%3#0"
      ],
      "stack_out": [
        "\"RECOVERY_EXECUTED\"",
        "tmp%3#0"
      ]
    },
    "2051": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "2052": {
      "op": "log",
      "stack_out": []
    },
    "2053": {
      "retsub": true,
      "op": "retsub"
    },
    "2054": {
      "subroutine": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.checkCircuitBreaker",
      "params": {
        "transactionAmount#0": "uint64"
      },
      "block": "checkCircuitBreaker",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2057": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "newDailyVolume#0"
      ]
    },
    "2059": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "tmp%0#0"
      ]
    },
    "2061": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "tmp%0#0",
        "0"
      ]
    },
    "2062": {
      "op": "bytec 10 // \"lastVolumeReset\"",
      "defined_out": [
        "\"lastVolumeReset\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "tmp%0#0",
        "0",
        "\"lastVolumeReset\""
      ]
    },
    "2064": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2065": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newDailyVolume#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2066": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "tmp%1#0"
      ]
    },
    "2067": {
      "op": "pushint 86400 // 86400",
      "defined_out": [
        "86400",
        "tmp%1#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "tmp%1#0",
        "86400"
      ]
    },
    "2071": {
      "op": "/",
      "defined_out": [
        "daysSinceReset#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "daysSinceReset#0"
      ]
    },
    "2072": {
      "op": "bz checkCircuitBreaker_after_if_else@2",
      "stack_out": [
        "newDailyVolume#0"
      ]
    },
    "2075": {
      "op": "bytec 7 // \"currentDailyVolume\"",
      "defined_out": [
        "\"currentDailyVolume\""
      ],
      "stack_out": [
        "newDailyVolume#0",
        "\"currentDailyVolume\""
      ]
    },
    "2077": {
      "op": "intc_0 // 0",
      "stack_out": [
        "newDailyVolume#0",
        "\"currentDailyVolume\"",
        "0"
      ]
    },
    "2078": {
      "op": "app_global_put",
      "stack_out": [
        "newDailyVolume#0"
      ]
    },
    "2079": {
      "op": "bytec 10 // \"lastVolumeReset\"",
      "stack_out": [
        "newDailyVolume#0",
        "\"lastVolumeReset\""
      ]
    },
    "2081": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"lastVolumeReset\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "\"lastVolumeReset\"",
        "new_state_value%0#0"
      ]
    },
    "2083": {
      "op": "app_global_put",
      "stack_out": [
        "newDailyVolume#0"
      ]
    },
    "2084": {
      "block": "checkCircuitBreaker_after_if_else@2",
      "stack_in": [
        "newDailyVolume#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "0"
      ]
    },
    "2085": {
      "op": "bytec 7 // \"currentDailyVolume\"",
      "defined_out": [
        "\"currentDailyVolume\"",
        "0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "0",
        "\"currentDailyVolume\""
      ]
    },
    "2087": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2088": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newDailyVolume#0",
        "maybe_value%1#0"
      ]
    },
    "2089": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%1#0",
        "transactionAmount#0 (copy)"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "maybe_value%1#0",
        "transactionAmount#0 (copy)"
      ]
    },
    "2091": {
      "op": "+",
      "defined_out": [
        "newDailyVolume#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "newDailyVolume#0"
      ]
    },
    "2092": {
      "op": "dup",
      "stack_out": [
        "newDailyVolume#0",
        "newDailyVolume#0",
        "newDailyVolume#0"
      ]
    },
    "2093": {
      "op": "frame_bury 0",
      "defined_out": [
        "newDailyVolume#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "newDailyVolume#0"
      ]
    },
    "2095": {
      "op": "intc_0 // 0",
      "stack_out": [
        "newDailyVolume#0",
        "newDailyVolume#0",
        "0"
      ]
    },
    "2096": {
      "op": "bytec 8 // \"maxDailyVolume\"",
      "defined_out": [
        "\"maxDailyVolume\"",
        "0",
        "newDailyVolume#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "newDailyVolume#0",
        "0",
        "\"maxDailyVolume\""
      ]
    },
    "2098": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "newDailyVolume#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "newDailyVolume#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2099": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newDailyVolume#0",
        "newDailyVolume#0",
        "maybe_value%2#0"
      ]
    },
    "2100": {
      "op": ">",
      "defined_out": [
        "newDailyVolume#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "tmp%3#0"
      ]
    },
    "2101": {
      "op": "bz checkCircuitBreaker_after_if_else@4",
      "stack_out": [
        "newDailyVolume#0"
      ]
    },
    "2104": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "newDailyVolume#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "2"
      ]
    },
    "2105": {
      "op": "pushbytes \"Daily volume limit exceeded\"",
      "defined_out": [
        "\"Daily volume limit exceeded\"",
        "2",
        "newDailyVolume#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "2",
        "\"Daily volume limit exceeded\""
      ]
    },
    "2134": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.triggerEmergency",
      "op": "callsub triggerEmergency",
      "stack_out": [
        "newDailyVolume#0"
      ]
    },
    "2137": {
      "op": "intc_0 // 0",
      "stack_out": [
        "newDailyVolume#0",
        "0"
      ]
    },
    "2138": {
      "op": "swap"
    },
    "2139": {
      "retsub": true,
      "op": "retsub"
    },
    "2140": {
      "block": "checkCircuitBreaker_after_if_else@4",
      "stack_in": [
        "newDailyVolume#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "0"
      ]
    },
    "2141": {
      "op": "bytec 13 // \"largeWithdrawalThreshold\"",
      "defined_out": [
        "\"largeWithdrawalThreshold\"",
        "0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "0",
        "\"largeWithdrawalThreshold\""
      ]
    },
    "2143": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2144": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newDailyVolume#0",
        "maybe_value%3#0"
      ]
    },
    "2145": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%3#0",
        "transactionAmount#0 (copy)"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "maybe_value%3#0",
        "transactionAmount#0 (copy)"
      ]
    },
    "2147": {
      "op": "<=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "tmp%4#0"
      ]
    },
    "2148": {
      "op": "bz checkCircuitBreaker_after_if_else@8",
      "stack_out": [
        "newDailyVolume#0"
      ]
    },
    "2151": {
      "op": "frame_dig -1",
      "stack_out": [
        "newDailyVolume#0",
        "transactionAmount#0 (copy)"
      ]
    },
    "2153": {
      "op": "itob",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "tmp%5#0"
      ]
    },
    "2154": {
      "op": "pushbytes \"LARGE_WITHDRAWAL_DETECTED\"",
      "defined_out": [
        "\"LARGE_WITHDRAWAL_DETECTED\"",
        "tmp%5#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "tmp%5#0",
        "\"LARGE_WITHDRAWAL_DETECTED\""
      ]
    },
    "2181": {
      "op": "swap",
      "stack_out": [
        "newDailyVolume#0",
        "\"LARGE_WITHDRAWAL_DETECTED\"",
        "tmp%5#0"
      ]
    },
    "2182": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "tmp%6#0"
      ]
    },
    "2183": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "2185": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "tmp%8#0"
      ]
    },
    "2186": {
      "op": "log",
      "stack_out": [
        "newDailyVolume#0"
      ]
    },
    "2187": {
      "op": "intc_0 // 0",
      "stack_out": [
        "newDailyVolume#0",
        "0"
      ]
    },
    "2188": {
      "op": "bytec_0 // \"emergencyActive\"",
      "defined_out": [
        "\"emergencyActive\"",
        "0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "0",
        "\"emergencyActive\""
      ]
    },
    "2189": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2190": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newDailyVolume#0",
        "maybe_value%4#0"
      ]
    },
    "2191": {
      "op": "bnz checkCircuitBreaker_after_if_else@8",
      "stack_out": [
        "newDailyVolume#0"
      ]
    },
    "2194": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "1"
      ]
    },
    "2195": {
      "op": "pushbytes \"Large withdrawal detected\"",
      "defined_out": [
        "\"Large withdrawal detected\"",
        "1"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "1",
        "\"Large withdrawal detected\""
      ]
    },
    "2222": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.triggerEmergency",
      "op": "callsub triggerEmergency",
      "stack_out": [
        "newDailyVolume#0"
      ]
    },
    "2225": {
      "block": "checkCircuitBreaker_after_if_else@8",
      "stack_in": [
        "newDailyVolume#0"
      ],
      "op": "bytec 7 // \"currentDailyVolume\"",
      "defined_out": [
        "\"currentDailyVolume\""
      ],
      "stack_out": [
        "newDailyVolume#0",
        "\"currentDailyVolume\""
      ]
    },
    "2227": {
      "op": "frame_dig 0",
      "defined_out": [
        "\"currentDailyVolume\"",
        "newDailyVolume#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "\"currentDailyVolume\"",
        "newDailyVolume#0"
      ]
    },
    "2229": {
      "op": "app_global_put",
      "stack_out": [
        "newDailyVolume#0"
      ]
    },
    "2230": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "newDailyVolume#0"
      ],
      "stack_out": [
        "newDailyVolume#0",
        "1"
      ]
    },
    "2231": {
      "op": "swap"
    },
    "2232": {
      "retsub": true,
      "op": "retsub"
    },
    "2233": {
      "subroutine": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.reportSuspiciousActivity",
      "params": {
        "activityType#0": "bytes",
        "details#0": "bytes"
      },
      "block": "reportSuspiciousActivity",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2236": {
      "op": "pushbytes \"SUSPICIOUS_ACTIVITY_REPORTED\"",
      "defined_out": [
        "\"SUSPICIOUS_ACTIVITY_REPORTED\""
      ],
      "stack_out": [
        "\"SUSPICIOUS_ACTIVITY_REPORTED\""
      ]
    },
    "2266": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"SUSPICIOUS_ACTIVITY_REPORTED\"",
        "activityType#0 (copy)"
      ],
      "stack_out": [
        "\"SUSPICIOUS_ACTIVITY_REPORTED\"",
        "activityType#0 (copy)"
      ]
    },
    "2268": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2269": {
      "op": "frame_dig -1",
      "defined_out": [
        "details#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "details#0 (copy)"
      ]
    },
    "2271": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2272": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "2274": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "2275": {
      "op": "log",
      "stack_out": []
    },
    "2276": {
      "retsub": true,
      "op": "retsub"
    },
    "2277": {
      "subroutine": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.updateEmergencyThresholds",
      "params": {
        "suspiciousThreshold#0": "uint64",
        "failedTxThreshold#0": "uint64",
        "largeWithdrawalThreshold#0": "uint64",
        "maxDailyVolume#0": "uint64"
      },
      "block": "updateEmergencyThresholds",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "2280": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2282": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2283": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "2284": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2285": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2286": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2287": {
      "op": "assert",
      "stack_out": []
    },
    "2288": {
      "op": "bytec 23 // \"suspiciousActivityThreshold\"",
      "defined_out": [
        "\"suspiciousActivityThreshold\""
      ],
      "stack_out": [
        "\"suspiciousActivityThreshold\""
      ]
    },
    "2290": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"suspiciousActivityThreshold\"",
        "suspiciousThreshold#0 (copy)"
      ],
      "stack_out": [
        "\"suspiciousActivityThreshold\"",
        "suspiciousThreshold#0 (copy)"
      ]
    },
    "2292": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2293": {
      "op": "bytec 24 // \"failedTransactionThreshold\"",
      "defined_out": [
        "\"failedTransactionThreshold\""
      ],
      "stack_out": [
        "\"failedTransactionThreshold\""
      ]
    },
    "2295": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"failedTransactionThreshold\"",
        "failedTxThreshold#0 (copy)"
      ],
      "stack_out": [
        "\"failedTransactionThreshold\"",
        "failedTxThreshold#0 (copy)"
      ]
    },
    "2297": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2298": {
      "op": "bytec 13 // \"largeWithdrawalThreshold\"",
      "defined_out": [
        "\"largeWithdrawalThreshold\""
      ],
      "stack_out": [
        "\"largeWithdrawalThreshold\""
      ]
    },
    "2300": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"largeWithdrawalThreshold\"",
        "largeWithdrawalThreshold#0 (copy)"
      ],
      "stack_out": [
        "\"largeWithdrawalThreshold\"",
        "largeWithdrawalThreshold#0 (copy)"
      ]
    },
    "2302": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2303": {
      "op": "bytec 8 // \"maxDailyVolume\"",
      "defined_out": [
        "\"maxDailyVolume\""
      ],
      "stack_out": [
        "\"maxDailyVolume\""
      ]
    },
    "2305": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"maxDailyVolume\"",
        "maxDailyVolume#0 (copy)"
      ],
      "stack_out": [
        "\"maxDailyVolume\"",
        "maxDailyVolume#0 (copy)"
      ]
    },
    "2307": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2308": {
      "retsub": true,
      "op": "retsub"
    },
    "2309": {
      "subroutine": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.isOperationAllowed",
      "params": {
        "operationType#0": "bytes"
      },
      "block": "isOperationAllowed",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2312": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "level#0"
      ]
    },
    "2314": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "level#0",
        "0"
      ]
    },
    "2315": {
      "op": "bytec_0 // \"emergencyActive\"",
      "defined_out": [
        "\"emergencyActive\"",
        "0"
      ],
      "stack_out": [
        "level#0",
        "0",
        "\"emergencyActive\""
      ]
    },
    "2316": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "level#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2317": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "level#0",
        "maybe_value%0#0"
      ]
    },
    "2318": {
      "op": "bnz isOperationAllowed_after_if_else@2",
      "stack_out": [
        "level#0"
      ]
    },
    "2321": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "level#0",
        "1"
      ]
    },
    "2322": {
      "op": "swap"
    },
    "2323": {
      "retsub": true,
      "op": "retsub"
    },
    "2324": {
      "block": "isOperationAllowed_after_if_else@2",
      "stack_in": [
        "level#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "level#0",
        "0"
      ]
    },
    "2325": {
      "op": "bytec_2 // \"currentEmergencyLevel\"",
      "defined_out": [
        "\"currentEmergencyLevel\"",
        "0"
      ],
      "stack_out": [
        "level#0",
        "0",
        "\"currentEmergencyLevel\""
      ]
    },
    "2326": {
      "op": "app_global_get_ex",
      "defined_out": [
        "level#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "level#0",
        "level#0",
        "maybe_exists%1#0"
      ]
    },
    "2327": {
      "op": "swap",
      "stack_out": [
        "level#0",
        "maybe_exists%1#0",
        "level#0"
      ]
    },
    "2328": {
      "op": "dup",
      "stack_out": [
        "level#0",
        "maybe_exists%1#0",
        "level#0",
        "level#0 (copy)"
      ]
    },
    "2329": {
      "op": "cover 2",
      "stack_out": [
        "level#0",
        "level#0",
        "maybe_exists%1#0",
        "level#0"
      ]
    },
    "2331": {
      "op": "frame_bury 0",
      "defined_out": [
        "level#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "level#0",
        "level#0",
        "maybe_exists%1#0"
      ]
    },
    "2333": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "level#0",
        "level#0"
      ]
    },
    "2334": {
      "op": "intc_3 // 4",
      "defined_out": [
        "4",
        "level#0"
      ],
      "stack_out": [
        "level#0",
        "level#0",
        "4"
      ]
    },
    "2335": {
      "op": "==",
      "defined_out": [
        "level#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "level#0",
        "tmp%0#0"
      ]
    },
    "2336": {
      "op": "bz isOperationAllowed_after_if_else@8",
      "stack_out": [
        "level#0"
      ]
    },
    "2339": {
      "op": "frame_dig -1",
      "defined_out": [
        "level#0",
        "operationType#0 (copy)"
      ],
      "stack_out": [
        "level#0",
        "operationType#0 (copy)"
      ]
    },
    "2341": {
      "op": "bytec 18 // \"emergency\"",
      "defined_out": [
        "\"emergency\"",
        "level#0",
        "operationType#0 (copy)"
      ],
      "stack_out": [
        "level#0",
        "operationType#0 (copy)",
        "\"emergency\""
      ]
    },
    "2343": {
      "op": "==",
      "defined_out": [
        "level#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "level#0",
        "tmp%1#0"
      ]
    },
    "2344": {
      "op": "bnz isOperationAllowed_bool_true@5",
      "stack_out": [
        "level#0"
      ]
    },
    "2347": {
      "op": "frame_dig -1",
      "stack_out": [
        "level#0",
        "operationType#0 (copy)"
      ]
    },
    "2349": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "level#0",
        "operationType#0 (copy)"
      ],
      "stack_out": [
        "level#0",
        "operationType#0 (copy)",
        "\"admin\""
      ]
    },
    "2350": {
      "op": "==",
      "defined_out": [
        "level#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "level#0",
        "tmp%2#0"
      ]
    },
    "2351": {
      "op": "bz isOperationAllowed_bool_false@6",
      "stack_out": [
        "level#0"
      ]
    },
    "2354": {
      "block": "isOperationAllowed_bool_true@5",
      "stack_in": [
        "level#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "level#0",
        "or_result%0#0"
      ]
    },
    "2355": {
      "block": "isOperationAllowed_bool_merge@7",
      "stack_in": [
        "level#0",
        "or_result%0#0"
      ],
      "op": "swap",
      "defined_out": [
        "or_result%0#0"
      ]
    },
    "2356": {
      "retsub": true,
      "op": "retsub"
    },
    "2357": {
      "block": "isOperationAllowed_bool_false@6",
      "stack_in": [
        "level#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "level#0",
        "or_result%0#0"
      ]
    },
    "2358": {
      "op": "b isOperationAllowed_bool_merge@7"
    },
    "2361": {
      "block": "isOperationAllowed_after_if_else@8",
      "stack_in": [
        "level#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "level#0"
      ],
      "stack_out": [
        "level#0",
        "level#0"
      ]
    },
    "2363": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "level#0"
      ],
      "stack_out": [
        "level#0",
        "level#0",
        "3"
      ]
    },
    "2365": {
      "op": "==",
      "defined_out": [
        "level#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "level#0",
        "tmp%3#0"
      ]
    },
    "2366": {
      "op": "bz isOperationAllowed_after_if_else@15",
      "stack_out": [
        "level#0"
      ]
    },
    "2369": {
      "op": "frame_dig -1",
      "defined_out": [
        "level#0",
        "operationType#0 (copy)"
      ],
      "stack_out": [
        "level#0",
        "operationType#0 (copy)"
      ]
    },
    "2371": {
      "op": "bytec 18 // \"emergency\"",
      "defined_out": [
        "\"emergency\"",
        "level#0",
        "operationType#0 (copy)"
      ],
      "stack_out": [
        "level#0",
        "operationType#0 (copy)",
        "\"emergency\""
      ]
    },
    "2373": {
      "op": "==",
      "defined_out": [
        "level#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "level#0",
        "tmp%4#0"
      ]
    },
    "2374": {
      "op": "bnz isOperationAllowed_bool_true@12",
      "stack_out": [
        "level#0"
      ]
    },
    "2377": {
      "op": "frame_dig -1",
      "stack_out": [
        "level#0",
        "operationType#0 (copy)"
      ]
    },
    "2379": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "level#0",
        "operationType#0 (copy)"
      ],
      "stack_out": [
        "level#0",
        "operationType#0 (copy)",
        "\"admin\""
      ]
    },
    "2380": {
      "op": "==",
      "defined_out": [
        "level#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "level#0",
        "tmp%5#0"
      ]
    },
    "2381": {
      "op": "bnz isOperationAllowed_bool_true@12",
      "stack_out": [
        "level#0"
      ]
    },
    "2384": {
      "op": "frame_dig -1",
      "stack_out": [
        "level#0",
        "operationType#0 (copy)"
      ]
    },
    "2386": {
      "op": "bytec 27 // \"view\"",
      "defined_out": [
        "\"view\"",
        "level#0",
        "operationType#0 (copy)"
      ],
      "stack_out": [
        "level#0",
        "operationType#0 (copy)",
        "\"view\""
      ]
    },
    "2388": {
      "op": "==",
      "defined_out": [
        "level#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "level#0",
        "tmp%6#0"
      ]
    },
    "2389": {
      "op": "bz isOperationAllowed_bool_false@13",
      "stack_out": [
        "level#0"
      ]
    },
    "2392": {
      "block": "isOperationAllowed_bool_true@12",
      "stack_in": [
        "level#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%1#0"
      ],
      "stack_out": [
        "level#0",
        "or_result%1#0"
      ]
    },
    "2393": {
      "block": "isOperationAllowed_bool_merge@14",
      "stack_in": [
        "level#0",
        "or_result%1#0"
      ],
      "op": "swap",
      "defined_out": [
        "or_result%1#0"
      ]
    },
    "2394": {
      "retsub": true,
      "op": "retsub"
    },
    "2395": {
      "block": "isOperationAllowed_bool_false@13",
      "stack_in": [
        "level#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%1#0"
      ],
      "stack_out": [
        "level#0",
        "or_result%1#0"
      ]
    },
    "2396": {
      "op": "b isOperationAllowed_bool_merge@14"
    },
    "2399": {
      "block": "isOperationAllowed_after_if_else@15",
      "stack_in": [
        "level#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "level#0"
      ],
      "stack_out": [
        "level#0",
        "level#0"
      ]
    },
    "2401": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "level#0"
      ],
      "stack_out": [
        "level#0",
        "level#0",
        "2"
      ]
    },
    "2402": {
      "op": "==",
      "defined_out": [
        "level#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "level#0",
        "tmp%7#0"
      ]
    },
    "2403": {
      "op": "bz isOperationAllowed_after_if_else@23",
      "stack_out": [
        "level#0"
      ]
    },
    "2406": {
      "op": "frame_dig -1",
      "defined_out": [
        "level#0",
        "operationType#0 (copy)"
      ],
      "stack_out": [
        "level#0",
        "operationType#0 (copy)"
      ]
    },
    "2408": {
      "op": "pushbytes \"withdraw\"",
      "defined_out": [
        "\"withdraw\"",
        "level#0",
        "operationType#0 (copy)"
      ],
      "stack_out": [
        "level#0",
        "operationType#0 (copy)",
        "\"withdraw\""
      ]
    },
    "2418": {
      "op": "==",
      "defined_out": [
        "level#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "level#0",
        "tmp%8#0"
      ]
    },
    "2419": {
      "op": "bnz isOperationAllowed_bool_true@20",
      "stack_out": [
        "level#0"
      ]
    },
    "2422": {
      "op": "frame_dig -1",
      "stack_out": [
        "level#0",
        "operationType#0 (copy)"
      ]
    },
    "2424": {
      "op": "bytec 27 // \"view\"",
      "defined_out": [
        "\"view\"",
        "level#0",
        "operationType#0 (copy)"
      ],
      "stack_out": [
        "level#0",
        "operationType#0 (copy)",
        "\"view\""
      ]
    },
    "2426": {
      "op": "==",
      "defined_out": [
        "level#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "level#0",
        "tmp%9#0"
      ]
    },
    "2427": {
      "op": "bnz isOperationAllowed_bool_true@20",
      "stack_out": [
        "level#0"
      ]
    },
    "2430": {
      "op": "frame_dig -1",
      "stack_out": [
        "level#0",
        "operationType#0 (copy)"
      ]
    },
    "2432": {
      "op": "bytec 18 // \"emergency\"",
      "defined_out": [
        "\"emergency\"",
        "level#0",
        "operationType#0 (copy)"
      ],
      "stack_out": [
        "level#0",
        "operationType#0 (copy)",
        "\"emergency\""
      ]
    },
    "2434": {
      "op": "==",
      "defined_out": [
        "level#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "level#0",
        "tmp%10#0"
      ]
    },
    "2435": {
      "op": "bnz isOperationAllowed_bool_true@20",
      "stack_out": [
        "level#0"
      ]
    },
    "2438": {
      "op": "frame_dig -1",
      "stack_out": [
        "level#0",
        "operationType#0 (copy)"
      ]
    },
    "2440": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "level#0",
        "operationType#0 (copy)"
      ],
      "stack_out": [
        "level#0",
        "operationType#0 (copy)",
        "\"admin\""
      ]
    },
    "2441": {
      "op": "==",
      "defined_out": [
        "level#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "level#0",
        "tmp%11#0"
      ]
    },
    "2442": {
      "op": "bz isOperationAllowed_bool_false@21",
      "stack_out": [
        "level#0"
      ]
    },
    "2445": {
      "block": "isOperationAllowed_bool_true@20",
      "stack_in": [
        "level#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%2#0"
      ],
      "stack_out": [
        "level#0",
        "or_result%2#0"
      ]
    },
    "2446": {
      "block": "isOperationAllowed_bool_merge@22",
      "stack_in": [
        "level#0",
        "or_result%2#0"
      ],
      "op": "swap",
      "defined_out": [
        "or_result%2#0"
      ]
    },
    "2447": {
      "retsub": true,
      "op": "retsub"
    },
    "2448": {
      "block": "isOperationAllowed_bool_false@21",
      "stack_in": [
        "level#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%2#0"
      ],
      "stack_out": [
        "level#0",
        "or_result%2#0"
      ]
    },
    "2449": {
      "op": "b isOperationAllowed_bool_merge@22"
    },
    "2452": {
      "block": "isOperationAllowed_after_if_else@23",
      "stack_in": [
        "level#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "level#0"
      ],
      "stack_out": [
        "level#0",
        "level#0"
      ]
    },
    "2454": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "level#0"
      ],
      "stack_out": [
        "level#0",
        "level#0",
        "1"
      ]
    },
    "2455": {
      "op": "==",
      "defined_out": [
        "level#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "level#0",
        "tmp%12#0"
      ]
    },
    "2456": {
      "op": "bz isOperationAllowed_after_if_else@25",
      "stack_out": [
        "level#0"
      ]
    },
    "2459": {
      "op": "frame_dig -1",
      "defined_out": [
        "level#0",
        "operationType#0 (copy)"
      ],
      "stack_out": [
        "level#0",
        "operationType#0 (copy)"
      ]
    },
    "2461": {
      "op": "pushbytes \"deposit\"",
      "defined_out": [
        "\"deposit\"",
        "level#0",
        "operationType#0 (copy)"
      ],
      "stack_out": [
        "level#0",
        "operationType#0 (copy)",
        "\"deposit\""
      ]
    },
    "2470": {
      "op": "!=",
      "defined_out": [
        "level#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "level#0",
        "tmp%13#0"
      ]
    },
    "2471": {
      "op": "swap"
    },
    "2472": {
      "retsub": true,
      "op": "retsub"
    },
    "2473": {
      "block": "isOperationAllowed_after_if_else@25",
      "stack_in": [
        "level#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "level#0",
        "1"
      ]
    },
    "2474": {
      "op": "swap"
    },
    "2475": {
      "retsub": true,
      "op": "retsub"
    },
    "2476": {
      "subroutine": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.isAuthorizedOperator",
      "params": {
        "operator#0": "bytes"
      },
      "block": "isAuthorizedOperator",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2479": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2480": {
      "op": "bytec_1 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"admin\""
      ]
    },
    "2481": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2482": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2483": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "operator#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "operator#0 (copy)"
      ]
    },
    "2485": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2486": {
      "retsub": true,
      "op": "retsub"
    },
    "2487": {
      "subroutine": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.getEmergencyEvent",
      "params": {
        "eventId#0": "uint64"
      },
      "block": "getEmergencyEvent",
      "stack_in": [],
      "op": "proto 1 7"
    },
    "2490": {
      "op": "frame_dig -1",
      "defined_out": [
        "eventId#0 (copy)"
      ],
      "stack_out": [
        "eventId#0 (copy)"
      ]
    },
    "2492": {
      "op": "itob",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "2493": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "2494": {
      "op": "bytec 14 // \"_level\"",
      "defined_out": [
        "\"_level\"",
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)",
        "\"_level\""
      ]
    },
    "2496": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "levelKey#0"
      ],
      "stack_out": [
        "a#0",
        "levelKey#0"
      ]
    },
    "2497": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "levelKey#0",
        "a#0 (copy)"
      ]
    },
    "2499": {
      "op": "bytec 25 // \"_reason\"",
      "defined_out": [
        "\"_reason\"",
        "a#0",
        "a#0 (copy)",
        "levelKey#0"
      ],
      "stack_out": [
        "a#0",
        "levelKey#0",
        "a#0 (copy)",
        "\"_reason\""
      ]
    },
    "2501": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "levelKey#0",
        "reasonKey#0"
      ],
      "stack_out": [
        "a#0",
        "levelKey#0",
        "reasonKey#0"
      ]
    },
    "2502": {
      "op": "dig 2",
      "stack_out": [
        "a#0",
        "levelKey#0",
        "reasonKey#0",
        "a#0 (copy)"
      ]
    },
    "2504": {
      "op": "bytec 26 // \"_triggeredBy\"",
      "defined_out": [
        "\"_triggeredBy\"",
        "a#0",
        "a#0 (copy)",
        "levelKey#0",
        "reasonKey#0"
      ],
      "stack_out": [
        "a#0",
        "levelKey#0",
        "reasonKey#0",
        "a#0 (copy)",
        "\"_triggeredBy\""
      ]
    },
    "2506": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "levelKey#0",
        "reasonKey#0",
        "triggeredByKey#0"
      ],
      "stack_out": [
        "a#0",
        "levelKey#0",
        "reasonKey#0",
        "triggeredByKey#0"
      ]
    },
    "2507": {
      "op": "dig 3",
      "stack_out": [
        "a#0",
        "levelKey#0",
        "reasonKey#0",
        "triggeredByKey#0",
        "a#0 (copy)"
      ]
    },
    "2509": {
      "op": "bytec 11 // \"_timestamp\"",
      "defined_out": [
        "\"_timestamp\"",
        "a#0",
        "a#0 (copy)",
        "levelKey#0",
        "reasonKey#0",
        "triggeredByKey#0"
      ],
      "stack_out": [
        "a#0",
        "levelKey#0",
        "reasonKey#0",
        "triggeredByKey#0",
        "a#0 (copy)",
        "\"_timestamp\""
      ]
    },
    "2511": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "levelKey#0",
        "reasonKey#0",
        "timestampKey#0",
        "triggeredByKey#0"
      ],
      "stack_out": [
        "a#0",
        "levelKey#0",
        "reasonKey#0",
        "triggeredByKey#0",
        "timestampKey#0"
      ]
    },
    "2512": {
      "op": "dig 4",
      "stack_out": [
        "a#0",
        "levelKey#0",
        "reasonKey#0",
        "triggeredByKey#0",
        "timestampKey#0",
        "a#0 (copy)"
      ]
    },
    "2514": {
      "op": "bytec 15 // \"_resolved\"",
      "defined_out": [
        "\"_resolved\"",
        "a#0",
        "a#0 (copy)",
        "levelKey#0",
        "reasonKey#0",
        "timestampKey#0",
        "triggeredByKey#0"
      ],
      "stack_out": [
        "a#0",
        "levelKey#0",
        "reasonKey#0",
        "triggeredByKey#0",
        "timestampKey#0",
        "a#0 (copy)",
        "\"_resolved\""
      ]
    },
    "2516": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "levelKey#0",
        "reasonKey#0",
        "resolvedKey#0",
        "timestampKey#0",
        "triggeredByKey#0"
      ],
      "stack_out": [
        "a#0",
        "levelKey#0",
        "reasonKey#0",
        "triggeredByKey#0",
        "timestampKey#0",
        "resolvedKey#0"
      ]
    },
    "2517": {
      "op": "dig 5",
      "stack_out": [
        "a#0",
        "levelKey#0",
        "reasonKey#0",
        "triggeredByKey#0",
        "timestampKey#0",
        "resolvedKey#0",
        "a#0 (copy)"
      ]
    },
    "2519": {
      "op": "bytec 16 // \"_resolvedAt\"",
      "defined_out": [
        "\"_resolvedAt\"",
        "a#0",
        "a#0 (copy)",
        "levelKey#0",
        "reasonKey#0",
        "resolvedKey#0",
        "timestampKey#0",
        "triggeredByKey#0"
      ],
      "stack_out": [
        "a#0",
        "levelKey#0",
        "reasonKey#0",
        "triggeredByKey#0",
        "timestampKey#0",
        "resolvedKey#0",
        "a#0 (copy)",
        "\"_resolvedAt\""
      ]
    },
    "2521": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "levelKey#0",
        "reasonKey#0",
        "resolvedAtKey#0",
        "resolvedKey#0",
        "timestampKey#0",
        "triggeredByKey#0"
      ],
      "stack_out": [
        "a#0",
        "levelKey#0",
        "reasonKey#0",
        "triggeredByKey#0",
        "timestampKey#0",
        "resolvedKey#0",
        "resolvedAtKey#0"
      ]
    },
    "2522": {
      "op": "uncover 6",
      "stack_out": [
        "levelKey#0",
        "reasonKey#0",
        "triggeredByKey#0",
        "timestampKey#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "a#0"
      ]
    },
    "2524": {
      "op": "bytec 17 // \"_resolvedBy\"",
      "defined_out": [
        "\"_resolvedBy\"",
        "a#0",
        "levelKey#0",
        "reasonKey#0",
        "resolvedAtKey#0",
        "resolvedKey#0",
        "timestampKey#0",
        "triggeredByKey#0"
      ],
      "stack_out": [
        "levelKey#0",
        "reasonKey#0",
        "triggeredByKey#0",
        "timestampKey#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "a#0",
        "\"_resolvedBy\""
      ]
    },
    "2526": {
      "op": "concat",
      "defined_out": [
        "levelKey#0",
        "reasonKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0",
        "timestampKey#0",
        "triggeredByKey#0"
      ],
      "stack_out": [
        "levelKey#0",
        "reasonKey#0",
        "triggeredByKey#0",
        "timestampKey#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0"
      ]
    },
    "2527": {
      "op": "uncover 6",
      "stack_out": [
        "reasonKey#0",
        "triggeredByKey#0",
        "timestampKey#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "levelKey#0"
      ]
    },
    "2529": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "reasonKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0",
        "timestampKey#0",
        "triggeredByKey#0"
      ],
      "stack_out": [
        "reasonKey#0",
        "triggeredByKey#0",
        "timestampKey#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2530": {
      "op": "swap",
      "stack_out": [
        "reasonKey#0",
        "triggeredByKey#0",
        "timestampKey#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "2531": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0",
        "reasonKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0",
        "timestampKey#0",
        "triggeredByKey#0"
      ],
      "stack_out": [
        "reasonKey#0",
        "triggeredByKey#0",
        "timestampKey#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "2532": {
      "op": "swap",
      "stack_out": [
        "reasonKey#0",
        "triggeredByKey#0",
        "timestampKey#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2533": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "reasonKey#0",
        "triggeredByKey#0",
        "timestampKey#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0"
      ]
    },
    "2534": {
      "op": "uncover 6",
      "stack_out": [
        "triggeredByKey#0",
        "timestampKey#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "reasonKey#0"
      ]
    },
    "2536": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "maybe_value_converted%0#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0",
        "timestampKey#0",
        "triggeredByKey#0"
      ],
      "stack_out": [
        "triggeredByKey#0",
        "timestampKey#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2537": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "triggeredByKey#0",
        "timestampKey#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0"
      ]
    },
    "2538": {
      "op": "uncover 6",
      "stack_out": [
        "timestampKey#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "triggeredByKey#0"
      ]
    },
    "2540": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0",
        "timestampKey#0"
      ],
      "stack_out": [
        "timestampKey#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2541": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "timestampKey#0",
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "2542": {
      "op": "uncover 6",
      "stack_out": [
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "timestampKey#0"
      ]
    },
    "2544": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value_converted%0#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0"
      ],
      "stack_out": [
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2545": {
      "op": "swap",
      "stack_out": [
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "2546": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "resolvedKey#0"
      ],
      "stack_out": [
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%3#0",
        "maybe_value_converted%1#0"
      ]
    },
    "2547": {
      "op": "swap",
      "stack_out": [
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%1#0",
        "maybe_exists%3#0"
      ]
    },
    "2548": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "resolvedKey#0",
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%1#0"
      ]
    },
    "2549": {
      "op": "uncover 6",
      "stack_out": [
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%1#0",
        "resolvedKey#0"
      ]
    },
    "2551": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "resolvedAtKey#0",
        "resolvedByKey#0"
      ],
      "stack_out": [
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%1#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2552": {
      "op": "swap",
      "stack_out": [
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%1#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ]
    },
    "2553": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "resolvedAtKey#0",
        "resolvedByKey#0"
      ],
      "stack_out": [
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%1#0",
        "maybe_exists%4#0",
        "maybe_value_converted%2#0"
      ]
    },
    "2554": {
      "op": "swap",
      "stack_out": [
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_exists%4#0"
      ]
    },
    "2555": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "resolvedAtKey#0",
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0"
      ]
    },
    "2556": {
      "op": "uncover 6",
      "stack_out": [
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "resolvedAtKey#0"
      ]
    },
    "2558": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "resolvedByKey#0"
      ],
      "stack_out": [
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2559": {
      "op": "swap",
      "stack_out": [
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ]
    },
    "2560": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "resolvedByKey#0"
      ],
      "stack_out": [
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_exists%5#0",
        "maybe_value_converted%3#0"
      ]
    },
    "2561": {
      "op": "swap",
      "stack_out": [
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_exists%5#0"
      ]
    },
    "2562": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "resolvedByKey#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0"
      ]
    },
    "2563": {
      "op": "uncover 6",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "resolvedByKey#0"
      ]
    },
    "2565": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%6#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2566": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value%6#0"
      ]
    },
    "2567": {
      "retsub": true,
      "op": "retsub"
    },
    "2568": {
      "subroutine": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.getCurrentEmergencyStatus",
      "params": {},
      "block": "getCurrentEmergencyStatus",
      "stack_in": [],
      "op": "proto 0 5"
    },
    "2571": {
      "op": "intc_0 // 0"
    },
    "2572": {
      "op": "dup"
    },
    "2573": {
      "op": "bytec_0 // \"emergencyActive\"",
      "defined_out": [
        "\"emergencyActive\"",
        "0",
        "duration#0"
      ],
      "stack_out": [
        "duration#0",
        "0",
        "\"emergencyActive\""
      ]
    },
    "2574": {
      "op": "app_global_get_ex",
      "defined_out": [
        "duration#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "duration#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2575": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "duration#0",
        "maybe_value%0#0"
      ]
    },
    "2576": {
      "op": "bz getCurrentEmergencyStatus_after_if_else@2",
      "stack_out": [
        "duration#0"
      ]
    },
    "2579": {
      "op": "intc_0 // 0",
      "stack_out": [
        "duration#0",
        "0"
      ]
    },
    "2580": {
      "op": "bytec_3 // \"emergencyCount\"",
      "defined_out": [
        "\"emergencyCount\"",
        "0",
        "duration#0"
      ],
      "stack_out": [
        "duration#0",
        "0",
        "\"emergencyCount\""
      ]
    },
    "2581": {
      "op": "app_global_get_ex",
      "defined_out": [
        "duration#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "duration#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2582": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "duration#0",
        "maybe_value%1#0"
      ]
    },
    "2583": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "duration#0"
      ],
      "stack_out": [
        "duration#0",
        "a#0"
      ]
    },
    "2584": {
      "op": "bytec 11 // \"_timestamp\"",
      "defined_out": [
        "\"_timestamp\"",
        "a#0",
        "duration#0"
      ],
      "stack_out": [
        "duration#0",
        "a#0",
        "\"_timestamp\""
      ]
    },
    "2586": {
      "op": "concat",
      "defined_out": [
        "duration#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "duration#0",
        "tmp%0#1"
      ]
    },
    "2587": {
      "op": "box_get",
      "defined_out": [
        "duration#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "duration#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2588": {
      "op": "swap",
      "stack_out": [
        "duration#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "2589": {
      "op": "btoi",
      "defined_out": [
        "currentEventTimestamp#0",
        "duration#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "duration#0",
        "maybe_exists%2#0",
        "currentEventTimestamp#0"
      ]
    },
    "2590": {
      "op": "swap",
      "stack_out": [
        "duration#0",
        "currentEventTimestamp#0",
        "maybe_exists%2#0"
      ]
    },
    "2591": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "duration#0",
        "currentEventTimestamp#0"
      ]
    },
    "2592": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "currentEventTimestamp#0",
        "duration#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "duration#0",
        "currentEventTimestamp#0",
        "tmp%2#0"
      ]
    },
    "2594": {
      "op": "swap",
      "stack_out": [
        "duration#0",
        "tmp%2#0",
        "currentEventTimestamp#0"
      ]
    },
    "2595": {
      "op": "-",
      "stack_out": [
        "duration#0",
        "duration#0"
      ]
    },
    "2596": {
      "op": "frame_bury 0",
      "stack_out": [
        "duration#0"
      ]
    },
    "2598": {
      "block": "getCurrentEmergencyStatus_after_if_else@2",
      "stack_in": [
        "duration#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "duration#0",
        "0"
      ]
    },
    "2599": {
      "op": "bytec_0 // \"emergencyActive\"",
      "defined_out": [
        "\"emergencyActive\"",
        "0"
      ],
      "stack_out": [
        "duration#0",
        "0",
        "\"emergencyActive\""
      ]
    },
    "2600": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "duration#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2601": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "duration#0",
        "maybe_value%3#0"
      ]
    },
    "2602": {
      "op": "intc_0 // 0",
      "stack_out": [
        "duration#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "2603": {
      "op": "bytec_2 // \"currentEmergencyLevel\"",
      "defined_out": [
        "\"currentEmergencyLevel\"",
        "0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "duration#0",
        "maybe_value%3#0",
        "0",
        "\"currentEmergencyLevel\""
      ]
    },
    "2604": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "duration#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2605": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "duration#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "2606": {
      "op": "intc_0 // 0",
      "stack_out": [
        "duration#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "2607": {
      "op": "bytec_3 // \"emergencyCount\"",
      "defined_out": [
        "\"emergencyCount\"",
        "0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "duration#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0",
        "\"emergencyCount\""
      ]
    },
    "2608": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "duration#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2609": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "duration#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "2610": {
      "op": "intc_0 // 0",
      "stack_out": [
        "duration#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0"
      ]
    },
    "2611": {
      "op": "bytec 4 // \"recoveryMode\"",
      "defined_out": [
        "\"recoveryMode\"",
        "0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "duration#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0",
        "\"recoveryMode\""
      ]
    },
    "2613": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "duration#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2614": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "duration#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "2615": {
      "op": "cover 3",
      "stack_out": [
        "duration#0",
        "maybe_value%6#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "2617": {
      "op": "frame_dig 0",
      "defined_out": [
        "duration#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "duration#0",
        "maybe_value%6#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "duration#0"
      ]
    },
    "2619": {
      "op": "uncover 4",
      "stack_out": [
        "duration#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "duration#0",
        "maybe_value%6#0"
      ]
    },
    "2621": {
      "op": "uncover 5"
    },
    "2623": {
      "retsub": true,
      "op": "retsub"
    },
    "2624": {
      "subroutine": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.getCircuitBreakerStatus",
      "params": {},
      "block": "getCircuitBreakerStatus",
      "stack_in": [],
      "op": "proto 0 4"
    },
    "2627": {
      "op": "intc_0 // 0"
    },
    "2628": {
      "op": "dup"
    },
    "2629": {
      "op": "bytec 8 // \"maxDailyVolume\"",
      "defined_out": [
        "\"maxDailyVolume\"",
        "0",
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0",
        "0",
        "\"maxDailyVolume\""
      ]
    },
    "2631": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2632": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remaining#0",
        "maybe_value%0#0"
      ]
    },
    "2633": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remaining#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "2634": {
      "op": "bytec 7 // \"currentDailyVolume\"",
      "defined_out": [
        "\"currentDailyVolume\"",
        "0",
        "maybe_value%0#0",
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0",
        "maybe_value%0#0",
        "0",
        "\"currentDailyVolume\""
      ]
    },
    "2636": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2637": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remaining#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "2638": {
      "op": ">",
      "defined_out": [
        "remaining#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "remaining#0",
        "tmp%0#0"
      ]
    },
    "2639": {
      "op": "bz getCircuitBreakerStatus_after_if_else@2",
      "stack_out": [
        "remaining#0"
      ]
    },
    "2642": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remaining#0",
        "0"
      ]
    },
    "2643": {
      "op": "bytec 8 // \"maxDailyVolume\"",
      "stack_out": [
        "remaining#0",
        "0",
        "\"maxDailyVolume\""
      ]
    },
    "2645": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2646": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remaining#0",
        "maybe_value%2#0"
      ]
    },
    "2647": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remaining#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "2648": {
      "op": "bytec 7 // \"currentDailyVolume\"",
      "stack_out": [
        "remaining#0",
        "maybe_value%2#0",
        "0",
        "\"currentDailyVolume\""
      ]
    },
    "2650": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2651": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remaining#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "2652": {
      "op": "-",
      "stack_out": [
        "remaining#0",
        "remaining#0"
      ]
    },
    "2653": {
      "op": "frame_bury 0",
      "stack_out": [
        "remaining#0"
      ]
    },
    "2655": {
      "block": "getCircuitBreakerStatus_after_if_else@2",
      "stack_in": [
        "remaining#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "remaining#0",
        "0"
      ]
    },
    "2656": {
      "op": "bytec 7 // \"currentDailyVolume\"",
      "defined_out": [
        "\"currentDailyVolume\"",
        "0"
      ],
      "stack_out": [
        "remaining#0",
        "0",
        "\"currentDailyVolume\""
      ]
    },
    "2658": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "remaining#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2659": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remaining#0",
        "maybe_value%4#0"
      ]
    },
    "2660": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remaining#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "2661": {
      "op": "bytec 8 // \"maxDailyVolume\"",
      "defined_out": [
        "\"maxDailyVolume\"",
        "0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "remaining#0",
        "maybe_value%4#0",
        "0",
        "\"maxDailyVolume\""
      ]
    },
    "2663": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "remaining#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2664": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remaining#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "2665": {
      "op": "intc_0 // 0",
      "stack_out": [
        "remaining#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0"
      ]
    },
    "2666": {
      "op": "bytec 10 // \"lastVolumeReset\"",
      "defined_out": [
        "\"lastVolumeReset\"",
        "0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "remaining#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0",
        "\"lastVolumeReset\""
      ]
    },
    "2668": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "remaining#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2669": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "remaining#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "2670": {
      "op": "cover 2",
      "stack_out": [
        "remaining#0",
        "maybe_value%6#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "2672": {
      "op": "frame_dig 0",
      "defined_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "remaining#0"
      ],
      "stack_out": [
        "remaining#0",
        "maybe_value%6#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "remaining#0"
      ]
    },
    "2674": {
      "op": "uncover 3",
      "stack_out": [
        "remaining#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "remaining#0",
        "maybe_value%6#0"
      ]
    },
    "2676": {
      "op": "uncover 4"
    },
    "2678": {
      "retsub": true,
      "op": "retsub"
    },
    "2679": {
      "subroutine": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.getEmergencyHistory",
      "params": {
        "limit#0": "uint64"
      },
      "block": "getEmergencyHistory",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2682": {
      "op": "intc_0 // 0",
      "stack_out": [
        "events#9"
      ]
    },
    "2683": {
      "op": "pushbytess \"\" 0x0000 // \"\", 0x0000",
      "stack_out": [
        "events#9",
        "count#9"
      ]
    },
    "2689": {
      "op": "intc_0 // 0"
    },
    "2690": {
      "op": "dup"
    },
    "2691": {
      "op": "bytec_3 // \"emergencyCount\"",
      "defined_out": [
        "\"emergencyCount\"",
        "0",
        "count#0",
        "events#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "0",
        "\"emergencyCount\""
      ]
    },
    "2692": {
      "op": "app_global_get_ex",
      "defined_out": [
        "count#0",
        "events#0",
        "i#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "maybe_exists%0#0"
      ]
    },
    "2693": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0"
      ]
    },
    "2694": {
      "block": "getEmergencyHistory_while_top@1",
      "stack_in": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "i#0"
      ]
    },
    "2696": {
      "op": "bz getEmergencyHistory_after_while@6",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0"
      ]
    },
    "2699": {
      "op": "frame_dig 3",
      "defined_out": [
        "count#0",
        "i#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "count#0"
      ]
    },
    "2701": {
      "op": "frame_dig -1",
      "defined_out": [
        "count#0",
        "i#0",
        "limit#0 (copy)"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "count#0",
        "limit#0 (copy)"
      ]
    },
    "2703": {
      "op": "<",
      "defined_out": [
        "count#0",
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "2704": {
      "op": "bz getEmergencyHistory_after_while@6",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0"
      ]
    },
    "2707": {
      "op": "frame_dig 4",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "i#0"
      ]
    },
    "2709": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "count#0",
        "i#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "a#0"
      ]
    },
    "2710": {
      "op": "bytec 14 // \"_level\"",
      "defined_out": [
        "\"_level\"",
        "a#0",
        "count#0",
        "i#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "a#0",
        "\"_level\""
      ]
    },
    "2712": {
      "op": "concat",
      "defined_out": [
        "count#0",
        "i#0",
        "levelKey#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "levelKey#0"
      ]
    },
    "2713": {
      "op": "box_len",
      "defined_out": [
        "count#0",
        "i#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2714": {
      "op": "bury 1",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "maybe_exists%1#0"
      ]
    },
    "2716": {
      "op": "frame_dig 2",
      "defined_out": [
        "count#0",
        "events#9",
        "i#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "maybe_exists%1#0",
        "events#9"
      ]
    },
    "2718": {
      "op": "frame_bury 0",
      "defined_out": [
        "count#0",
        "events#9",
        "i#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "maybe_exists%1#0"
      ]
    },
    "2720": {
      "op": "frame_dig 3",
      "defined_out": [
        "count#0",
        "count#9",
        "events#9",
        "i#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "maybe_exists%1#0",
        "count#9"
      ]
    },
    "2722": {
      "op": "frame_bury 1",
      "defined_out": [
        "count#0",
        "count#9",
        "events#9",
        "i#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "maybe_exists%1#0"
      ]
    },
    "2724": {
      "op": "bz getEmergencyHistory_after_if_else@5",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0"
      ]
    },
    "2727": {
      "op": "frame_dig 4",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "i#0"
      ]
    },
    "2729": {
      "callsub": "smart_contracts/security/emergency_pause.algo.ts::EmergencyPause.getEmergencyEvent",
      "op": "callsub getEmergencyEvent",
      "defined_out": [
        "count#0",
        "count#9",
        "event.level#0",
        "event.reason#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "event.timestamp#0",
        "event.triggeredBy#0",
        "events#9",
        "i#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.level#0",
        "event.reason#0",
        "event.triggeredBy#0",
        "event.timestamp#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0"
      ]
    },
    "2732": {
      "op": "uncover 6",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.reason#0",
        "event.triggeredBy#0",
        "event.timestamp#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "event.level#0"
      ]
    },
    "2734": {
      "op": "itob",
      "defined_out": [
        "count#0",
        "count#9",
        "event.reason#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "event.timestamp#0",
        "event.triggeredBy#0",
        "events#9",
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.reason#0",
        "event.triggeredBy#0",
        "event.timestamp#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0"
      ]
    },
    "2735": {
      "op": "dig 6",
      "defined_out": [
        "count#0",
        "count#9",
        "event.reason#0",
        "event.reason#0 (copy)",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "event.timestamp#0",
        "event.triggeredBy#0",
        "events#9",
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.reason#0",
        "event.triggeredBy#0",
        "event.timestamp#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "event.reason#0 (copy)"
      ]
    },
    "2737": {
      "op": "len",
      "defined_out": [
        "count#0",
        "count#9",
        "event.reason#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "event.timestamp#0",
        "event.triggeredBy#0",
        "events#9",
        "i#0",
        "length%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.reason#0",
        "event.triggeredBy#0",
        "event.timestamp#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "length%0#0"
      ]
    },
    "2738": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "count#0",
        "count#9",
        "event.reason#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "event.timestamp#0",
        "event.triggeredBy#0",
        "events#9",
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.reason#0",
        "event.triggeredBy#0",
        "event.timestamp#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "as_bytes%0#0"
      ]
    },
    "2739": {
      "op": "extract 6 2",
      "defined_out": [
        "count#0",
        "count#9",
        "event.reason#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "event.timestamp#0",
        "event.triggeredBy#0",
        "events#9",
        "i#0",
        "length_uint16%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.reason#0",
        "event.triggeredBy#0",
        "event.timestamp#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "length_uint16%0#0"
      ]
    },
    "2742": {
      "op": "uncover 7",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.triggeredBy#0",
        "event.timestamp#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "length_uint16%0#0",
        "event.reason#0"
      ]
    },
    "2744": {
      "op": "concat",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_value%0#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "event.timestamp#0",
        "event.triggeredBy#0",
        "events#9",
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.triggeredBy#0",
        "event.timestamp#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0"
      ]
    },
    "2745": {
      "op": "dig 6",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_value%0#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "event.timestamp#0",
        "event.triggeredBy#0",
        "event.triggeredBy#0 (copy)",
        "events#9",
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.triggeredBy#0",
        "event.timestamp#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "event.triggeredBy#0 (copy)"
      ]
    },
    "2747": {
      "op": "len",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_value%0#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "event.timestamp#0",
        "event.triggeredBy#0",
        "events#9",
        "i#0",
        "length%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.triggeredBy#0",
        "event.timestamp#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "2748": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "count#0",
        "count#9",
        "encoded_value%0#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "event.timestamp#0",
        "event.triggeredBy#0",
        "events#9",
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.triggeredBy#0",
        "event.timestamp#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "2749": {
      "op": "extract 6 2",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_value%0#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "event.timestamp#0",
        "event.triggeredBy#0",
        "events#9",
        "i#0",
        "length_uint16%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.triggeredBy#0",
        "event.timestamp#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "2752": {
      "op": "uncover 7",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.timestamp#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "event.triggeredBy#0"
      ]
    },
    "2754": {
      "op": "concat",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "event.timestamp#0",
        "events#9",
        "i#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.timestamp#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "2755": {
      "op": "uncover 6",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "event.timestamp#0"
      ]
    },
    "2757": {
      "op": "itob",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "events#9",
        "i#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.resolved#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "2758": {
      "op": "uncover 6",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "event.resolved#0"
      ]
    },
    "2760": {
      "op": "itob",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "events#9",
        "i#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.resolvedAt#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "2761": {
      "op": "uncover 6",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "event.resolvedAt#0"
      ]
    },
    "2763": {
      "op": "itob",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "event.resolvedBy#0",
        "events#9",
        "i#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "2764": {
      "op": "dig 6",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "event.resolvedBy#0",
        "event.resolvedBy#0 (copy)",
        "events#9",
        "i#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "event.resolvedBy#0 (copy)"
      ]
    },
    "2766": {
      "op": "len",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "event.resolvedBy#0",
        "events#9",
        "i#0",
        "length%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "length%2#0"
      ]
    },
    "2767": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "count#0",
        "count#9",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "event.resolvedBy#0",
        "events#9",
        "i#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "as_bytes%2#0"
      ]
    },
    "2768": {
      "op": "extract 6 2",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "event.resolvedBy#0",
        "events#9",
        "i#0",
        "length_uint16%2#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "event.resolvedBy#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "length_uint16%2#0"
      ]
    },
    "2771": {
      "op": "uncover 7",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "length_uint16%2#0",
        "event.resolvedBy#0"
      ]
    },
    "2773": {
      "op": "concat",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "val_as_bytes%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0"
      ]
    },
    "2774": {
      "op": "uncover 6",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "2776": {
      "op": "bytec 19 // 0x0026",
      "defined_out": [
        "0x0026",
        "count#0",
        "count#9",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "0x0026"
      ]
    },
    "2778": {
      "op": "concat",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2779": {
      "op": "dig 6",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "2781": {
      "op": "len",
      "defined_out": [
        "count#0",
        "count#9",
        "data_length%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%2#0",
        "data_length%0#0"
      ]
    },
    "2782": {
      "op": "pushint 38 // 38",
      "defined_out": [
        "38",
        "count#0",
        "count#9",
        "data_length%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%2#0",
        "data_length%0#0",
        "38"
      ]
    },
    "2784": {
      "op": "+",
      "defined_out": [
        "count#0",
        "count#9",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0"
      ]
    },
    "2785": {
      "op": "dup",
      "defined_out": [
        "count#0",
        "count#9",
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)"
      ]
    },
    "2786": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "count#0",
        "count#9",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0",
        "as_bytes%4#0"
      ]
    },
    "2787": {
      "op": "extract 6 2",
      "defined_out": [
        "count#0",
        "count#9",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0"
      ]
    },
    "2790": {
      "op": "uncover 2",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2792": {
      "op": "swap",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%1#0"
      ]
    },
    "2793": {
      "op": "concat",
      "defined_out": [
        "count#0",
        "count#9",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2794": {
      "op": "dig 6",
      "defined_out": [
        "count#0",
        "count#9",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%1#0 (copy)",
        "encoded_value%2#0",
        "events#9",
        "i#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%1#0 (copy)"
      ]
    },
    "2796": {
      "op": "len",
      "defined_out": [
        "count#0",
        "count#9",
        "current_tail_offset%1#0",
        "data_length%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0",
        "data_length%1#0"
      ]
    },
    "2797": {
      "op": "uncover 2",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%3#0",
        "data_length%1#0",
        "current_tail_offset%1#0"
      ]
    },
    "2799": {
      "op": "+",
      "defined_out": [
        "count#0",
        "count#9",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%2#0"
      ]
    },
    "2800": {
      "op": "swap",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2801": {
      "op": "uncover 5",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "2803": {
      "op": "concat",
      "defined_out": [
        "count#0",
        "count#9",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2804": {
      "op": "uncover 4",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%2#0"
      ]
    },
    "2806": {
      "op": "concat",
      "defined_out": [
        "count#0",
        "count#9",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%3#0",
        "encoded_value%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2807": {
      "op": "uncover 3",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%3#0"
      ]
    },
    "2809": {
      "op": "concat",
      "defined_out": [
        "count#0",
        "count#9",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2810": {
      "op": "swap",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%6#0",
        "current_tail_offset%2#0"
      ]
    },
    "2811": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "count#0",
        "count#9",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%6#0",
        "as_bytes%5#0"
      ]
    },
    "2812": {
      "op": "extract 6 2",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%6#0",
        "offset_as_uint16%2#0"
      ]
    },
    "2815": {
      "op": "concat",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2816": {
      "op": "uncover 3",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0"
      ]
    },
    "2818": {
      "op": "concat",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_tuple_buffer%8#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "events#9",
        "i#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "2819": {
      "op": "uncover 2",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%8#0",
        "encoded_value%1#0"
      ]
    },
    "2821": {
      "op": "concat",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_tuple_buffer%9#0",
        "encoded_value%2#0",
        "events#9",
        "i#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_value%2#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2822": {
      "op": "swap",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_tuple_buffer%9#0",
        "encoded_value%2#0"
      ]
    },
    "2823": {
      "op": "concat",
      "defined_out": [
        "count#0",
        "count#9",
        "encoded_tuple_buffer%10#0",
        "events#9",
        "i#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "2824": {
      "op": "pushbytes 0x0002",
      "defined_out": [
        "0x0002",
        "count#0",
        "count#9",
        "encoded_tuple_buffer%10#0",
        "events#9",
        "i#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "encoded_tuple_buffer%10#0",
        "0x0002"
      ]
    },
    "2828": {
      "op": "swap",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "0x0002",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "2829": {
      "op": "concat",
      "defined_out": [
        "count#0",
        "count#9",
        "events#9",
        "i#0",
        "result%1#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "result%1#0"
      ]
    },
    "2830": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "count#0",
        "count#9",
        "events#9",
        "i#0",
        "result%1#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "result%1#0",
        "0"
      ]
    },
    "2831": {
      "op": "pushbytes 0x",
      "defined_out": [
        "0",
        "0x",
        "count#0",
        "count#9",
        "events#9",
        "i#0",
        "result%1#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "result%1#0",
        "0",
        "0x"
      ]
    },
    "2833": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0",
        "0x",
        "1",
        "count#0",
        "count#9",
        "events#9",
        "i#0",
        "result%1#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "result%1#0",
        "0",
        "0x",
        "1"
      ]
    },
    "2834": {
      "op": "uncover 3",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "0",
        "0x",
        "1",
        "result%1#0"
      ]
    },
    "2836": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "op": "callsub dynamic_array_concat_dynamic_element",
      "defined_out": [
        "concat_result%0#0",
        "count#0",
        "count#9",
        "events#9",
        "i#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "concat_result%0#0"
      ]
    },
    "2839": {
      "op": "frame_dig 2",
      "defined_out": [
        "concat_result%0#0",
        "count#0",
        "count#9",
        "events#0",
        "events#9",
        "i#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "concat_result%0#0",
        "events#0"
      ]
    },
    "2841": {
      "op": "dup",
      "defined_out": [
        "concat_result%0#0",
        "count#0",
        "count#9",
        "events#0",
        "events#0 (copy)",
        "events#9",
        "i#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "concat_result%0#0",
        "events#0",
        "events#0 (copy)"
      ]
    },
    "2842": {
      "op": "intc_0 // 0",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "concat_result%0#0",
        "events#0",
        "events#0 (copy)",
        "0"
      ]
    },
    "2843": {
      "op": "extract_uint16",
      "defined_out": [
        "concat_result%0#0",
        "count#0",
        "count#9",
        "events#0",
        "events#9",
        "i#0",
        "l_count%1#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "concat_result%0#0",
        "events#0",
        "l_count%1#0"
      ]
    },
    "2844": {
      "op": "swap",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "concat_result%0#0",
        "l_count%1#0",
        "events#0"
      ]
    },
    "2845": {
      "op": "extract 2 0",
      "defined_out": [
        "concat_result%0#0",
        "count#0",
        "count#9",
        "events#0",
        "events#9",
        "i#0",
        "l_count%1#0",
        "l_head_and_tail%1#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "concat_result%0#0",
        "l_count%1#0",
        "l_head_and_tail%1#0"
      ]
    },
    "2848": {
      "op": "dig 2",
      "defined_out": [
        "concat_result%0#0",
        "concat_result%0#0 (copy)",
        "count#0",
        "count#9",
        "events#0",
        "events#9",
        "i#0",
        "l_count%1#0",
        "l_head_and_tail%1#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "concat_result%0#0",
        "l_count%1#0",
        "l_head_and_tail%1#0",
        "concat_result%0#0 (copy)"
      ]
    },
    "2850": {
      "op": "intc_0 // 0",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "concat_result%0#0",
        "l_count%1#0",
        "l_head_and_tail%1#0",
        "concat_result%0#0 (copy)",
        "0"
      ]
    },
    "2851": {
      "op": "extract_uint16",
      "defined_out": [
        "concat_result%0#0",
        "count#0",
        "count#9",
        "events#0",
        "events#9",
        "i#0",
        "l_count%1#0",
        "l_head_and_tail%1#0",
        "r_count%1#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "concat_result%0#0",
        "l_count%1#0",
        "l_head_and_tail%1#0",
        "r_count%1#0"
      ]
    },
    "2852": {
      "op": "uncover 3",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "l_count%1#0",
        "l_head_and_tail%1#0",
        "r_count%1#0",
        "concat_result%0#0"
      ]
    },
    "2854": {
      "op": "extract 2 0",
      "defined_out": [
        "count#0",
        "count#9",
        "events#0",
        "events#9",
        "i#0",
        "l_count%1#0",
        "l_head_and_tail%1#0",
        "r_count%1#0",
        "r_head_and_tail%1#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "l_count%1#0",
        "l_head_and_tail%1#0",
        "r_count%1#0",
        "r_head_and_tail%1#0"
      ]
    },
    "2857": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_dynamic_element",
      "op": "callsub dynamic_array_concat_dynamic_element",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "events#0"
      ]
    },
    "2860": {
      "op": "frame_dig 3",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "events#0",
        "count#0"
      ]
    },
    "2862": {
      "op": "intc_1 // 1",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "events#0",
        "count#0",
        "1"
      ]
    },
    "2863": {
      "op": "+",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "events#0",
        "count#0"
      ]
    },
    "2864": {
      "op": "frame_bury 1"
    },
    "2866": {
      "op": "frame_bury 0",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0"
      ]
    },
    "2868": {
      "block": "getEmergencyHistory_after_if_else@5",
      "stack_in": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "events#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "events#0"
      ]
    },
    "2870": {
      "op": "frame_bury 2",
      "defined_out": [
        "events#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0"
      ]
    },
    "2872": {
      "op": "frame_dig 1",
      "defined_out": [
        "count#0",
        "events#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "count#0"
      ]
    },
    "2874": {
      "op": "frame_bury 3",
      "defined_out": [
        "count#0",
        "events#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0"
      ]
    },
    "2876": {
      "op": "frame_dig 4",
      "defined_out": [
        "count#0",
        "events#0",
        "i#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "i#0"
      ]
    },
    "2878": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "count#0",
        "events#0",
        "i#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "2879": {
      "op": "-",
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "i#0"
      ]
    },
    "2880": {
      "op": "frame_bury 4",
      "defined_out": [
        "count#0",
        "events#0",
        "i#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0"
      ]
    },
    "2882": {
      "op": "b getEmergencyHistory_while_top@1"
    },
    "2885": {
      "block": "getEmergencyHistory_after_while@6",
      "stack_in": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "events#0"
      ],
      "stack_out": [
        "events#9",
        "count#9",
        "events#0",
        "count#0",
        "i#0",
        "events#0"
      ]
    },
    "2887": {
      "op": "frame_bury 0"
    },
    "2889": {
      "retsub": true,
      "op": "retsub"
    }
  }
}