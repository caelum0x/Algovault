{
    "hints": {
        "initialize(uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "assignRole(byte[],uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "revokeRole(byte[],string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "requestPermission(uint64,uint64,string)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "approvePermissionRequest(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "rejectPermissionRequest(uint64,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "enableEmergencyOverride()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "disableEmergencyOverride()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transferSuperAdmin(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateAccessControlSettings(uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "performSecurityAudit()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "checkExpiredRoles()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "cleanupOldRequests()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "logAccess(string,byte[],uint64,byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "hasRole(byte[],uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "hasPermission(byte[],uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "canExecuteFunction(byte[],string)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "isSessionValid(byte[],uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "getUserRoleResult",
                    "elements": [
                        [
                            "role",
                            "uint64"
                        ],
                        [
                            "permissions",
                            "uint64"
                        ],
                        [
                            "assignedBy",
                            "byte[]"
                        ],
                        [
                            "assignedAt",
                            "uint64"
                        ],
                        [
                            "expiresAt",
                            "uint64"
                        ],
                        [
                            "revoked",
                            "uint64"
                        ],
                        [
                            "revokedAt",
                            "uint64"
                        ],
                        [
                            "revokedBy",
                            "byte[]"
                        ]
                    ]
                }
            }
        },
        "getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "getPermissionRequestResult",
                    "elements": [
                        [
                            "requester",
                            "byte[]"
                        ],
                        [
                            "targetRole",
                            "uint64"
                        ],
                        [
                            "requestedPermissions",
                            "uint64"
                        ],
                        [
                            "reason",
                            "byte[]"
                        ],
                        [
                            "requestedAt",
                            "uint64"
                        ],
                        [
                            "approvals",
                            "uint64"
                        ],
                        [
                            "approvers",
                            "byte[]"
                        ],
                        [
                            "status",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "getAccessControlStatsResult",
                    "elements": [
                        [
                            "totalUsers",
                            "uint64"
                        ],
                        [
                            "totalAdmins",
                            "uint64"
                        ],
                        [
                            "totalOperators",
                            "uint64"
                        ],
                        [
                            "pendingRequests",
                            "uint64"
                        ],
                        [
                            "emergencyOverride",
                            "bool"
                        ],
                        [
                            "lastAudit",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getAllUserRoles()byte[][]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 14
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "accessLogCount": {
                    "type": "uint64",
                    "key": "accessLogCount"
                },
                "adminSessionDuration": {
                    "type": "uint64",
                    "key": "adminSessionDuration"
                },
                "defaultUserPermissions": {
                    "type": "uint64",
                    "key": "defaultUserPermissions"
                },
                "emergencyOverride": {
                    "type": "uint64",
                    "key": "emergencyOverride"
                },
                "failedAccessAttempts": {
                    "type": "uint64",
                    "key": "failedAccessAttempts"
                },
                "lastSecurityAudit": {
                    "type": "uint64",
                    "key": "lastSecurityAudit"
                },
                "maxAdmins": {
                    "type": "uint64",
                    "key": "maxAdmins"
                },
                "maxOperators": {
                    "type": "uint64",
                    "key": "maxOperators"
                },
                "multiSigRequiredForAdmin": {
                    "type": "uint64",
                    "key": "multiSigRequiredForAdmin"
                },
                "operatorSessionDuration": {
                    "type": "uint64",
                    "key": "operatorSessionDuration"
                },
                "permissionRequestCount": {
                    "type": "uint64",
                    "key": "permissionRequestCount"
                },
                "superAdmin": {
                    "type": "bytes",
                    "key": "superAdmin"
                },
                "totalAdmins": {
                    "type": "uint64",
                    "key": "totalAdmins"
                },
                "totalOperators": {
                    "type": "uint64",
                    "key": "totalOperators"
                },
                "totalUsers": {
                    "type": "uint64",
                    "key": "totalUsers"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AccessControl",
        "methods": [
            {
                "name": "initialize",
                "args": [
                    {
                        "type": "uint64",
                        "name": "maxAdmins"
                    },
                    {
                        "type": "uint64",
                        "name": "maxOperators"
                    },
                    {
                        "type": "uint64",
                        "name": "multiSigRequired"
                    },
                    {
                        "type": "uint64",
                        "name": "defaultPermissions"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "assignRole",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "user"
                    },
                    {
                        "type": "uint64",
                        "name": "role"
                    },
                    {
                        "type": "uint64",
                        "name": "permissions"
                    },
                    {
                        "type": "uint64",
                        "name": "expiresAt"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "revokeRole",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "user"
                    },
                    {
                        "type": "string",
                        "name": "reason"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "requestPermission",
                "args": [
                    {
                        "type": "uint64",
                        "name": "targetRole"
                    },
                    {
                        "type": "uint64",
                        "name": "requestedPermissions"
                    },
                    {
                        "type": "string",
                        "name": "reason"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "approvePermissionRequest",
                "args": [
                    {
                        "type": "uint64",
                        "name": "requestId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "rejectPermissionRequest",
                "args": [
                    {
                        "type": "uint64",
                        "name": "requestId"
                    },
                    {
                        "type": "string",
                        "name": "reason"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "enableEmergencyOverride",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "disableEmergencyOverride",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "transferSuperAdmin",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "newSuperAdmin"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updateAccessControlSettings",
                "args": [
                    {
                        "type": "uint64",
                        "name": "newMaxAdmins"
                    },
                    {
                        "type": "uint64",
                        "name": "newMaxOperators"
                    },
                    {
                        "type": "uint64",
                        "name": "newMultiSigRequired"
                    },
                    {
                        "type": "uint64",
                        "name": "newDefaultPermissions"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "performSecurityAudit",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "checkExpiredRoles",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "cleanupOldRequests",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "logAccess",
                "args": [
                    {
                        "type": "string",
                        "name": "action"
                    },
                    {
                        "type": "byte[]",
                        "name": "targetUser"
                    },
                    {
                        "type": "uint64",
                        "name": "role"
                    },
                    {
                        "type": "byte[]",
                        "name": "actor"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "hasRole",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "user"
                    },
                    {
                        "type": "uint64",
                        "name": "role"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "hasPermission",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "user"
                    },
                    {
                        "type": "uint64",
                        "name": "permission"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "canExecuteFunction",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "user"
                    },
                    {
                        "type": "string",
                        "name": "functionName"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "isSessionValid",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "user"
                    },
                    {
                        "type": "uint64",
                        "name": "sessionStartTime"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "getUserRole",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "user"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])"
                }
            },
            {
                "name": "getPermissionRequest",
                "args": [
                    {
                        "type": "uint64",
                        "name": "requestId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)"
                }
            },
            {
                "name": "getAccessControlStats",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,bool,uint64)"
                }
            },
            {
                "name": "getAllUserRoles",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "byte[][]"
                }
            },
            {
                "name": "getPermissionRequestsByUser",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "user"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}