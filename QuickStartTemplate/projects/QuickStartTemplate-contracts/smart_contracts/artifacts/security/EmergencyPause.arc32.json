{
    "hints": {
        "initialize(byte[],uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "triggerEmergency(uint64,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "resolveEmergency(uint64,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "escalateEmergency(uint64,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "autoResolveCheck()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addEmergencyOperator(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "removeEmergencyOperator(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "activateRecoveryMode()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "executeRecovery()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "checkCircuitBreaker(uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reportSuspiciousActivity(string,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateEmergencyThresholds(uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "isOperationAllowed(string)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "isAuthorizedOperator(byte[])bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "getEmergencyEventResult",
                    "elements": [
                        [
                            "level",
                            "uint64"
                        ],
                        [
                            "reason",
                            "byte[]"
                        ],
                        [
                            "triggeredBy",
                            "byte[]"
                        ],
                        [
                            "timestamp",
                            "uint64"
                        ],
                        [
                            "resolved",
                            "uint64"
                        ],
                        [
                            "resolvedAt",
                            "uint64"
                        ],
                        [
                            "resolvedBy",
                            "byte[]"
                        ]
                    ]
                }
            }
        },
        "getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "getCurrentEmergencyStatusResult",
                    "elements": [
                        [
                            "active",
                            "bool"
                        ],
                        [
                            "level",
                            "uint64"
                        ],
                        [
                            "eventId",
                            "uint64"
                        ],
                        [
                            "duration",
                            "uint64"
                        ],
                        [
                            "recoveryMode",
                            "bool"
                        ]
                    ]
                }
            }
        },
        "getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "getCircuitBreakerStatusResult",
                    "elements": [
                        [
                            "currentDailyVolume",
                            "uint64"
                        ],
                        [
                            "maxDailyVolume",
                            "uint64"
                        ],
                        [
                            "remainingVolume",
                            "uint64"
                        ],
                        [
                            "lastReset",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 16
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin": {
                    "type": "bytes",
                    "key": "admin"
                },
                "autoResolveTime": {
                    "type": "uint64",
                    "key": "autoResolveTime"
                },
                "cooldownPeriod": {
                    "type": "uint64",
                    "key": "cooldownPeriod"
                },
                "currentDailyVolume": {
                    "type": "uint64",
                    "key": "currentDailyVolume"
                },
                "currentEmergencyLevel": {
                    "type": "uint64",
                    "key": "currentEmergencyLevel"
                },
                "emergencyActive": {
                    "type": "uint64",
                    "key": "emergencyActive"
                },
                "emergencyCount": {
                    "type": "uint64",
                    "key": "emergencyCount"
                },
                "emergencyOperators": {
                    "type": "bytes",
                    "key": "emergencyOperators"
                },
                "failedTransactionThreshold": {
                    "type": "uint64",
                    "key": "failedTransactionThreshold"
                },
                "largeWithdrawalThreshold": {
                    "type": "uint64",
                    "key": "largeWithdrawalThreshold"
                },
                "lastEmergencyTime": {
                    "type": "uint64",
                    "key": "lastEmergencyTime"
                },
                "lastVolumeReset": {
                    "type": "uint64",
                    "key": "lastVolumeReset"
                },
                "maxDailyVolume": {
                    "type": "uint64",
                    "key": "maxDailyVolume"
                },
                "maxEmergencyDuration": {
                    "type": "uint64",
                    "key": "maxEmergencyDuration"
                },
                "recoveryApprovals": {
                    "type": "uint64",
                    "key": "recoveryApprovals"
                },
                "recoveryMode": {
                    "type": "uint64",
                    "key": "recoveryMode"
                },
                "recoveryStartTime": {
                    "type": "uint64",
                    "key": "recoveryStartTime"
                },
                "suspiciousActivityThreshold": {
                    "type": "uint64",
                    "key": "suspiciousActivityThreshold"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "EmergencyPause",
        "methods": [
            {
                "name": "initialize",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "admin"
                    },
                    {
                        "type": "uint64",
                        "name": "cooldownPeriod"
                    },
                    {
                        "type": "uint64",
                        "name": "autoResolveTime"
                    },
                    {
                        "type": "uint64",
                        "name": "maxEmergencyDuration"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "triggerEmergency",
                "args": [
                    {
                        "type": "uint64",
                        "name": "level"
                    },
                    {
                        "type": "string",
                        "name": "reason"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "resolveEmergency",
                "args": [
                    {
                        "type": "uint64",
                        "name": "eventId"
                    },
                    {
                        "type": "string",
                        "name": "resolution"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "escalateEmergency",
                "args": [
                    {
                        "type": "uint64",
                        "name": "newLevel"
                    },
                    {
                        "type": "string",
                        "name": "reason"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "autoResolveCheck",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "addEmergencyOperator",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "operator"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "removeEmergencyOperator",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "operator"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "activateRecoveryMode",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "executeRecovery",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "checkCircuitBreaker",
                "args": [
                    {
                        "type": "uint64",
                        "name": "transactionAmount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "reportSuspiciousActivity",
                "args": [
                    {
                        "type": "string",
                        "name": "activityType"
                    },
                    {
                        "type": "string",
                        "name": "details"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updateEmergencyThresholds",
                "args": [
                    {
                        "type": "uint64",
                        "name": "suspiciousThreshold"
                    },
                    {
                        "type": "uint64",
                        "name": "failedTxThreshold"
                    },
                    {
                        "type": "uint64",
                        "name": "largeWithdrawalThreshold"
                    },
                    {
                        "type": "uint64",
                        "name": "maxDailyVolume"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "isOperationAllowed",
                "args": [
                    {
                        "type": "string",
                        "name": "operationType"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "isAuthorizedOperator",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "operator"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "getEmergencyEvent",
                "args": [
                    {
                        "type": "uint64",
                        "name": "eventId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,byte[],byte[],uint64,uint64,uint64,byte[])"
                }
            },
            {
                "name": "getCurrentEmergencyStatus",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(bool,uint64,uint64,uint64,bool)"
                }
            },
            {
                "name": "getCircuitBreakerStatus",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "getEmergencyHistory",
                "args": [
                    {
                        "type": "uint64",
                        "name": "limit"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}