{
  "version": 3,
  "sources": [
    "/Users/arhansubasi/Algorand-dApp-Quick-Start-Template-TypeScript/QuickStartTemplate/projects/QuickStartTemplate-contracts/smart_contracts/vault/governance_vault.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAkPE;;AAAA;AAAA;AAAA;;AAAA;AAlPF;;;AAAA;AAkPE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAnOF;;;AAAA;;;AAAA;;;AAAA;AAmOE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AA9NF;;;AAAA;;;AAAA;;;AAAA;AA8NE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAzMF;;;AAAA;AAyME;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAjMF;;;AAAA;;;AAiME;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARC;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AArKH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAqKG;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAtJH;;;AAAA;;;AAAA;;;AAAA;AAsJG;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAjJH;;;AAAA;;;AAiJG;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAxIH;;;AAAA;AAwIG;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAzHH;;;AAAA;AAyHG;;;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AArGH;;;AAAA;AAqGG;;;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AAzEH;;;AAAA;AAAA;;;AAAA;AAyEG;;;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AA1CH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA0CG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AAnBH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAmBG;;;AAAA;;AAnBH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAmBE;;;AANA;AAAA;AAAA;AAAA;AAeS;AAAP;AApBF;;;;;;;;;;;;;;;;;AAsBE;;AAAA;AA3BF;;AA4BE;;AAAA;AA3BF;;AA4BE;;AAAA;AA3BF;;AA4BE;;AAAA;AAjBF;;AAkBE;;AAAA;AAjBF;;AAkBE;;AAAA;AAjCF;;AAkC6B;AAA3B;AA3BF;AA4BgC;AAA9B;AAxBF;AAyBgC;AAA9B;AA1BF;;AA2ByB;;AAAvB;;AAGF;;;AA7BA;AAAA;AAAA;AAAA;AAqCyC;AAAhC;AAAP;AACoD;;AAAxB;;;AA9C9B;AAAA;;AAAA;AAAA;AA+CS;AAAP;AAlDF;AAAA;;AAAA;AAAA;AAmDwD;AAA3B;AAnD7B;;AAoDE;;AAAA;AAjEK;AAAA;AAQA;AA2DqD;;AA3DrD;AA2DkF;;AAAvF;;AAAA;;AAAA;AA3DK;AA4DqD;;AA5DrD;AA4DL;AAAA;;AAAA;;AAAA;AA5DK;AA6DqD;;AA7DrD;AA6DL;AAAA;;AAAA;;AAAA;AA7DK;AA8DsD;;AA9DtD;AA8DL;;AAAA;AAAA;AA9DK;AA+DqD;;AA/DrD;AA+DL;AAAA;;AAAA;;AAAA;AA/DK;AAgEqD;;AAhErD;AAgEL;AAAA;;AAAA;;AAAA;AAhEK;AAiEsD;;AAjEtD;AAiE6F;;AAAlG;AAAA;AACgG;;AA5DlG;AAAA;;AAAA;AAAA;AANO;;AAkEsD;;AAlEtD;AAkEoF;;AAAA;AAAzF;AAAA;AAlEK;AAmEsD;;AAnEtD;AAmE+E;AAApF;AAAA;AAAA;;AAAA;AAnEK;;AAoEsD;;AApEtD;AAoEL;;AAAA;AApEK;;AAqEsD;;AArEtD;AAqEL;;AAAA;AArEK;;AAsEsD;AAtEtD;AAzB8B;AA+FnC;AAAA;AA/DF;AAAA;;AAAA;AAAA;AAPO;;AAuEsD;;AAvEtD;AAuEL;AAAA;AAAA;AAvEK;AAwEsD;;AAxEtD;AAwEL;AAAA;AACA;AAGF;;;AA5DA;AAAA;AAAA;AAAA;AA8DyC;AAAhC;AAAP;AACO;;AAAW;AAAX;AAAP;AAvFK;;AAAA;AAAA;;AAwFqE;AAhFrE;AAgFoF;AAAA;AAAA;AAAA;AAAA;AAzGtD;AA0G5B;AAAP;AAjFK;AAkF4E;;AAlF5E;AAkFkG;AAAA;AAAA;AAAA;AAAA;AACzF;;AAAP;AAAP;AACkB;;AACZ;AAAc;;;AAAd;AAAA;;AACN;AAtFK;AAAA;AAwFoD;AAAA;AAAA;;AAAlD;AAAP;AAEA;;AAAA;AAAA;AAEA;;AAAA;;;AA5FK;;AA6F6D;;AA7F7D;AA8FiF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtC;;AAAA;AAA9C;AAAA;;AACS;;AAAY;AAAZ;AAAJ;;;AA/FF;;AAgGyD;;AAhGzD;AAiGyE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAlC;;AAAA;AAA1C;AAAA;;AAjGG;;AAmG6D;;AAnG7D;AAoGiF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtC;;AAAA;AAA9C;AAAA;;AAIJ;;;AAhHO;;AAAA;AAQA;AA0GqD;AA1GrD;AAAA;AAAA;;AA2G0C;AAAA;AAAA;AAAA;AAAA;AApIZ;AAqI5B;AAAP;AA5GK;AA6G4E;;AA7G5E;AA6GkG;AAAA;AAAA;AAAA;AAAA;AACzF;;AAAP;AAAP;AA9GK;AA+GuE;;AA/GvE;AA+GwF;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA/GxF;AAgH2E;;AAhH3E;AAgHgG;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAhHhG;AAiH2E;;AAjH3E;AAiHgG;AAAA;AAAA;AAAA;AAAA;AAClF;;AAAA;;AAAA;AAAA;AAlHd;AAmH6E;;AAnH7E;AAmHoG;AAAA;AAAA;AAAA;AAAA;AACtF;AAAa;AAAb;AAxGrB;AAAA;AAAA;AAAA;AAwGqD;;AAAA;AAAjC;AACd;;;AAAa;;AAAA;;AAAA;AAAb;;;AA7IkC;AA8IpC;AAAA;;AAAA;AAAA;;AA7IiC;;AA+IjC;AAAA;;AAAA;AAAA;;AAIJ;;;AApIO;;AAAA;AAQA;AA8HqD;AA9HrD;AA+H0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAvJT;AAwJ/B;AAAP;AAhIK;;AAiIuD;;AAjIvD;AAkIoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAlC;AAAP;AAlIK;;AAmI4E;;AAnI5E;AAmIkG;AAAA;AAAA;AAAA;AAAA;AACzF;;AAjHhB;AAAA;;AAAA;AAAA;AAiHmC;;AAAA;AAA1B;AAAP;AACc;;AAlHhB;AAAA;;AAAA;AAAA;AAkHmC;;AAAA;AAjHnC;AAAA;;AAAA;AAAA;AAiHmC;AAA1B;AAAP;AAE0C;AAA1C;AAAA;AA7JqC;;AA8JrC;AAAA;;AAGF;;;AAEa;;AA9Hb;AAAA;;AAAA;AAAA;AA8HS;AAAP;AArJK;;AAAA;AAsJqD;AA9IrD;AAAA;AA+I0C;AAAA;AAAA;AAAA;AAAA;;AAAA;AAxKZ;AAyK5B;AAAA;;;AAAqC;;AAxKN;AAwKM;AAArC;;;;AAAP;AArKsC;;AAsKtC;AAAA;;AAAA;AAAA;;;;;;AAGF;;;AAEwB;;AAAtB;AAAA;;AAAA;;AAAA;;AAGF;;;AAKQ;;AAAW;;;AAGjB;;AAAA;AAAA;;AAAA;AAAA;AArJF;AAAA;AAAA;AAAA;AAwJgC;AAAA;AAAA;;AAAA;AAxJhC;AAwJE;AAAA;;AAIF;;;AAMa;;AA/Jb;AAAA;;AAAA;AAAA;AA+JS;AAAP;AAxKF;;AA0KE;;AAAA;AAzKF;;AA0KE;;AAAA;AAzKF;;AA0KE;;AAAA;;AAKW;;AAxKb;AAAA;;AAAA;AAAA;AAwKS;AAAP;AAvKF;AAyKgC;AAA9B;;AAKW;;AA/Kb;AAAA;;AAAA;AAAA;AA+KS;AAAP;AA9KF;AAgLgC;AAA9B;;AAIF;;;AAEqB;;AAAA;AAAA;;AAAnB;;;AACwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAtB;AAEK;AAAP;AAGF;;;AApNO;;AAAA;AAQA;AA+MuD;;AA/MvD;AA+MwE;AAAA;AA/MxE;;AAgNuD;;AAhNvD;AAgNqE;AAAA;AAhNrE;;AAiNuD;;AAjNvD;AAiN2E;AAAA;AAjN3E;;AAkNwD;;AAlNxD;AAkN6E;AAAA;AAAA;AAAA;AAAA;AAlN7E;;AAmNuD;;AAnNvD;AAmN8E;AAAA;AAnN9E;;AAoNuD;;AApNvD;AAoN6E;AAAA;AApN7E;;AAqNwD;;AArNxD;AAqNgF;AAAA;AAAA;AAAA;AAAA;AArNhF;;AAsNwD;;AAtNxD;AAsN8E;AAAA;AAAA;AAAA;AAAA;AAtN9E;;AAuNwD;;AAvNxD;AAuNyE;AAAA;AAAA;AAAA;AAAA;AAvNzE;;AAwNwD;;AAxNxD;AAwN6E;AAAA;AAAA;AAAA;AAAA;AAxN7E;;AAyNwD;;AAzNxD;AAyN6E;AAAA;AAAA;AAAA;AAAA;AAzN7E;;AA0NwD;AA1NxD;AA0NuE;AAAA;AAAA;AAAA;AAAA;AA1NvE;;AA2NwD;;AA3NxD;AA2N+E;AAAA;AAAA;AAAA;AAAA;AA3N/E;;AA4NwD;;AA5NxD;AA4NyE;AAAA;AAAA;AAAA;AAAA;AAd9E;;AAAA;AAmBF;;;AAzOO;;AAAA;AAQA;;AAAA;AAAA;AAmOmD;AAAA;AAAA;AAAA;AAAA;AAAxD;AAGF;;;AA9OO;;AAAA;AAQA;;AAAA;AAAA;AAuOmD;AAAA;;AAAxD;AAlOF;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AA2NE;AAUF;;;AA7PO;;AAAA;AAQA;AAsPuE;;AAtPvE;AAsPwF;AAAA;AAAA;AAAA;AAAA;AAtPxF;;AAuP2E;;AAvP3E;AAuPgG;AAAA;AAAA;AAAA;AAAA;AAvPhG;;AAwP2E;;AAxP3E;AAwPgG;AAAA;AAAA;AAAA;AAAA;AAClF;;AAAA;AAAA;AAAb;AAC4E;;AA1P7E;AA0PoG;AAAA;AAAA;AAAA;AAAA;AA9O3G;AAAA;AAAA;AAAA;AA+OyB;AAA0D;AAA3D;AAAhB;AACC;;;AAAqB;;AAAa;AAAb;AAAD;;AAAA;AAA3B;;AAAA;AAAoF;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 100"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 \"governanceActive\" \"totalVotingPower\" \"_status\" \"admin\" \"_votingEndTime\" \"_forVotes\" \"_againstVotes\" \"_abstainVotes\" \"votingDuration\" \"quorumThreshold\" \"proposalThreshold\" \"proposalCount\" \"_quorumRequired\" \"executionDelay\" \"_executed\" \"gracePeriod\" \"_proposer\" \"_title\" \"_description\" \"_proposalType\" \"_targetContract\" \"_executionData\" \"_votingStartTime\""
    },
    "323": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "325": {
      "op": "bz main_bare_routing@22",
      "stack_out": []
    },
    "328": {
      "op": "pushbytess 0xc1b0aabe 0xa009cab8 0xa278a8b6 0x62ce9b5b 0xf1ff28aa 0xbfb5248f 0x0b5c279a 0x4fa17c8e 0x3d046431 0x34180ed6 0x4b1b5be1 0x0e6c665d 0xe94ebdfb 0x4a6d9323 0xcf268f7f 0x2ca3f224 0x93574e61 // method \"initialize(uint64,uint64,uint64,uint64,uint64,uint64)void\", method \"createProposal(byte[],byte[],uint64,byte[],byte[])uint64\", method \"vote(uint64,uint64)void\", method \"finalizeProposal(uint64)void\", method \"executeProposal(uint64)void\", method \"cancelProposal(uint64)void\", method \"delegateVoting(byte[])void\", method \"updateVotingPower(byte[],uint64)void\", method \"updateGovernanceParameters(uint64,uint64,uint64)void\", method \"pauseGovernance()void\", method \"resumeGovernance()void\", method \"getVotingPower(byte[])uint64\", method \"getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)\", method \"getVote(byte[],uint64)uint64\", method \"hasVoted(byte[],uint64)uint64\", method \"getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)\", method \"calculateQuorumProgress(uint64)uint64\"",
      "defined_out": [
        "Method(calculateQuorumProgress(uint64)uint64)",
        "Method(cancelProposal(uint64)void)",
        "Method(createProposal(byte[],byte[],uint64,byte[],byte[])uint64)",
        "Method(delegateVoting(byte[])void)",
        "Method(executeProposal(uint64)void)",
        "Method(finalizeProposal(uint64)void)",
        "Method(getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getVote(byte[],uint64)uint64)",
        "Method(getVotingPower(byte[])uint64)",
        "Method(hasVoted(byte[],uint64)uint64)",
        "Method(initialize(uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(pauseGovernance()void)",
        "Method(resumeGovernance()void)",
        "Method(updateGovernanceParameters(uint64,uint64,uint64)void)",
        "Method(updateVotingPower(byte[],uint64)void)",
        "Method(vote(uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(initialize(uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(createProposal(byte[],byte[],uint64,byte[],byte[])uint64)",
        "Method(vote(uint64,uint64)void)",
        "Method(finalizeProposal(uint64)void)",
        "Method(executeProposal(uint64)void)",
        "Method(cancelProposal(uint64)void)",
        "Method(delegateVoting(byte[])void)",
        "Method(updateVotingPower(byte[],uint64)void)",
        "Method(updateGovernanceParameters(uint64,uint64,uint64)void)",
        "Method(pauseGovernance()void)",
        "Method(resumeGovernance()void)",
        "Method(getVotingPower(byte[])uint64)",
        "Method(getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getVote(byte[],uint64)uint64)",
        "Method(hasVoted(byte[],uint64)uint64)",
        "Method(getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(calculateQuorumProgress(uint64)uint64)"
      ]
    },
    "415": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(calculateQuorumProgress(uint64)uint64)",
        "Method(cancelProposal(uint64)void)",
        "Method(createProposal(byte[],byte[],uint64,byte[],byte[])uint64)",
        "Method(delegateVoting(byte[])void)",
        "Method(executeProposal(uint64)void)",
        "Method(finalizeProposal(uint64)void)",
        "Method(getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getVote(byte[],uint64)uint64)",
        "Method(getVotingPower(byte[])uint64)",
        "Method(hasVoted(byte[],uint64)uint64)",
        "Method(initialize(uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(pauseGovernance()void)",
        "Method(resumeGovernance()void)",
        "Method(updateGovernanceParameters(uint64,uint64,uint64)void)",
        "Method(updateVotingPower(byte[],uint64)void)",
        "Method(vote(uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(initialize(uint64,uint64,uint64,uint64,uint64,uint64)void)",
        "Method(createProposal(byte[],byte[],uint64,byte[],byte[])uint64)",
        "Method(vote(uint64,uint64)void)",
        "Method(finalizeProposal(uint64)void)",
        "Method(executeProposal(uint64)void)",
        "Method(cancelProposal(uint64)void)",
        "Method(delegateVoting(byte[])void)",
        "Method(updateVotingPower(byte[],uint64)void)",
        "Method(updateGovernanceParameters(uint64,uint64,uint64)void)",
        "Method(pauseGovernance()void)",
        "Method(resumeGovernance()void)",
        "Method(getVotingPower(byte[])uint64)",
        "Method(getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getVote(byte[],uint64)uint64)",
        "Method(hasVoted(byte[],uint64)uint64)",
        "Method(getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(calculateQuorumProgress(uint64)uint64)",
        "tmp%2#0"
      ]
    },
    "418": {
      "op": "match main_initialize_route@3 main_createProposal_route@4 main_vote_route@5 main_finalizeProposal_route@6 main_executeProposal_route@7 main_cancelProposal_route@8 main_delegateVoting_route@9 main_updateVotingPower_route@10 main_updateGovernanceParameters_route@11 main_pauseGovernance_route@12 main_resumeGovernance_route@13 main_getVotingPower_route@14 main_getProposal_route@15 main_getVote_route@16 main_hasVoted_route@17 main_getGovernanceInfo_route@18 main_calculateQuorumProgress_route@19",
      "stack_out": []
    },
    "454": {
      "block": "main_after_if_else@26",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "455": {
      "op": "return",
      "stack_out": []
    },
    "456": {
      "block": "main_calculateQuorumProgress_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "458": {
      "op": "!",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "459": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "460": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "462": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "463": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%19#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%19#0"
      ]
    },
    "466": {
      "op": "btoi",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "467": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.calculateQuorumProgress",
      "op": "callsub calculateQuorumProgress",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "470": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%20#0"
      ],
      "stack_out": [
        "val_as_bytes%20#0"
      ]
    },
    "471": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%20#0"
      ],
      "stack_out": [
        "val_as_bytes%20#0",
        "0x151f7c75"
      ]
    },
    "472": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%20#0"
      ]
    },
    "473": {
      "op": "concat",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "474": {
      "op": "log",
      "stack_out": []
    },
    "475": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "476": {
      "op": "return",
      "stack_out": []
    },
    "477": {
      "block": "main_getGovernanceInfo_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "479": {
      "op": "!",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "480": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "481": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "483": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "484": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.getGovernanceInfo",
      "op": "callsub getGovernanceInfo",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0"
      ]
    },
    "487": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%16#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%15#0"
      ]
    },
    "489": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%16#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "val_as_bytes%14#0"
      ],
      "stack_out": [
        "elements_to_encode%16#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "val_as_bytes%14#0"
      ]
    },
    "490": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "val_as_bytes%14#0",
        "elements_to_encode%16#0"
      ]
    },
    "492": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0"
      ],
      "stack_out": [
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0"
      ]
    },
    "493": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "elements_to_encode%17#0"
      ]
    },
    "495": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0"
      ],
      "stack_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0"
      ]
    },
    "496": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "elements_to_encode%18#0"
      ]
    },
    "498": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "val_as_bytes%17#0"
      ],
      "stack_out": [
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "val_as_bytes%17#0"
      ]
    },
    "499": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%20#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "val_as_bytes%17#0",
        "elements_to_encode%19#0"
      ]
    },
    "501": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%20#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0"
      ],
      "stack_out": [
        "elements_to_encode%20#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0"
      ]
    },
    "502": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "elements_to_encode%20#0"
      ]
    },
    "504": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%19#0"
      ],
      "stack_out": [
        "val_as_bytes%14#0",
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%19#0"
      ]
    },
    "505": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%15#0",
        "val_as_bytes%16#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%19#0",
        "val_as_bytes%14#0"
      ]
    },
    "507": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%16#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%19#0",
        "val_as_bytes%14#0",
        "val_as_bytes%15#0"
      ]
    },
    "509": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%23#0",
        "val_as_bytes%16#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%19#0"
      ],
      "stack_out": [
        "val_as_bytes%16#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%19#0",
        "encoded_tuple_buffer%23#0"
      ]
    },
    "510": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%19#0",
        "encoded_tuple_buffer%23#0",
        "val_as_bytes%16#0"
      ]
    },
    "512": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%24#0",
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%19#0"
      ],
      "stack_out": [
        "val_as_bytes%17#0",
        "val_as_bytes%18#0",
        "val_as_bytes%19#0",
        "encoded_tuple_buffer%24#0"
      ]
    },
    "513": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%18#0",
        "val_as_bytes%19#0",
        "encoded_tuple_buffer%24#0",
        "val_as_bytes%17#0"
      ]
    },
    "515": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%25#0",
        "val_as_bytes%18#0",
        "val_as_bytes%19#0"
      ],
      "stack_out": [
        "val_as_bytes%18#0",
        "val_as_bytes%19#0",
        "encoded_tuple_buffer%25#0"
      ]
    },
    "516": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%19#0",
        "encoded_tuple_buffer%25#0",
        "val_as_bytes%18#0"
      ]
    },
    "518": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%26#0",
        "val_as_bytes%19#0"
      ],
      "stack_out": [
        "val_as_bytes%19#0",
        "encoded_tuple_buffer%26#0"
      ]
    },
    "519": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%26#0",
        "val_as_bytes%19#0"
      ]
    },
    "520": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%27#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%27#0"
      ]
    },
    "521": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%27#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%27#0",
        "0x151f7c75"
      ]
    },
    "522": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%27#0"
      ]
    },
    "523": {
      "op": "concat",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "524": {
      "op": "log",
      "stack_out": []
    },
    "525": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "526": {
      "op": "return",
      "stack_out": []
    },
    "527": {
      "block": "main_hasVoted_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "529": {
      "op": "!",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "530": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "531": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "533": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "534": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "537": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "540": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%18#0",
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0",
        "reinterpret_bytes[8]%18#0"
      ]
    },
    "543": {
      "op": "btoi",
      "defined_out": [
        "tmp%102#0",
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%102#0",
        "tmp%103#0"
      ]
    },
    "544": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.hasVoted",
      "op": "callsub hasVoted",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "547": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "val_as_bytes%13#0"
      ]
    },
    "548": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "val_as_bytes%13#0",
        "0x151f7c75"
      ]
    },
    "549": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%13#0"
      ]
    },
    "550": {
      "op": "concat",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "551": {
      "op": "log",
      "stack_out": []
    },
    "552": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "553": {
      "op": "return",
      "stack_out": []
    },
    "554": {
      "block": "main_getVote_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "556": {
      "op": "!",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "557": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "558": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "560": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "561": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "564": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "567": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%17#0",
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "reinterpret_bytes[8]%17#0"
      ]
    },
    "570": {
      "op": "btoi",
      "defined_out": [
        "tmp%94#0",
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%94#0",
        "tmp%95#0"
      ]
    },
    "571": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.getVote",
      "op": "callsub getVote",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "574": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "val_as_bytes%12#0"
      ]
    },
    "575": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%12#0"
      ],
      "stack_out": [
        "val_as_bytes%12#0",
        "0x151f7c75"
      ]
    },
    "576": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%12#0"
      ]
    },
    "577": {
      "op": "concat",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "578": {
      "op": "log",
      "stack_out": []
    },
    "579": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "580": {
      "op": "return",
      "stack_out": []
    },
    "581": {
      "block": "main_getProposal_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "583": {
      "op": "!",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "584": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "585": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "587": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "588": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%16#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "591": {
      "op": "btoi",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "592": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.getProposal",
      "op": "callsub getProposal",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0"
      ]
    },
    "595": {
      "op": "dig 14",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%0#0 (copy)",
        "elements_to_encode%1#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%0#0 (copy)"
      ]
    },
    "597": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "length%0#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "length%0#0"
      ]
    },
    "598": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "as_bytes%0#0"
      ]
    },
    "599": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "length_uint16%0#0"
      ]
    },
    "602": {
      "op": "uncover 15",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "length_uint16%0#0",
        "elements_to_encode%0#0"
      ]
    },
    "604": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0"
      ]
    },
    "605": {
      "op": "dig 14",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%1#0 (copy)",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "elements_to_encode%1#0 (copy)"
      ]
    },
    "607": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "length%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "608": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "elements_to_encode%1#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "609": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "612": {
      "op": "uncover 15",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "elements_to_encode%1#0"
      ]
    },
    "614": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "615": {
      "op": "dig 14",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%2#0",
        "elements_to_encode%2#0 (copy)",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "elements_to_encode%2#0 (copy)"
      ]
    },
    "617": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length%2#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length%2#0"
      ]
    },
    "618": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "as_bytes%2#0"
      ]
    },
    "619": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length_uint16%2#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length_uint16%2#0"
      ]
    },
    "622": {
      "op": "uncover 15",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length_uint16%2#0",
        "elements_to_encode%2#0"
      ]
    },
    "624": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0"
      ]
    },
    "625": {
      "op": "uncover 14",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "627": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0"
      ]
    },
    "628": {
      "op": "dig 14",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "elements_to_encode%4#0 (copy)"
      ]
    },
    "630": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "length%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "length%3#0"
      ]
    },
    "631": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "as_bytes%3#0"
      ]
    },
    "632": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "length_uint16%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "length_uint16%3#0"
      ]
    },
    "635": {
      "op": "uncover 15",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "length_uint16%3#0",
        "elements_to_encode%4#0"
      ]
    },
    "637": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0"
      ]
    },
    "638": {
      "op": "dig 14",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%5#0",
        "elements_to_encode%5#0 (copy)",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "elements_to_encode%5#0 (copy)"
      ]
    },
    "640": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "length%4#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "length%4#0"
      ]
    },
    "641": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "as_bytes%4#0"
      ]
    },
    "642": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "length_uint16%4#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "length_uint16%4#0"
      ]
    },
    "645": {
      "op": "uncover 15",
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "length_uint16%4#0",
        "elements_to_encode%5#0"
      ]
    },
    "647": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0"
      ]
    },
    "648": {
      "op": "uncover 14",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "elements_to_encode%6#0"
      ]
    },
    "650": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "651": {
      "op": "uncover 14",
      "stack_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "elements_to_encode%7#0"
      ]
    },
    "653": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "654": {
      "op": "uncover 14",
      "stack_out": [
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "elements_to_encode%8#0"
      ]
    },
    "656": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "657": {
      "op": "uncover 14",
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "elements_to_encode%9#0"
      ]
    },
    "659": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "660": {
      "op": "uncover 14",
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "elements_to_encode%10#0"
      ]
    },
    "662": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "663": {
      "op": "uncover 14",
      "stack_out": [
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%11#0"
      ]
    },
    "665": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "666": {
      "op": "uncover 14",
      "stack_out": [
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "elements_to_encode%12#0"
      ]
    },
    "668": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "669": {
      "op": "uncover 14",
      "stack_out": [
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "elements_to_encode%13#0"
      ]
    },
    "671": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "672": {
      "op": "uncover 14",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "elements_to_encode%14#0"
      ]
    },
    "674": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0"
      ]
    },
    "675": {
      "op": "dig 14",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "677": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "data_length%0#0"
      ]
    },
    "678": {
      "op": "pushint 90 // 90",
      "defined_out": [
        "90",
        "data_length%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "data_length%0#0",
        "90"
      ]
    },
    "680": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%1#0"
      ]
    },
    "681": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)"
      ]
    },
    "682": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "current_tail_offset%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%1#0",
        "as_bytes%6#0"
      ]
    },
    "683": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0"
      ]
    },
    "686": {
      "op": "pushbytes 0x005a",
      "defined_out": [
        "0x005a",
        "current_tail_offset%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0",
        "0x005a"
      ]
    },
    "690": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%1#0",
        "0x005a",
        "offset_as_uint16%1#0"
      ]
    },
    "691": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "692": {
      "op": "dig 15",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%1#0 (copy)",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%1#0 (copy)"
      ]
    },
    "694": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%1#0",
        "data_length%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "data_length%1#0"
      ]
    },
    "695": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%2#0",
        "data_length%1#0",
        "current_tail_offset%1#0"
      ]
    },
    "697": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%2#0"
      ]
    },
    "698": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%2#0",
        "current_tail_offset%2#0 (copy)",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%2#0",
        "current_tail_offset%2#0 (copy)"
      ]
    },
    "699": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%2#0",
        "as_bytes%7#0"
      ]
    },
    "700": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "offset_as_uint16%2#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0"
      ]
    },
    "703": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "705": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%2#0"
      ]
    },
    "706": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "707": {
      "op": "dig 14",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%2#0 (copy)",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%2#0 (copy)"
      ]
    },
    "709": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%2#0",
        "data_length%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "data_length%2#0"
      ]
    },
    "710": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%3#0",
        "data_length%2#0",
        "current_tail_offset%2#0"
      ]
    },
    "712": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%3#0"
      ]
    },
    "713": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "714": {
      "op": "uncover 13",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "716": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "717": {
      "op": "dig 1",
      "defined_out": [
        "current_tail_offset%3#0",
        "current_tail_offset%3#0 (copy)",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%4#0",
        "current_tail_offset%3#0 (copy)"
      ]
    },
    "719": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%4#0",
        "as_bytes%8#0"
      ]
    },
    "720": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "offset_as_uint16%3#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%4#0",
        "offset_as_uint16%3#0"
      ]
    },
    "723": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "724": {
      "op": "dig 12",
      "defined_out": [
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%3#0 (copy)",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%3#0 (copy)"
      ]
    },
    "726": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%3#0",
        "data_length%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%5#0",
        "data_length%3#0"
      ]
    },
    "727": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%5#0",
        "data_length%3#0",
        "current_tail_offset%3#0"
      ]
    },
    "729": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%4#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%5#0",
        "current_tail_offset%4#0"
      ]
    },
    "730": {
      "op": "itob",
      "defined_out": [
        "as_bytes%9#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%5#0",
        "as_bytes%9#0"
      ]
    },
    "731": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "offset_as_uint16%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%5#0",
        "offset_as_uint16%4#0"
      ]
    },
    "734": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "735": {
      "op": "uncover 9",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%3#0"
      ]
    },
    "737": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "738": {
      "op": "uncover 8",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%4#0"
      ]
    },
    "740": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "741": {
      "op": "uncover 7",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%5#0"
      ]
    },
    "743": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "744": {
      "op": "uncover 6",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%6#0"
      ]
    },
    "746": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "747": {
      "op": "uncover 5",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%7#0"
      ]
    },
    "749": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "750": {
      "op": "uncover 4",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%8#0"
      ]
    },
    "752": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "753": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%12#0",
        "val_as_bytes%9#0"
      ]
    },
    "755": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "756": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%13#0",
        "val_as_bytes%10#0"
      ]
    },
    "758": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%11#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%11#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "759": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%11#0"
      ]
    },
    "760": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%15#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "761": {
      "op": "uncover 5",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%15#0",
        "encoded_value%0#0"
      ]
    },
    "763": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "764": {
      "op": "uncover 4",
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%16#0",
        "encoded_value%1#0"
      ]
    },
    "766": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%17#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "767": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%17#0",
        "encoded_value%2#0"
      ]
    },
    "769": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%18#0",
        "encoded_value%3#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%18#0"
      ]
    },
    "770": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%18#0",
        "encoded_value%3#0"
      ]
    },
    "772": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "773": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_value%4#0"
      ]
    },
    "774": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%20#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%20#0"
      ]
    },
    "775": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%20#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%20#0",
        "0x151f7c75"
      ]
    },
    "776": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "777": {
      "op": "concat",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "778": {
      "op": "log",
      "stack_out": []
    },
    "779": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "780": {
      "op": "return",
      "stack_out": []
    },
    "781": {
      "block": "main_getVotingPower_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "783": {
      "op": "!",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "784": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "785": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "787": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "788": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "791": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "794": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.getVotingPower",
      "op": "callsub getVotingPower",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "797": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "798": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "799": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "800": {
      "op": "concat",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "801": {
      "op": "log",
      "stack_out": []
    },
    "802": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "803": {
      "op": "return",
      "stack_out": []
    },
    "804": {
      "block": "main_resumeGovernance_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "806": {
      "op": "!",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "807": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "808": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "810": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "811": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.resumeGovernance",
      "op": "callsub resumeGovernance"
    },
    "814": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "815": {
      "op": "return",
      "stack_out": []
    },
    "816": {
      "block": "main_pauseGovernance_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "818": {
      "op": "!",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "819": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "820": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "822": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "823": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.pauseGovernance",
      "op": "callsub pauseGovernance"
    },
    "826": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "827": {
      "op": "return",
      "stack_out": []
    },
    "828": {
      "block": "main_updateGovernanceParameters_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "830": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "831": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "832": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "834": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "835": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%13#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "838": {
      "op": "btoi",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "839": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%14#0",
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "842": {
      "op": "btoi",
      "defined_out": [
        "tmp%65#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%66#0"
      ]
    },
    "843": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%15#0",
        "tmp%65#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%66#0",
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "846": {
      "op": "btoi",
      "defined_out": [
        "tmp%65#0",
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%66#0",
        "tmp%67#0"
      ]
    },
    "847": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.updateGovernanceParameters",
      "op": "callsub updateGovernanceParameters",
      "stack_out": []
    },
    "850": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "851": {
      "op": "return",
      "stack_out": []
    },
    "852": {
      "block": "main_updateVotingPower_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "854": {
      "op": "!",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "855": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "856": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "858": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "859": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "862": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "865": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%12#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "868": {
      "op": "btoi",
      "defined_out": [
        "tmp%59#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "tmp%60#0"
      ]
    },
    "869": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.updateVotingPower",
      "op": "callsub updateVotingPower",
      "stack_out": []
    },
    "872": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "873": {
      "op": "return",
      "stack_out": []
    },
    "874": {
      "block": "main_delegateVoting_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "876": {
      "op": "!",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "877": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "878": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "880": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "881": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "884": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "887": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.delegateVoting",
      "op": "callsub delegateVoting",
      "stack_out": []
    },
    "890": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "891": {
      "op": "return",
      "stack_out": []
    },
    "892": {
      "block": "main_cancelProposal_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "894": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "895": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "896": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "898": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "899": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%11#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "902": {
      "op": "btoi",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "903": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.cancelProposal",
      "op": "callsub cancelProposal",
      "stack_out": []
    },
    "906": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "907": {
      "op": "return",
      "stack_out": []
    },
    "908": {
      "block": "main_executeProposal_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "910": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "911": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "912": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "914": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "915": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "918": {
      "op": "btoi",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "919": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.executeProposal",
      "op": "callsub executeProposal",
      "stack_out": []
    },
    "922": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "923": {
      "op": "return",
      "stack_out": []
    },
    "924": {
      "block": "main_finalizeProposal_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "926": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "927": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "928": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "930": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "931": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "934": {
      "op": "btoi",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "935": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.finalizeProposal",
      "op": "callsub finalizeProposal",
      "stack_out": []
    },
    "938": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "939": {
      "op": "return",
      "stack_out": []
    },
    "940": {
      "block": "main_vote_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "942": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "943": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "944": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "946": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "947": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "950": {
      "op": "btoi",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "951": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%8#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "954": {
      "op": "btoi",
      "defined_out": [
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "955": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.vote",
      "op": "callsub vote",
      "stack_out": []
    },
    "958": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "959": {
      "op": "return",
      "stack_out": []
    },
    "960": {
      "block": "main_createProposal_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "962": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "963": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "964": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "966": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "967": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "970": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "973": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "976": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%18#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%20#0"
      ]
    },
    "979": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%6#0",
        "tmp%18#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%20#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "982": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "983": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "986": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%23#0"
      ]
    },
    "989": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "992": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%23#0",
        "tmp%25#0"
      ]
    },
    "995": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.createProposal",
      "op": "callsub createProposal",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "998": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "999": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1000": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1001": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1002": {
      "op": "log",
      "stack_out": []
    },
    "1003": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1004": {
      "op": "return",
      "stack_out": []
    },
    "1005": {
      "block": "main_initialize_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1007": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1008": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1009": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1011": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1012": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1015": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1016": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1019": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1020": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1023": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1024": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "1027": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1028": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "1031": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "1032": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "1035": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "1036": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.initialize",
      "op": "callsub initialize",
      "stack_out": []
    },
    "1039": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1040": {
      "op": "return",
      "stack_out": []
    },
    "1041": {
      "block": "main_bare_routing@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "1043": {
      "op": "bnz main_after_if_else@26",
      "stack_out": []
    },
    "1046": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "1048": {
      "op": "!",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "1049": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1050": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1051": {
      "op": "return",
      "stack_out": []
    },
    "1052": {
      "subroutine": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.initialize",
      "params": {
        "governanceTokenId#0": "uint64",
        "votingDuration#0": "uint64",
        "quorumThreshold#0": "uint64",
        "proposalThreshold#0": "uint64",
        "executionDelay#0": "uint64",
        "gracePeriod#0": "uint64"
      },
      "block": "initialize",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "1055": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1056": {
      "op": "bytec_1 // \"governanceActive\"",
      "defined_out": [
        "\"governanceActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"governanceActive\""
      ]
    },
    "1057": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1058": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1059": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1060": {
      "op": "assert",
      "stack_out": []
    },
    "1061": {
      "op": "pushbytes \"governanceToken\"",
      "defined_out": [
        "\"governanceToken\""
      ],
      "stack_out": [
        "\"governanceToken\""
      ]
    },
    "1078": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"governanceToken\"",
        "governanceTokenId#0 (copy)"
      ],
      "stack_out": [
        "\"governanceToken\"",
        "governanceTokenId#0 (copy)"
      ]
    },
    "1080": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1081": {
      "op": "bytec 9 // \"votingDuration\"",
      "defined_out": [
        "\"votingDuration\""
      ],
      "stack_out": [
        "\"votingDuration\""
      ]
    },
    "1083": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"votingDuration\"",
        "votingDuration#0 (copy)"
      ],
      "stack_out": [
        "\"votingDuration\"",
        "votingDuration#0 (copy)"
      ]
    },
    "1085": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1086": {
      "op": "bytec 10 // \"quorumThreshold\"",
      "defined_out": [
        "\"quorumThreshold\""
      ],
      "stack_out": [
        "\"quorumThreshold\""
      ]
    },
    "1088": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"quorumThreshold\"",
        "quorumThreshold#0 (copy)"
      ],
      "stack_out": [
        "\"quorumThreshold\"",
        "quorumThreshold#0 (copy)"
      ]
    },
    "1090": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1091": {
      "op": "bytec 11 // \"proposalThreshold\"",
      "defined_out": [
        "\"proposalThreshold\""
      ],
      "stack_out": [
        "\"proposalThreshold\""
      ]
    },
    "1093": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"proposalThreshold\"",
        "proposalThreshold#0 (copy)"
      ],
      "stack_out": [
        "\"proposalThreshold\"",
        "proposalThreshold#0 (copy)"
      ]
    },
    "1095": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1096": {
      "op": "bytec 14 // \"executionDelay\"",
      "defined_out": [
        "\"executionDelay\""
      ],
      "stack_out": [
        "\"executionDelay\""
      ]
    },
    "1098": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"executionDelay\"",
        "executionDelay#0 (copy)"
      ],
      "stack_out": [
        "\"executionDelay\"",
        "executionDelay#0 (copy)"
      ]
    },
    "1100": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1101": {
      "op": "bytec 16 // \"gracePeriod\"",
      "defined_out": [
        "\"gracePeriod\""
      ],
      "stack_out": [
        "\"gracePeriod\""
      ]
    },
    "1103": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"gracePeriod\"",
        "gracePeriod#0 (copy)"
      ],
      "stack_out": [
        "\"gracePeriod\"",
        "gracePeriod#0 (copy)"
      ]
    },
    "1105": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1106": {
      "op": "bytec 12 // \"proposalCount\"",
      "defined_out": [
        "\"proposalCount\""
      ],
      "stack_out": [
        "\"proposalCount\""
      ]
    },
    "1108": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"proposalCount\"",
        "0"
      ]
    },
    "1109": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1110": {
      "op": "bytec_2 // \"totalVotingPower\"",
      "defined_out": [
        "\"totalVotingPower\""
      ],
      "stack_out": [
        "\"totalVotingPower\""
      ]
    },
    "1111": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalVotingPower\"",
        "0"
      ]
    },
    "1112": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1113": {
      "op": "bytec_1 // \"governanceActive\"",
      "stack_out": [
        "\"governanceActive\""
      ]
    },
    "1114": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"governanceActive\"",
        "1"
      ],
      "stack_out": [
        "\"governanceActive\"",
        "1"
      ]
    },
    "1115": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1116": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "1118": {
      "op": "txn Sender",
      "defined_out": [
        "\"admin\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"admin\"",
        "new_state_value%0#0"
      ]
    },
    "1120": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1121": {
      "retsub": true,
      "op": "retsub"
    },
    "1122": {
      "subroutine": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.createProposal",
      "params": {
        "title#0": "bytes",
        "description#0": "bytes",
        "proposalType#0": "uint64",
        "targetContract#0": "bytes",
        "executionData#0": "bytes"
      },
      "block": "createProposal",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "1125": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1126": {
      "op": "bytec_1 // \"governanceActive\"",
      "defined_out": [
        "\"governanceActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"governanceActive\""
      ]
    },
    "1127": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1128": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1129": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "1130": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1131": {
      "op": "assert",
      "stack_out": []
    },
    "1132": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1134": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.getVotingPower",
      "op": "callsub getVotingPower",
      "defined_out": [
        "proposerVotingPower#0"
      ],
      "stack_out": [
        "proposerVotingPower#0"
      ]
    },
    "1137": {
      "op": "intc_0 // 0",
      "stack_out": [
        "proposerVotingPower#0",
        "0"
      ]
    },
    "1138": {
      "op": "bytec 11 // \"proposalThreshold\"",
      "defined_out": [
        "\"proposalThreshold\"",
        "0",
        "proposerVotingPower#0"
      ],
      "stack_out": [
        "proposerVotingPower#0",
        "0",
        "\"proposalThreshold\""
      ]
    },
    "1140": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "proposerVotingPower#0"
      ],
      "stack_out": [
        "proposerVotingPower#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1141": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "proposerVotingPower#0",
        "maybe_value%1#0"
      ]
    },
    "1142": {
      "op": ">=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1143": {
      "op": "assert",
      "stack_out": []
    },
    "1144": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1145": {
      "op": "bytec 12 // \"proposalCount\"",
      "defined_out": [
        "\"proposalCount\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"proposalCount\""
      ]
    },
    "1147": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1148": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1149": {
      "op": "intc_1 // 1",
      "stack_out": [
        "maybe_value%2#0",
        "1"
      ]
    },
    "1150": {
      "op": "+",
      "defined_out": [
        "proposalId#0"
      ],
      "stack_out": [
        "proposalId#0"
      ]
    },
    "1151": {
      "op": "bytec 12 // \"proposalCount\"",
      "stack_out": [
        "proposalId#0",
        "\"proposalCount\""
      ]
    },
    "1153": {
      "op": "dig 1",
      "defined_out": [
        "\"proposalCount\"",
        "proposalId#0",
        "proposalId#0 (copy)"
      ],
      "stack_out": [
        "proposalId#0",
        "\"proposalCount\"",
        "proposalId#0 (copy)"
      ]
    },
    "1155": {
      "op": "app_global_put",
      "stack_out": [
        "proposalId#0"
      ]
    },
    "1156": {
      "op": "dup",
      "stack_out": [
        "proposalId#0",
        "proposalId#0 (copy)"
      ]
    },
    "1157": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "proposalId#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0"
      ]
    },
    "1158": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "proposalId#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1159": {
      "op": "bytec 17 // \"_proposer\"",
      "defined_out": [
        "\"_proposer\"",
        "a#0",
        "a#0 (copy)",
        "proposalId#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "a#0 (copy)",
        "\"_proposer\""
      ]
    },
    "1161": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "proposalId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1162": {
      "op": "txn Sender",
      "defined_out": [
        "a#0",
        "new_box_value%0#0",
        "proposalId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%0#0"
      ]
    },
    "1164": {
      "op": "dig 1",
      "defined_out": [
        "a#0",
        "new_box_value%0#0",
        "proposalId#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%0#0",
        "tmp%0#2 (copy)"
      ]
    },
    "1166": {
      "op": "box_del",
      "defined_out": [
        "a#0",
        "new_box_value%0#0",
        "proposalId#0",
        "tmp%0#2",
        "{box_del}"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%0#0",
        "{box_del}"
      ]
    },
    "1167": {
      "op": "pop",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%0#0"
      ]
    },
    "1168": {
      "op": "box_put",
      "stack_out": [
        "proposalId#0",
        "a#0"
      ]
    },
    "1169": {
      "op": "dup",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1170": {
      "op": "bytec 18 // \"_title\"",
      "defined_out": [
        "\"_title\"",
        "a#0",
        "a#0 (copy)",
        "proposalId#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "a#0 (copy)",
        "\"_title\""
      ]
    },
    "1172": {
      "op": "concat",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1173": {
      "op": "dup",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1174": {
      "op": "box_del",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "{box_del}"
      ]
    },
    "1175": {
      "op": "pop",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1176": {
      "op": "frame_dig -5",
      "defined_out": [
        "a#0",
        "proposalId#0",
        "title#0 (copy)",
        "tmp%0#2"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "title#0 (copy)"
      ]
    },
    "1178": {
      "op": "box_put",
      "stack_out": [
        "proposalId#0",
        "a#0"
      ]
    },
    "1179": {
      "op": "dup",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1180": {
      "op": "bytec 19 // \"_description\"",
      "defined_out": [
        "\"_description\"",
        "a#0",
        "a#0 (copy)",
        "proposalId#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "a#0 (copy)",
        "\"_description\""
      ]
    },
    "1182": {
      "op": "concat",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1183": {
      "op": "dup",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1184": {
      "op": "box_del",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "{box_del}"
      ]
    },
    "1185": {
      "op": "pop",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1186": {
      "op": "frame_dig -4",
      "defined_out": [
        "a#0",
        "description#0 (copy)",
        "proposalId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "description#0 (copy)"
      ]
    },
    "1188": {
      "op": "box_put",
      "stack_out": [
        "proposalId#0",
        "a#0"
      ]
    },
    "1189": {
      "op": "dup",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1190": {
      "op": "bytec 20 // \"_proposalType\"",
      "defined_out": [
        "\"_proposalType\"",
        "a#0",
        "a#0 (copy)",
        "proposalId#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "a#0 (copy)",
        "\"_proposalType\""
      ]
    },
    "1192": {
      "op": "concat",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1193": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0",
        "proposalId#0",
        "proposalType#0 (copy)",
        "tmp%0#2"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "proposalType#0 (copy)"
      ]
    },
    "1195": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "new_box_value%1#0",
        "proposalId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%1#0"
      ]
    },
    "1196": {
      "op": "box_put",
      "stack_out": [
        "proposalId#0",
        "a#0"
      ]
    },
    "1197": {
      "op": "dup",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1198": {
      "op": "bytec 21 // \"_targetContract\"",
      "defined_out": [
        "\"_targetContract\"",
        "a#0",
        "a#0 (copy)",
        "proposalId#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "a#0 (copy)",
        "\"_targetContract\""
      ]
    },
    "1200": {
      "op": "concat",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1201": {
      "op": "dup",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1202": {
      "op": "box_del",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "{box_del}"
      ]
    },
    "1203": {
      "op": "pop",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1204": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "proposalId#0",
        "targetContract#0 (copy)",
        "tmp%0#2"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "targetContract#0 (copy)"
      ]
    },
    "1206": {
      "op": "box_put",
      "stack_out": [
        "proposalId#0",
        "a#0"
      ]
    },
    "1207": {
      "op": "dup",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1208": {
      "op": "bytec 22 // \"_executionData\"",
      "defined_out": [
        "\"_executionData\"",
        "a#0",
        "a#0 (copy)",
        "proposalId#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "a#0 (copy)",
        "\"_executionData\""
      ]
    },
    "1210": {
      "op": "concat",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1211": {
      "op": "dup",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1212": {
      "op": "box_del",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "{box_del}"
      ]
    },
    "1213": {
      "op": "pop",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1214": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#0",
        "executionData#0 (copy)",
        "proposalId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "executionData#0 (copy)"
      ]
    },
    "1216": {
      "op": "box_put",
      "stack_out": [
        "proposalId#0",
        "a#0"
      ]
    },
    "1217": {
      "op": "dup",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1218": {
      "op": "bytec 23 // \"_votingStartTime\"",
      "defined_out": [
        "\"_votingStartTime\"",
        "a#0",
        "a#0 (copy)",
        "proposalId#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "a#0 (copy)",
        "\"_votingStartTime\""
      ]
    },
    "1220": {
      "op": "concat",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1221": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "a#0",
        "new_box_value%2#0",
        "proposalId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%2#0"
      ]
    },
    "1223": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "new_box_value%3#0",
        "proposalId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%3#0"
      ]
    },
    "1224": {
      "op": "box_put",
      "stack_out": [
        "proposalId#0",
        "a#0"
      ]
    },
    "1225": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "a#0",
        "proposalId#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%17#0"
      ]
    },
    "1227": {
      "op": "intc_0 // 0",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%17#0",
        "0"
      ]
    },
    "1228": {
      "op": "bytec 9 // \"votingDuration\"",
      "defined_out": [
        "\"votingDuration\"",
        "0",
        "a#0",
        "proposalId#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%17#0",
        "0",
        "\"votingDuration\""
      ]
    },
    "1230": {
      "op": "app_global_get_ex",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "proposalId#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1231": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%17#0",
        "maybe_value%3#0"
      ]
    },
    "1232": {
      "op": "dig 2",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "a#0 (copy)"
      ]
    },
    "1234": {
      "op": "bytec 5 // \"_votingEndTime\"",
      "defined_out": [
        "\"_votingEndTime\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%3#0",
        "proposalId#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "a#0 (copy)",
        "\"_votingEndTime\""
      ]
    },
    "1236": {
      "op": "concat",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%17#0",
        "maybe_value%3#0",
        "tmp%0#2"
      ]
    },
    "1237": {
      "op": "cover 2",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "tmp%17#0",
        "maybe_value%3#0"
      ]
    },
    "1239": {
      "op": "+",
      "defined_out": [
        "a#0",
        "new_box_value%4#0",
        "proposalId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%4#0"
      ]
    },
    "1240": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "new_box_value%5#0",
        "proposalId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%5#0"
      ]
    },
    "1241": {
      "op": "box_put",
      "stack_out": [
        "proposalId#0",
        "a#0"
      ]
    },
    "1242": {
      "op": "dup",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1243": {
      "op": "bytec 6 // \"_forVotes\"",
      "defined_out": [
        "\"_forVotes\"",
        "a#0",
        "a#0 (copy)",
        "proposalId#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "a#0 (copy)",
        "\"_forVotes\""
      ]
    },
    "1245": {
      "op": "concat",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1246": {
      "op": "intc_0 // 0",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "0"
      ]
    },
    "1247": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "new_box_value%6#0",
        "proposalId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%6#0"
      ]
    },
    "1248": {
      "op": "swap",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "tmp%0#2"
      ]
    },
    "1249": {
      "op": "dig 1",
      "defined_out": [
        "a#0",
        "new_box_value%6#0",
        "new_box_value%6#0 (copy)",
        "proposalId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "tmp%0#2",
        "new_box_value%6#0 (copy)"
      ]
    },
    "1251": {
      "op": "box_put",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0"
      ]
    },
    "1252": {
      "op": "dig 1",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "a#0 (copy)"
      ]
    },
    "1254": {
      "op": "bytec 7 // \"_againstVotes\"",
      "defined_out": [
        "\"_againstVotes\"",
        "a#0",
        "a#0 (copy)",
        "new_box_value%6#0",
        "proposalId#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "a#0 (copy)",
        "\"_againstVotes\""
      ]
    },
    "1256": {
      "op": "concat",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "tmp%0#2"
      ]
    },
    "1257": {
      "op": "dig 1",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "tmp%0#2",
        "new_box_value%6#0 (copy)"
      ]
    },
    "1259": {
      "op": "box_put",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0"
      ]
    },
    "1260": {
      "op": "dig 1",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "a#0 (copy)"
      ]
    },
    "1262": {
      "op": "bytec 8 // \"_abstainVotes\"",
      "defined_out": [
        "\"_abstainVotes\"",
        "a#0",
        "a#0 (copy)",
        "new_box_value%6#0",
        "proposalId#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "a#0 (copy)",
        "\"_abstainVotes\""
      ]
    },
    "1264": {
      "op": "concat",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "tmp%0#2"
      ]
    },
    "1265": {
      "op": "dig 1",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "tmp%0#2",
        "new_box_value%6#0 (copy)"
      ]
    },
    "1267": {
      "op": "box_put",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0"
      ]
    },
    "1268": {
      "op": "dig 1",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "a#0 (copy)"
      ]
    },
    "1270": {
      "op": "bytec_3 // \"_status\"",
      "defined_out": [
        "\"_status\"",
        "a#0",
        "a#0 (copy)",
        "new_box_value%6#0",
        "proposalId#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "a#0 (copy)",
        "\"_status\""
      ]
    },
    "1271": {
      "op": "concat",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "tmp%0#2"
      ]
    },
    "1272": {
      "op": "intc_1 // 1",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "tmp%0#2",
        "1"
      ]
    },
    "1273": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "new_box_value%6#0",
        "new_box_value%9#0",
        "proposalId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "tmp%0#2",
        "new_box_value%9#0"
      ]
    },
    "1274": {
      "op": "box_put",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0"
      ]
    },
    "1275": {
      "op": "intc_0 // 0",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "0"
      ]
    },
    "1276": {
      "op": "bytec 10 // \"quorumThreshold\"",
      "defined_out": [
        "\"quorumThreshold\"",
        "0",
        "a#0",
        "new_box_value%6#0",
        "proposalId#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "0",
        "\"quorumThreshold\""
      ]
    },
    "1278": {
      "op": "app_global_get_ex",
      "defined_out": [
        "a#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "new_box_value%6#0",
        "proposalId#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1279": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "maybe_value%4#0"
      ]
    },
    "1280": {
      "op": "dig 2",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "maybe_value%4#0",
        "a#0 (copy)"
      ]
    },
    "1282": {
      "op": "bytec 13 // \"_quorumRequired\"",
      "defined_out": [
        "\"_quorumRequired\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%4#0",
        "new_box_value%6#0",
        "proposalId#0"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "maybe_value%4#0",
        "a#0 (copy)",
        "\"_quorumRequired\""
      ]
    },
    "1284": {
      "op": "concat",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "maybe_value%4#0",
        "tmp%0#2"
      ]
    },
    "1285": {
      "op": "swap",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "tmp%0#2",
        "maybe_value%4#0"
      ]
    },
    "1286": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "new_box_value%10#0",
        "new_box_value%6#0",
        "proposalId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0",
        "tmp%0#2",
        "new_box_value%10#0"
      ]
    },
    "1287": {
      "op": "box_put",
      "stack_out": [
        "proposalId#0",
        "a#0",
        "new_box_value%6#0"
      ]
    },
    "1288": {
      "op": "swap",
      "stack_out": [
        "proposalId#0",
        "new_box_value%6#0",
        "a#0"
      ]
    },
    "1289": {
      "op": "bytec 15 // \"_executed\"",
      "defined_out": [
        "\"_executed\"",
        "a#0",
        "new_box_value%6#0",
        "proposalId#0"
      ],
      "stack_out": [
        "proposalId#0",
        "new_box_value%6#0",
        "a#0",
        "\"_executed\""
      ]
    },
    "1291": {
      "op": "concat",
      "stack_out": [
        "proposalId#0",
        "new_box_value%6#0",
        "tmp%0#2"
      ]
    },
    "1292": {
      "op": "swap",
      "stack_out": [
        "proposalId#0",
        "tmp%0#2",
        "new_box_value%6#0"
      ]
    },
    "1293": {
      "op": "box_put",
      "stack_out": [
        "proposalId#0"
      ]
    },
    "1294": {
      "retsub": true,
      "op": "retsub"
    },
    "1295": {
      "subroutine": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.vote",
      "params": {
        "proposalId#0": "uint64",
        "support#0": "uint64"
      },
      "block": "vote",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1298": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1299": {
      "op": "bytec_1 // \"governanceActive\"",
      "defined_out": [
        "\"governanceActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"governanceActive\""
      ]
    },
    "1300": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1301": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1302": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "1303": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1304": {
      "op": "assert",
      "stack_out": []
    },
    "1305": {
      "op": "frame_dig -1",
      "defined_out": [
        "support#0 (copy)"
      ],
      "stack_out": [
        "support#0 (copy)"
      ]
    },
    "1307": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "support#0 (copy)"
      ],
      "stack_out": [
        "support#0 (copy)",
        "2"
      ]
    },
    "1308": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1309": {
      "op": "assert",
      "stack_out": []
    },
    "1310": {
      "op": "frame_dig -2",
      "defined_out": [
        "proposalId#0 (copy)"
      ],
      "stack_out": [
        "proposalId#0 (copy)"
      ]
    },
    "1312": {
      "op": "itob",
      "defined_out": [
        "a#3"
      ],
      "stack_out": [
        "a#3"
      ]
    },
    "1313": {
      "op": "dupn 2",
      "defined_out": [
        "a#3",
        "a#3 (copy)"
      ],
      "stack_out": [
        "a#3",
        "a#3",
        "a#3 (copy)"
      ]
    },
    "1315": {
      "op": "bytec_3 // \"_status\"",
      "defined_out": [
        "\"_status\"",
        "a#3",
        "a#3 (copy)"
      ],
      "stack_out": [
        "a#3",
        "a#3",
        "a#3 (copy)",
        "\"_status\""
      ]
    },
    "1316": {
      "op": "concat",
      "defined_out": [
        "a#3",
        "tmp%0#8"
      ],
      "stack_out": [
        "a#3",
        "a#3",
        "tmp%0#8"
      ]
    },
    "1317": {
      "op": "box_get",
      "defined_out": [
        "a#3",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "a#3",
        "a#3",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1318": {
      "op": "swap",
      "stack_out": [
        "a#3",
        "a#3",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "1319": {
      "op": "btoi",
      "defined_out": [
        "a#3",
        "maybe_exists%1#0",
        "status#0"
      ],
      "stack_out": [
        "a#3",
        "a#3",
        "maybe_exists%1#0",
        "status#0"
      ]
    },
    "1320": {
      "op": "swap",
      "stack_out": [
        "a#3",
        "a#3",
        "status#0",
        "maybe_exists%1#0"
      ]
    },
    "1321": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#3",
        "a#3",
        "status#0"
      ]
    },
    "1322": {
      "op": "intc_1 // 1",
      "stack_out": [
        "a#3",
        "a#3",
        "status#0",
        "1"
      ]
    },
    "1323": {
      "op": "==",
      "defined_out": [
        "a#3",
        "tmp%4#0"
      ],
      "stack_out": [
        "a#3",
        "a#3",
        "tmp%4#0"
      ]
    },
    "1324": {
      "op": "assert",
      "stack_out": [
        "a#3",
        "a#3"
      ]
    },
    "1325": {
      "op": "dup",
      "stack_out": [
        "a#3",
        "a#3",
        "a#3 (copy)"
      ]
    },
    "1326": {
      "op": "bytec 5 // \"_votingEndTime\"",
      "defined_out": [
        "\"_votingEndTime\"",
        "a#3",
        "a#3 (copy)"
      ],
      "stack_out": [
        "a#3",
        "a#3",
        "a#3 (copy)",
        "\"_votingEndTime\""
      ]
    },
    "1328": {
      "op": "concat",
      "stack_out": [
        "a#3",
        "a#3",
        "tmp%0#8"
      ]
    },
    "1329": {
      "op": "box_get",
      "defined_out": [
        "a#3",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "a#3",
        "a#3",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1330": {
      "op": "swap",
      "stack_out": [
        "a#3",
        "a#3",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "1331": {
      "op": "btoi",
      "defined_out": [
        "a#3",
        "maybe_exists%2#0",
        "votingEndTime#0"
      ],
      "stack_out": [
        "a#3",
        "a#3",
        "maybe_exists%2#0",
        "votingEndTime#0"
      ]
    },
    "1332": {
      "op": "swap",
      "stack_out": [
        "a#3",
        "a#3",
        "votingEndTime#0",
        "maybe_exists%2#0"
      ]
    },
    "1333": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#3",
        "a#3",
        "votingEndTime#0"
      ]
    },
    "1334": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "a#3",
        "tmp%7#0",
        "votingEndTime#0"
      ],
      "stack_out": [
        "a#3",
        "a#3",
        "votingEndTime#0",
        "tmp%7#0"
      ]
    },
    "1336": {
      "op": ">=",
      "defined_out": [
        "a#3",
        "tmp%8#0"
      ],
      "stack_out": [
        "a#3",
        "a#3",
        "tmp%8#0"
      ]
    },
    "1337": {
      "op": "assert",
      "stack_out": [
        "a#3",
        "a#3"
      ]
    },
    "1338": {
      "op": "txn Sender",
      "defined_out": [
        "a#3",
        "voter#0"
      ],
      "stack_out": [
        "a#3",
        "a#3",
        "voter#0"
      ]
    },
    "1340": {
      "op": "dup",
      "defined_out": [
        "a#3",
        "voter#0",
        "voter#0 (copy)"
      ],
      "stack_out": [
        "a#3",
        "a#3",
        "voter#0",
        "voter#0 (copy)"
      ]
    },
    "1341": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.getVotingPower",
      "op": "callsub getVotingPower",
      "defined_out": [
        "a#3",
        "voter#0",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "a#3",
        "voter#0",
        "votingPower#0"
      ]
    },
    "1344": {
      "op": "dup",
      "stack_out": [
        "a#3",
        "a#3",
        "voter#0",
        "votingPower#0",
        "votingPower#0"
      ]
    },
    "1345": {
      "op": "cover 3",
      "defined_out": [
        "a#3",
        "voter#0",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "a#3",
        "voter#0",
        "votingPower#0"
      ]
    },
    "1347": {
      "op": "assert",
      "stack_out": [
        "a#3",
        "votingPower#0",
        "a#3",
        "voter#0"
      ]
    },
    "1348": {
      "op": "swap",
      "stack_out": [
        "a#3",
        "votingPower#0",
        "voter#0",
        "a#3"
      ]
    },
    "1349": {
      "op": "concat",
      "stack_out": [
        "a#3",
        "votingPower#0",
        "tmp%0#8"
      ]
    },
    "1350": {
      "op": "dup",
      "defined_out": [
        "a#3",
        "tmp%0#8",
        "tmp%0#8 (copy)",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "tmp%0#8",
        "tmp%0#8 (copy)"
      ]
    },
    "1351": {
      "op": "box_len",
      "defined_out": [
        "a#3",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#8",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "tmp%0#8",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1352": {
      "op": "bury 1",
      "stack_out": [
        "a#3",
        "votingPower#0",
        "tmp%0#8",
        "maybe_exists%3#0"
      ]
    },
    "1354": {
      "op": "!",
      "defined_out": [
        "a#3",
        "tmp%0#8",
        "tmp%11#0",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "tmp%0#8",
        "tmp%11#0"
      ]
    },
    "1355": {
      "error": "Already voted on this proposal",
      "op": "assert // Already voted on this proposal",
      "stack_out": [
        "a#3",
        "votingPower#0",
        "tmp%0#8"
      ]
    },
    "1356": {
      "op": "frame_dig -1",
      "stack_out": [
        "a#3",
        "votingPower#0",
        "tmp%0#8",
        "support#0 (copy)"
      ]
    },
    "1358": {
      "op": "itob",
      "defined_out": [
        "a#3",
        "new_box_value%0#0",
        "tmp%0#8",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "tmp%0#8",
        "new_box_value%0#0"
      ]
    },
    "1359": {
      "op": "box_put",
      "stack_out": [
        "a#3",
        "votingPower#0"
      ]
    },
    "1360": {
      "op": "frame_dig -1",
      "stack_out": [
        "a#3",
        "votingPower#0",
        "support#0 (copy)"
      ]
    },
    "1362": {
      "op": "bnz vote_else_body@2",
      "stack_out": [
        "a#3",
        "votingPower#0"
      ]
    },
    "1365": {
      "op": "frame_dig 0",
      "stack_out": [
        "a#3",
        "votingPower#0",
        "a#3"
      ]
    },
    "1367": {
      "op": "bytec 7 // \"_againstVotes\"",
      "defined_out": [
        "\"_againstVotes\"",
        "a#3",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "a#3",
        "\"_againstVotes\""
      ]
    },
    "1369": {
      "op": "concat",
      "defined_out": [
        "a#3",
        "againstVotesKey#0",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "againstVotesKey#0"
      ]
    },
    "1370": {
      "op": "dup",
      "defined_out": [
        "a#3",
        "againstVotesKey#0",
        "againstVotesKey#0 (copy)",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "againstVotesKey#0",
        "againstVotesKey#0 (copy)"
      ]
    },
    "1371": {
      "op": "box_get",
      "defined_out": [
        "a#3",
        "againstVotesKey#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "againstVotesKey#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1372": {
      "op": "swap",
      "stack_out": [
        "a#3",
        "votingPower#0",
        "againstVotesKey#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ]
    },
    "1373": {
      "op": "btoi",
      "defined_out": [
        "a#3",
        "againstVotesKey#0",
        "maybe_exists%4#0",
        "maybe_value_converted%2#0",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "againstVotesKey#0",
        "maybe_exists%4#0",
        "maybe_value_converted%2#0"
      ]
    },
    "1374": {
      "op": "swap",
      "stack_out": [
        "a#3",
        "votingPower#0",
        "againstVotesKey#0",
        "maybe_value_converted%2#0",
        "maybe_exists%4#0"
      ]
    },
    "1375": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#3",
        "votingPower#0",
        "againstVotesKey#0",
        "maybe_value_converted%2#0"
      ]
    },
    "1376": {
      "op": "frame_dig 1",
      "stack_out": [
        "a#3",
        "votingPower#0",
        "againstVotesKey#0",
        "maybe_value_converted%2#0",
        "votingPower#0"
      ]
    },
    "1378": {
      "op": "+",
      "defined_out": [
        "a#3",
        "againstVotesKey#0",
        "new_box_value%1#0",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "againstVotesKey#0",
        "new_box_value%1#0"
      ]
    },
    "1379": {
      "op": "itob",
      "defined_out": [
        "a#3",
        "againstVotesKey#0",
        "new_box_value%2#0",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "againstVotesKey#0",
        "new_box_value%2#0"
      ]
    },
    "1380": {
      "op": "box_put",
      "stack_out": [
        "a#3",
        "votingPower#0"
      ]
    },
    "1381": {
      "retsub": true,
      "op": "retsub"
    },
    "1382": {
      "block": "vote_else_body@2",
      "stack_in": [
        "a#3",
        "votingPower#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "support#0 (copy)"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "support#0 (copy)"
      ]
    },
    "1384": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "support#0 (copy)"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "support#0 (copy)",
        "1"
      ]
    },
    "1385": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "tmp%15#0"
      ]
    },
    "1386": {
      "op": "bz vote_else_body@4",
      "stack_out": [
        "a#3",
        "votingPower#0"
      ]
    },
    "1389": {
      "op": "frame_dig 0",
      "defined_out": [
        "a#3"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "a#3"
      ]
    },
    "1391": {
      "op": "bytec 6 // \"_forVotes\"",
      "defined_out": [
        "\"_forVotes\"",
        "a#3"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "a#3",
        "\"_forVotes\""
      ]
    },
    "1393": {
      "op": "concat",
      "defined_out": [
        "a#3",
        "forVotesKey#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "forVotesKey#0"
      ]
    },
    "1394": {
      "op": "dup",
      "defined_out": [
        "a#3",
        "forVotesKey#0",
        "forVotesKey#0 (copy)"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "forVotesKey#0",
        "forVotesKey#0 (copy)"
      ]
    },
    "1395": {
      "op": "box_get",
      "defined_out": [
        "a#3",
        "forVotesKey#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "forVotesKey#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1396": {
      "op": "swap",
      "stack_out": [
        "a#3",
        "votingPower#0",
        "forVotesKey#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ]
    },
    "1397": {
      "op": "btoi",
      "defined_out": [
        "a#3",
        "forVotesKey#0",
        "maybe_exists%5#0",
        "maybe_value_converted%3#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "forVotesKey#0",
        "maybe_exists%5#0",
        "maybe_value_converted%3#0"
      ]
    },
    "1398": {
      "op": "swap",
      "stack_out": [
        "a#3",
        "votingPower#0",
        "forVotesKey#0",
        "maybe_value_converted%3#0",
        "maybe_exists%5#0"
      ]
    },
    "1399": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#3",
        "votingPower#0",
        "forVotesKey#0",
        "maybe_value_converted%3#0"
      ]
    },
    "1400": {
      "op": "frame_dig 1",
      "defined_out": [
        "a#3",
        "forVotesKey#0",
        "maybe_value_converted%3#0",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "forVotesKey#0",
        "maybe_value_converted%3#0",
        "votingPower#0"
      ]
    },
    "1402": {
      "op": "+",
      "defined_out": [
        "a#3",
        "forVotesKey#0",
        "new_box_value%3#0",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "forVotesKey#0",
        "new_box_value%3#0"
      ]
    },
    "1403": {
      "op": "itob",
      "defined_out": [
        "a#3",
        "forVotesKey#0",
        "new_box_value%4#0",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "forVotesKey#0",
        "new_box_value%4#0"
      ]
    },
    "1404": {
      "op": "box_put",
      "stack_out": [
        "a#3",
        "votingPower#0"
      ]
    },
    "1405": {
      "retsub": true,
      "op": "retsub"
    },
    "1406": {
      "block": "vote_else_body@4",
      "stack_in": [
        "a#3",
        "votingPower#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a#3"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "a#3"
      ]
    },
    "1408": {
      "op": "bytec 8 // \"_abstainVotes\"",
      "defined_out": [
        "\"_abstainVotes\"",
        "a#3"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "a#3",
        "\"_abstainVotes\""
      ]
    },
    "1410": {
      "op": "concat",
      "defined_out": [
        "a#3",
        "abstainVotesKey#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "abstainVotesKey#0"
      ]
    },
    "1411": {
      "op": "dup",
      "defined_out": [
        "a#3",
        "abstainVotesKey#0",
        "abstainVotesKey#0 (copy)"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "abstainVotesKey#0",
        "abstainVotesKey#0 (copy)"
      ]
    },
    "1412": {
      "op": "box_get",
      "defined_out": [
        "a#3",
        "abstainVotesKey#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "abstainVotesKey#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1413": {
      "op": "swap",
      "stack_out": [
        "a#3",
        "votingPower#0",
        "abstainVotesKey#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ]
    },
    "1414": {
      "op": "btoi",
      "defined_out": [
        "a#3",
        "abstainVotesKey#0",
        "maybe_exists%6#0",
        "maybe_value_converted%4#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "abstainVotesKey#0",
        "maybe_exists%6#0",
        "maybe_value_converted%4#0"
      ]
    },
    "1415": {
      "op": "swap",
      "stack_out": [
        "a#3",
        "votingPower#0",
        "abstainVotesKey#0",
        "maybe_value_converted%4#0",
        "maybe_exists%6#0"
      ]
    },
    "1416": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#3",
        "votingPower#0",
        "abstainVotesKey#0",
        "maybe_value_converted%4#0"
      ]
    },
    "1417": {
      "op": "frame_dig 1",
      "defined_out": [
        "a#3",
        "abstainVotesKey#0",
        "maybe_value_converted%4#0",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "abstainVotesKey#0",
        "maybe_value_converted%4#0",
        "votingPower#0"
      ]
    },
    "1419": {
      "op": "+",
      "defined_out": [
        "a#3",
        "abstainVotesKey#0",
        "new_box_value%5#0",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "abstainVotesKey#0",
        "new_box_value%5#0"
      ]
    },
    "1420": {
      "op": "itob",
      "defined_out": [
        "a#3",
        "abstainVotesKey#0",
        "new_box_value%6#0",
        "votingPower#0"
      ],
      "stack_out": [
        "a#3",
        "votingPower#0",
        "abstainVotesKey#0",
        "new_box_value%6#0"
      ]
    },
    "1421": {
      "op": "box_put",
      "stack_out": [
        "a#3",
        "votingPower#0"
      ]
    },
    "1422": {
      "retsub": true,
      "op": "retsub"
    },
    "1423": {
      "subroutine": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.finalizeProposal",
      "params": {
        "proposalId#0": "uint64"
      },
      "block": "finalizeProposal",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1426": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposalId#0 (copy)"
      ],
      "stack_out": [
        "proposalId#0 (copy)"
      ]
    },
    "1428": {
      "op": "itob",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "1429": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1430": {
      "op": "bytec_3 // \"_status\"",
      "defined_out": [
        "\"_status\"",
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)",
        "\"_status\""
      ]
    },
    "1431": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "statusKey#0"
      ],
      "stack_out": [
        "a#0",
        "statusKey#0"
      ]
    },
    "1432": {
      "op": "dup",
      "stack_out": [
        "a#0",
        "statusKey#0",
        "statusKey#0"
      ]
    },
    "1433": {
      "op": "cover 2",
      "defined_out": [
        "a#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "a#0",
        "statusKey#0"
      ]
    },
    "1435": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "a#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1436": {
      "op": "swap",
      "stack_out": [
        "statusKey#0",
        "a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1437": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%0#0",
        "status#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "a#0",
        "maybe_exists%0#0",
        "status#0"
      ]
    },
    "1438": {
      "op": "swap",
      "stack_out": [
        "statusKey#0",
        "a#0",
        "status#0",
        "maybe_exists%0#0"
      ]
    },
    "1439": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "statusKey#0",
        "a#0",
        "status#0"
      ]
    },
    "1440": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "a#0",
        "status#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "a#0",
        "status#0",
        "1"
      ]
    },
    "1441": {
      "op": "==",
      "defined_out": [
        "a#0",
        "statusKey#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "statusKey#0",
        "a#0",
        "tmp%1#0"
      ]
    },
    "1442": {
      "op": "assert",
      "stack_out": [
        "statusKey#0",
        "a#0"
      ]
    },
    "1443": {
      "op": "dup",
      "stack_out": [
        "statusKey#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1444": {
      "op": "bytec 5 // \"_votingEndTime\"",
      "defined_out": [
        "\"_votingEndTime\"",
        "a#0",
        "a#0 (copy)",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "a#0",
        "a#0 (copy)",
        "\"_votingEndTime\""
      ]
    },
    "1446": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "statusKey#0",
        "tmp%0#4"
      ],
      "stack_out": [
        "statusKey#0",
        "a#0",
        "tmp%0#4"
      ]
    },
    "1447": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "a#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1448": {
      "op": "swap",
      "stack_out": [
        "statusKey#0",
        "a#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "1449": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%1#0",
        "statusKey#0",
        "votingEndTime#0"
      ],
      "stack_out": [
        "statusKey#0",
        "a#0",
        "maybe_exists%1#0",
        "votingEndTime#0"
      ]
    },
    "1450": {
      "op": "swap",
      "stack_out": [
        "statusKey#0",
        "a#0",
        "votingEndTime#0",
        "maybe_exists%1#0"
      ]
    },
    "1451": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "statusKey#0",
        "a#0",
        "votingEndTime#0"
      ]
    },
    "1452": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "a#0",
        "statusKey#0",
        "tmp%4#0",
        "votingEndTime#0"
      ],
      "stack_out": [
        "statusKey#0",
        "a#0",
        "votingEndTime#0",
        "tmp%4#0"
      ]
    },
    "1454": {
      "op": "<",
      "defined_out": [
        "a#0",
        "statusKey#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "statusKey#0",
        "a#0",
        "tmp%5#0"
      ]
    },
    "1455": {
      "op": "assert",
      "stack_out": [
        "statusKey#0",
        "a#0"
      ]
    },
    "1456": {
      "op": "dup",
      "stack_out": [
        "statusKey#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1457": {
      "op": "bytec 6 // \"_forVotes\"",
      "defined_out": [
        "\"_forVotes\"",
        "a#0",
        "a#0 (copy)",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "a#0",
        "a#0 (copy)",
        "\"_forVotes\""
      ]
    },
    "1459": {
      "op": "concat",
      "stack_out": [
        "statusKey#0",
        "a#0",
        "tmp%0#4"
      ]
    },
    "1460": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "a#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1461": {
      "op": "swap",
      "stack_out": [
        "statusKey#0",
        "a#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "1462": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "forVotes#0",
        "maybe_exists%2#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "a#0",
        "maybe_exists%2#0",
        "forVotes#0"
      ]
    },
    "1463": {
      "op": "dup",
      "stack_out": [
        "statusKey#0",
        "a#0",
        "maybe_exists%2#0",
        "forVotes#0",
        "forVotes#0 (copy)"
      ]
    },
    "1464": {
      "op": "cover 3",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "a#0",
        "maybe_exists%2#0",
        "forVotes#0"
      ]
    },
    "1466": {
      "op": "cover 3",
      "defined_out": [
        "a#0",
        "forVotes#0",
        "maybe_exists%2#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "forVotes#0",
        "a#0",
        "maybe_exists%2#0"
      ]
    },
    "1468": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "forVotes#0",
        "a#0"
      ]
    },
    "1469": {
      "op": "dup",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "forVotes#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1470": {
      "op": "bytec 7 // \"_againstVotes\"",
      "defined_out": [
        "\"_againstVotes\"",
        "a#0",
        "a#0 (copy)",
        "forVotes#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "forVotes#0",
        "a#0",
        "a#0 (copy)",
        "\"_againstVotes\""
      ]
    },
    "1472": {
      "op": "concat",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "forVotes#0",
        "a#0",
        "tmp%0#4"
      ]
    },
    "1473": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "forVotes#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "forVotes#0",
        "a#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1474": {
      "op": "swap",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "forVotes#0",
        "a#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "1475": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "againstVotes#0",
        "forVotes#0",
        "maybe_exists%3#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "forVotes#0",
        "a#0",
        "maybe_exists%3#0",
        "againstVotes#0"
      ]
    },
    "1476": {
      "op": "dup",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "forVotes#0",
        "a#0",
        "maybe_exists%3#0",
        "againstVotes#0",
        "againstVotes#0 (copy)"
      ]
    },
    "1477": {
      "op": "cover 3",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "forVotes#0",
        "againstVotes#0",
        "a#0",
        "maybe_exists%3#0",
        "againstVotes#0"
      ]
    },
    "1479": {
      "op": "cover 4",
      "defined_out": [
        "a#0",
        "againstVotes#0",
        "forVotes#0",
        "maybe_exists%3#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "forVotes#0",
        "againstVotes#0",
        "a#0",
        "maybe_exists%3#0"
      ]
    },
    "1481": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "forVotes#0",
        "againstVotes#0",
        "a#0"
      ]
    },
    "1482": {
      "op": "dup",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "forVotes#0",
        "againstVotes#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1483": {
      "op": "bytec 8 // \"_abstainVotes\"",
      "defined_out": [
        "\"_abstainVotes\"",
        "a#0",
        "a#0 (copy)",
        "againstVotes#0",
        "forVotes#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "forVotes#0",
        "againstVotes#0",
        "a#0",
        "a#0 (copy)",
        "\"_abstainVotes\""
      ]
    },
    "1485": {
      "op": "concat",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "forVotes#0",
        "againstVotes#0",
        "a#0",
        "tmp%0#4"
      ]
    },
    "1486": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "againstVotes#0",
        "forVotes#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "forVotes#0",
        "againstVotes#0",
        "a#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1487": {
      "op": "swap",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "forVotes#0",
        "againstVotes#0",
        "a#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ]
    },
    "1488": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "abstainVotes#0",
        "againstVotes#0",
        "forVotes#0",
        "maybe_exists%4#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "forVotes#0",
        "againstVotes#0",
        "a#0",
        "maybe_exists%4#0",
        "abstainVotes#0"
      ]
    },
    "1489": {
      "op": "swap",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "forVotes#0",
        "againstVotes#0",
        "a#0",
        "abstainVotes#0",
        "maybe_exists%4#0"
      ]
    },
    "1490": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "forVotes#0",
        "againstVotes#0",
        "a#0",
        "abstainVotes#0"
      ]
    },
    "1491": {
      "op": "uncover 3",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "againstVotes#0",
        "a#0",
        "abstainVotes#0",
        "forVotes#0"
      ]
    },
    "1493": {
      "op": "uncover 3",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "a#0",
        "abstainVotes#0",
        "forVotes#0",
        "againstVotes#0"
      ]
    },
    "1495": {
      "op": "+",
      "defined_out": [
        "a#0",
        "abstainVotes#0",
        "againstVotes#0",
        "forVotes#0",
        "statusKey#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "a#0",
        "abstainVotes#0",
        "tmp%12#0"
      ]
    },
    "1496": {
      "op": "+",
      "defined_out": [
        "a#0",
        "againstVotes#0",
        "forVotes#0",
        "statusKey#0",
        "totalVotes#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "a#0",
        "totalVotes#0"
      ]
    },
    "1497": {
      "op": "swap",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "totalVotes#0",
        "a#0"
      ]
    },
    "1498": {
      "op": "bytec 13 // \"_quorumRequired\"",
      "defined_out": [
        "\"_quorumRequired\"",
        "a#0",
        "againstVotes#0",
        "forVotes#0",
        "statusKey#0",
        "totalVotes#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "totalVotes#0",
        "a#0",
        "\"_quorumRequired\""
      ]
    },
    "1500": {
      "op": "concat",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "totalVotes#0",
        "tmp%0#4"
      ]
    },
    "1501": {
      "op": "box_get",
      "defined_out": [
        "againstVotes#0",
        "forVotes#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "statusKey#0",
        "totalVotes#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "totalVotes#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1502": {
      "op": "swap",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "totalVotes#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ]
    },
    "1503": {
      "op": "btoi",
      "defined_out": [
        "againstVotes#0",
        "forVotes#0",
        "maybe_exists%5#0",
        "quorumRequired#0",
        "statusKey#0",
        "totalVotes#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "totalVotes#0",
        "maybe_exists%5#0",
        "quorumRequired#0"
      ]
    },
    "1504": {
      "op": "swap",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "totalVotes#0",
        "quorumRequired#0",
        "maybe_exists%5#0"
      ]
    },
    "1505": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "totalVotes#0",
        "quorumRequired#0"
      ]
    },
    "1506": {
      "op": "swap",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "quorumRequired#0",
        "totalVotes#0"
      ]
    },
    "1507": {
      "op": "intc_3 // 100",
      "defined_out": [
        "100",
        "againstVotes#0",
        "forVotes#0",
        "quorumRequired#0",
        "statusKey#0",
        "totalVotes#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "quorumRequired#0",
        "totalVotes#0",
        "100"
      ]
    },
    "1508": {
      "op": "*",
      "defined_out": [
        "againstVotes#0",
        "forVotes#0",
        "quorumRequired#0",
        "statusKey#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "quorumRequired#0",
        "tmp%15#0"
      ]
    },
    "1509": {
      "op": "intc_0 // 0",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "quorumRequired#0",
        "tmp%15#0",
        "0"
      ]
    },
    "1510": {
      "op": "bytec_2 // \"totalVotingPower\"",
      "defined_out": [
        "\"totalVotingPower\"",
        "0",
        "againstVotes#0",
        "forVotes#0",
        "quorumRequired#0",
        "statusKey#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "quorumRequired#0",
        "tmp%15#0",
        "0",
        "\"totalVotingPower\""
      ]
    },
    "1511": {
      "op": "app_global_get_ex",
      "defined_out": [
        "againstVotes#0",
        "forVotes#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "quorumRequired#0",
        "statusKey#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "quorumRequired#0",
        "tmp%15#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1512": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "quorumRequired#0",
        "tmp%15#0",
        "maybe_value%6#0"
      ]
    },
    "1513": {
      "op": "uncover 2",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "tmp%15#0",
        "maybe_value%6#0",
        "quorumRequired#0"
      ]
    },
    "1515": {
      "op": "*",
      "defined_out": [
        "againstVotes#0",
        "forVotes#0",
        "statusKey#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1516": {
      "op": ">=",
      "defined_out": [
        "againstVotes#0",
        "forVotes#0",
        "quorumMet#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "quorumMet#0"
      ]
    },
    "1517": {
      "op": "bz finalizeProposal_else_body@3",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0"
      ]
    },
    "1520": {
      "op": "frame_dig 1",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "forVotes#0"
      ]
    },
    "1522": {
      "op": "frame_dig 2",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "forVotes#0",
        "againstVotes#0"
      ]
    },
    "1524": {
      "op": ">",
      "defined_out": [
        "againstVotes#0",
        "forVotes#0",
        "statusKey#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "tmp%17#0"
      ]
    },
    "1525": {
      "op": "bz finalizeProposal_else_body@3",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0"
      ]
    },
    "1528": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "againstVotes#0",
        "forVotes#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "2"
      ]
    },
    "1529": {
      "op": "itob",
      "defined_out": [
        "againstVotes#0",
        "forVotes#0",
        "new_box_value%0#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "new_box_value%0#0"
      ]
    },
    "1530": {
      "op": "frame_dig 0",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "new_box_value%0#0",
        "statusKey#0"
      ]
    },
    "1532": {
      "op": "swap",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "statusKey#0",
        "new_box_value%0#0"
      ]
    },
    "1533": {
      "op": "box_put",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0"
      ]
    },
    "1534": {
      "retsub": true,
      "op": "retsub"
    },
    "1535": {
      "block": "finalizeProposal_else_body@3",
      "stack_in": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0"
      ],
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "3"
      ]
    },
    "1537": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "new_box_value%1#0"
      ]
    },
    "1538": {
      "op": "frame_dig 0",
      "defined_out": [
        "new_box_value%1#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "new_box_value%1#0",
        "statusKey#0"
      ]
    },
    "1540": {
      "op": "swap",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0",
        "statusKey#0",
        "new_box_value%1#0"
      ]
    },
    "1541": {
      "op": "box_put",
      "stack_out": [
        "statusKey#0",
        "forVotes#0",
        "againstVotes#0"
      ]
    },
    "1542": {
      "retsub": true,
      "op": "retsub"
    },
    "1543": {
      "subroutine": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.executeProposal",
      "params": {
        "proposalId#0": "uint64"
      },
      "block": "executeProposal",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1546": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposalId#0 (copy)"
      ],
      "stack_out": [
        "proposalId#0 (copy)"
      ]
    },
    "1548": {
      "op": "itob",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "1549": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1550": {
      "op": "bytec_3 // \"_status\"",
      "defined_out": [
        "\"_status\"",
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)",
        "\"_status\""
      ]
    },
    "1551": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "statusKey#0"
      ],
      "stack_out": [
        "a#0",
        "statusKey#0"
      ]
    },
    "1552": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "statusKey#0",
        "statusKey#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "statusKey#0",
        "statusKey#0 (copy)"
      ]
    },
    "1553": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "statusKey#0"
      ],
      "stack_out": [
        "a#0",
        "statusKey#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1554": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "statusKey#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1555": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%0#0",
        "status#0",
        "statusKey#0"
      ],
      "stack_out": [
        "a#0",
        "statusKey#0",
        "maybe_exists%0#0",
        "status#0"
      ]
    },
    "1556": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "statusKey#0",
        "status#0",
        "maybe_exists%0#0"
      ]
    },
    "1557": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "statusKey#0",
        "status#0"
      ]
    },
    "1558": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "a#0",
        "status#0",
        "statusKey#0"
      ],
      "stack_out": [
        "a#0",
        "statusKey#0",
        "status#0",
        "2"
      ]
    },
    "1559": {
      "op": "==",
      "defined_out": [
        "a#0",
        "statusKey#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "a#0",
        "statusKey#0",
        "tmp%1#0"
      ]
    },
    "1560": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "statusKey#0"
      ]
    },
    "1561": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "statusKey#0",
        "a#0 (copy)"
      ]
    },
    "1563": {
      "op": "bytec 15 // \"_executed\"",
      "defined_out": [
        "\"_executed\"",
        "a#0",
        "a#0 (copy)",
        "statusKey#0"
      ],
      "stack_out": [
        "a#0",
        "statusKey#0",
        "a#0 (copy)",
        "\"_executed\""
      ]
    },
    "1565": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "executedKey#0",
        "statusKey#0"
      ],
      "stack_out": [
        "a#0",
        "statusKey#0",
        "executedKey#0"
      ]
    },
    "1566": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "executedKey#0",
        "executedKey#0 (copy)",
        "statusKey#0"
      ],
      "stack_out": [
        "a#0",
        "statusKey#0",
        "executedKey#0",
        "executedKey#0 (copy)"
      ]
    },
    "1567": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "executedKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "statusKey#0"
      ],
      "stack_out": [
        "a#0",
        "statusKey#0",
        "executedKey#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1568": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "statusKey#0",
        "executedKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "1569": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "executedKey#0",
        "maybe_exists%1#0",
        "maybe_value_converted%1#0",
        "statusKey#0"
      ],
      "stack_out": [
        "a#0",
        "statusKey#0",
        "executedKey#0",
        "maybe_exists%1#0",
        "maybe_value_converted%1#0"
      ]
    },
    "1570": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "statusKey#0",
        "executedKey#0",
        "maybe_value_converted%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1571": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "statusKey#0",
        "executedKey#0",
        "maybe_value_converted%1#0"
      ]
    },
    "1572": {
      "op": "!",
      "defined_out": [
        "a#0",
        "executedKey#0",
        "statusKey#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#0",
        "statusKey#0",
        "executedKey#0",
        "tmp%3#0"
      ]
    },
    "1573": {
      "op": "assert",
      "stack_out": [
        "a#0",
        "statusKey#0",
        "executedKey#0"
      ]
    },
    "1574": {
      "op": "uncover 2",
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "a#0"
      ]
    },
    "1576": {
      "op": "bytec 5 // \"_votingEndTime\"",
      "defined_out": [
        "\"_votingEndTime\"",
        "a#0",
        "executedKey#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "a#0",
        "\"_votingEndTime\""
      ]
    },
    "1578": {
      "op": "concat",
      "defined_out": [
        "executedKey#0",
        "statusKey#0",
        "tmp%0#6"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "tmp%0#6"
      ]
    },
    "1579": {
      "op": "box_get",
      "defined_out": [
        "executedKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1580": {
      "op": "swap",
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "1581": {
      "op": "btoi",
      "defined_out": [
        "executedKey#0",
        "maybe_exists%2#0",
        "statusKey#0",
        "votingEndTime#0"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "maybe_exists%2#0",
        "votingEndTime#0"
      ]
    },
    "1582": {
      "op": "swap",
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "votingEndTime#0",
        "maybe_exists%2#0"
      ]
    },
    "1583": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "votingEndTime#0"
      ]
    },
    "1584": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "executedKey#0",
        "statusKey#0",
        "tmp%6#0",
        "votingEndTime#0"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "votingEndTime#0",
        "tmp%6#0"
      ]
    },
    "1586": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "executedKey#0",
        "statusKey#0",
        "tmp%6#0",
        "votingEndTime#0"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "votingEndTime#0",
        "tmp%6#0",
        "0"
      ]
    },
    "1587": {
      "op": "bytec 14 // \"executionDelay\"",
      "defined_out": [
        "\"executionDelay\"",
        "0",
        "executedKey#0",
        "statusKey#0",
        "tmp%6#0",
        "votingEndTime#0"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "votingEndTime#0",
        "tmp%6#0",
        "0",
        "\"executionDelay\""
      ]
    },
    "1589": {
      "op": "app_global_get_ex",
      "defined_out": [
        "executedKey#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "statusKey#0",
        "tmp%6#0",
        "votingEndTime#0"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "votingEndTime#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1590": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "votingEndTime#0",
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "1591": {
      "op": "dig 2",
      "defined_out": [
        "executedKey#0",
        "maybe_value%3#0",
        "statusKey#0",
        "tmp%6#0",
        "votingEndTime#0",
        "votingEndTime#0 (copy)"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "votingEndTime#0",
        "tmp%6#0",
        "maybe_value%3#0",
        "votingEndTime#0 (copy)"
      ]
    },
    "1593": {
      "op": "+",
      "defined_out": [
        "executedKey#0",
        "statusKey#0",
        "tmp%6#0",
        "tmp%7#0",
        "votingEndTime#0"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "votingEndTime#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "1594": {
      "op": ">=",
      "defined_out": [
        "executedKey#0",
        "statusKey#0",
        "tmp%8#0",
        "votingEndTime#0"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "votingEndTime#0",
        "tmp%8#0"
      ]
    },
    "1595": {
      "op": "assert",
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "votingEndTime#0"
      ]
    },
    "1596": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "executedKey#0",
        "statusKey#0",
        "tmp%9#0",
        "votingEndTime#0"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "votingEndTime#0",
        "tmp%9#0"
      ]
    },
    "1598": {
      "op": "intc_0 // 0",
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "votingEndTime#0",
        "tmp%9#0",
        "0"
      ]
    },
    "1599": {
      "op": "bytec 14 // \"executionDelay\"",
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "votingEndTime#0",
        "tmp%9#0",
        "0",
        "\"executionDelay\""
      ]
    },
    "1601": {
      "op": "app_global_get_ex",
      "defined_out": [
        "executedKey#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "statusKey#0",
        "tmp%9#0",
        "votingEndTime#0"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "votingEndTime#0",
        "tmp%9#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1602": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "votingEndTime#0",
        "tmp%9#0",
        "maybe_value%4#0"
      ]
    },
    "1603": {
      "op": "uncover 2",
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "tmp%9#0",
        "maybe_value%4#0",
        "votingEndTime#0"
      ]
    },
    "1605": {
      "op": "+",
      "defined_out": [
        "executedKey#0",
        "statusKey#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1606": {
      "op": "intc_0 // 0",
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "tmp%9#0",
        "tmp%10#0",
        "0"
      ]
    },
    "1607": {
      "op": "bytec 16 // \"gracePeriod\"",
      "defined_out": [
        "\"gracePeriod\"",
        "0",
        "executedKey#0",
        "statusKey#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "tmp%9#0",
        "tmp%10#0",
        "0",
        "\"gracePeriod\""
      ]
    },
    "1609": {
      "op": "app_global_get_ex",
      "defined_out": [
        "executedKey#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "statusKey#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "tmp%9#0",
        "tmp%10#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1610": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "tmp%9#0",
        "tmp%10#0",
        "maybe_value%5#0"
      ]
    },
    "1611": {
      "op": "+",
      "defined_out": [
        "executedKey#0",
        "statusKey#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "1612": {
      "op": "<=",
      "defined_out": [
        "executedKey#0",
        "statusKey#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "tmp%12#0"
      ]
    },
    "1613": {
      "op": "assert",
      "stack_out": [
        "statusKey#0",
        "executedKey#0"
      ]
    },
    "1614": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "executedKey#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "1"
      ]
    },
    "1615": {
      "op": "itob",
      "defined_out": [
        "executedKey#0",
        "new_box_value%0#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "executedKey#0",
        "new_box_value%0#0"
      ]
    },
    "1616": {
      "op": "box_put",
      "stack_out": [
        "statusKey#0"
      ]
    },
    "1617": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "4"
      ]
    },
    "1619": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "new_box_value%1#0"
      ]
    },
    "1620": {
      "op": "box_put",
      "stack_out": []
    },
    "1621": {
      "retsub": true,
      "op": "retsub"
    },
    "1622": {
      "subroutine": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.cancelProposal",
      "params": {
        "proposalId#0": "uint64"
      },
      "block": "cancelProposal",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1625": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1627": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1628": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1630": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1631": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1632": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1633": {
      "op": "assert",
      "stack_out": []
    },
    "1634": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposalId#0 (copy)"
      ],
      "stack_out": [
        "proposalId#0 (copy)"
      ]
    },
    "1636": {
      "op": "itob",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "1637": {
      "op": "bytec_3 // \"_status\"",
      "defined_out": [
        "\"_status\"",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "\"_status\""
      ]
    },
    "1638": {
      "op": "concat",
      "defined_out": [
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0"
      ]
    },
    "1639": {
      "op": "dup",
      "defined_out": [
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "statusKey#0"
      ]
    },
    "1640": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1641": {
      "op": "swap",
      "stack_out": [
        "statusKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "1642": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "status#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "maybe_exists%1#0",
        "status#0"
      ]
    },
    "1643": {
      "op": "dup"
    },
    "1644": {
      "op": "uncover 2",
      "stack_out": [
        "statusKey#0",
        "status#0",
        "status#0",
        "maybe_exists%1#0"
      ]
    },
    "1646": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "statusKey#0",
        "status#0",
        "status#0"
      ]
    },
    "1647": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "status#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "status#0",
        "status#0",
        "1"
      ]
    },
    "1648": {
      "op": "==",
      "defined_out": [
        "status#0",
        "statusKey#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "statusKey#0",
        "status#0",
        "tmp%3#0"
      ]
    },
    "1649": {
      "op": "bnz cancelProposal_bool_true@2",
      "stack_out": [
        "statusKey#0",
        "status#0"
      ]
    },
    "1652": {
      "op": "frame_dig 1",
      "stack_out": [
        "statusKey#0",
        "status#0",
        "status#0"
      ]
    },
    "1654": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "status#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "status#0",
        "status#0",
        "2"
      ]
    },
    "1655": {
      "op": "==",
      "defined_out": [
        "status#0",
        "statusKey#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "statusKey#0",
        "status#0",
        "tmp%4#0"
      ]
    },
    "1656": {
      "op": "bz cancelProposal_bool_false@3",
      "stack_out": [
        "statusKey#0",
        "status#0"
      ]
    },
    "1659": {
      "block": "cancelProposal_bool_true@2",
      "stack_in": [
        "statusKey#0",
        "status#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "statusKey#0",
        "status#0",
        "or_result%0#0"
      ]
    },
    "1660": {
      "block": "cancelProposal_bool_merge@4",
      "stack_in": [
        "statusKey#0",
        "status#0",
        "or_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "statusKey#0",
        "status#0"
      ]
    },
    "1661": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5"
      ],
      "stack_out": [
        "statusKey#0",
        "status#0",
        "5"
      ]
    },
    "1663": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0"
      ],
      "stack_out": [
        "statusKey#0",
        "status#0",
        "new_box_value%0#0"
      ]
    },
    "1664": {
      "op": "frame_dig 0",
      "defined_out": [
        "new_box_value%0#0",
        "statusKey#0"
      ],
      "stack_out": [
        "statusKey#0",
        "status#0",
        "new_box_value%0#0",
        "statusKey#0"
      ]
    },
    "1666": {
      "op": "swap",
      "stack_out": [
        "statusKey#0",
        "status#0",
        "statusKey#0",
        "new_box_value%0#0"
      ]
    },
    "1667": {
      "op": "box_put",
      "stack_out": [
        "statusKey#0",
        "status#0"
      ]
    },
    "1668": {
      "retsub": true,
      "op": "retsub"
    },
    "1669": {
      "block": "cancelProposal_bool_false@3",
      "stack_in": [
        "statusKey#0",
        "status#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "statusKey#0",
        "status#0",
        "or_result%0#0"
      ]
    },
    "1670": {
      "op": "b cancelProposal_bool_merge@4"
    },
    "1673": {
      "subroutine": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.delegateVoting",
      "params": {
        "delegate#0": "bytes"
      },
      "block": "delegateVoting",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1676": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1678": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1679": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "{box_del}"
      ]
    },
    "1680": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1681": {
      "op": "frame_dig -1",
      "defined_out": [
        "delegate#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "delegate#0 (copy)"
      ]
    },
    "1683": {
      "op": "box_put",
      "stack_out": []
    },
    "1684": {
      "retsub": true,
      "op": "retsub"
    },
    "1685": {
      "subroutine": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.updateVotingPower",
      "params": {
        "user#0": "bytes",
        "newPower#0": "uint64"
      },
      "block": "updateVotingPower",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1688": {
      "op": "frame_dig -2",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "1690": {
      "callsub": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.getVotingPower",
      "op": "callsub getVotingPower",
      "defined_out": [
        "oldPower#0"
      ],
      "stack_out": [
        "oldPower#0"
      ]
    },
    "1693": {
      "op": "frame_dig -1",
      "defined_out": [
        "newPower#0 (copy)",
        "oldPower#0"
      ],
      "stack_out": [
        "oldPower#0",
        "newPower#0 (copy)"
      ]
    },
    "1695": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0",
        "oldPower#0"
      ],
      "stack_out": [
        "oldPower#0",
        "new_box_value%0#0"
      ]
    },
    "1696": {
      "op": "frame_dig -2",
      "stack_out": [
        "oldPower#0",
        "new_box_value%0#0",
        "user#0 (copy)"
      ]
    },
    "1698": {
      "op": "swap",
      "stack_out": [
        "oldPower#0",
        "user#0 (copy)",
        "new_box_value%0#0"
      ]
    },
    "1699": {
      "op": "box_put",
      "stack_out": [
        "oldPower#0"
      ]
    },
    "1700": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "oldPower#0"
      ],
      "stack_out": [
        "oldPower#0",
        "0"
      ]
    },
    "1701": {
      "op": "bytec_2 // \"totalVotingPower\"",
      "defined_out": [
        "\"totalVotingPower\"",
        "0",
        "oldPower#0"
      ],
      "stack_out": [
        "oldPower#0",
        "0",
        "\"totalVotingPower\""
      ]
    },
    "1702": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "oldPower#0"
      ],
      "stack_out": [
        "oldPower#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1703": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "oldPower#0",
        "maybe_value%0#0"
      ]
    },
    "1704": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "oldPower#0"
      ]
    },
    "1705": {
      "op": "-",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1706": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "newPower#0 (copy)"
      ]
    },
    "1708": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1709": {
      "op": "bytec_2 // \"totalVotingPower\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalVotingPower\""
      ]
    },
    "1710": {
      "op": "swap",
      "stack_out": [
        "\"totalVotingPower\"",
        "new_state_value%0#0"
      ]
    },
    "1711": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1712": {
      "retsub": true,
      "op": "retsub"
    },
    "1713": {
      "subroutine": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.updateGovernanceParameters",
      "params": {
        "newVotingDuration#0": "uint64",
        "newQuorumThreshold#0": "uint64",
        "newProposalThreshold#0": "uint64"
      },
      "block": "updateGovernanceParameters",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1716": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1718": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1719": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1721": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1722": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1723": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1724": {
      "op": "assert",
      "stack_out": []
    },
    "1725": {
      "op": "bytec 9 // \"votingDuration\"",
      "defined_out": [
        "\"votingDuration\""
      ],
      "stack_out": [
        "\"votingDuration\""
      ]
    },
    "1727": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"votingDuration\"",
        "newVotingDuration#0 (copy)"
      ],
      "stack_out": [
        "\"votingDuration\"",
        "newVotingDuration#0 (copy)"
      ]
    },
    "1729": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1730": {
      "op": "bytec 10 // \"quorumThreshold\"",
      "defined_out": [
        "\"quorumThreshold\""
      ],
      "stack_out": [
        "\"quorumThreshold\""
      ]
    },
    "1732": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"quorumThreshold\"",
        "newQuorumThreshold#0 (copy)"
      ],
      "stack_out": [
        "\"quorumThreshold\"",
        "newQuorumThreshold#0 (copy)"
      ]
    },
    "1734": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1735": {
      "op": "bytec 11 // \"proposalThreshold\"",
      "defined_out": [
        "\"proposalThreshold\""
      ],
      "stack_out": [
        "\"proposalThreshold\""
      ]
    },
    "1737": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"proposalThreshold\"",
        "newProposalThreshold#0 (copy)"
      ],
      "stack_out": [
        "\"proposalThreshold\"",
        "newProposalThreshold#0 (copy)"
      ]
    },
    "1739": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1740": {
      "retsub": true,
      "op": "retsub"
    },
    "1741": {
      "subroutine": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.pauseGovernance",
      "params": {},
      "block": "pauseGovernance",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1743": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1744": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1746": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1747": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1748": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1749": {
      "op": "assert",
      "stack_out": []
    },
    "1750": {
      "op": "bytec_1 // \"governanceActive\"",
      "defined_out": [
        "\"governanceActive\""
      ],
      "stack_out": [
        "\"governanceActive\""
      ]
    },
    "1751": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"governanceActive\"",
        "0"
      ]
    },
    "1752": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1753": {
      "retsub": true,
      "op": "retsub"
    },
    "1754": {
      "subroutine": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.resumeGovernance",
      "params": {},
      "block": "resumeGovernance",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1756": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1757": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "1759": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1760": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1761": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1762": {
      "op": "assert",
      "stack_out": []
    },
    "1763": {
      "op": "bytec_1 // \"governanceActive\"",
      "defined_out": [
        "\"governanceActive\""
      ],
      "stack_out": [
        "\"governanceActive\""
      ]
    },
    "1764": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"governanceActive\"",
        "1"
      ],
      "stack_out": [
        "\"governanceActive\"",
        "1"
      ]
    },
    "1765": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1766": {
      "retsub": true,
      "op": "retsub"
    },
    "1767": {
      "subroutine": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.getVotingPower",
      "params": {
        "user#0": "bytes"
      },
      "block": "getVotingPower",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1770": {
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "1772": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1773": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1775": {
      "op": "bz getVotingPower_after_if_else@2",
      "stack_out": []
    },
    "1778": {
      "op": "frame_dig -1",
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "1780": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1781": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "1782": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1783": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1784": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "1785": {
      "retsub": true,
      "op": "retsub"
    },
    "1786": {
      "block": "getVotingPower_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1787": {
      "retsub": true,
      "op": "retsub"
    },
    "1788": {
      "subroutine": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.getProposal",
      "params": {
        "proposalId#0": "uint64"
      },
      "block": "getProposal",
      "stack_in": [],
      "op": "proto 1 15"
    },
    "1791": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposalId#0 (copy)"
      ],
      "stack_out": [
        "proposalId#0 (copy)"
      ]
    },
    "1793": {
      "op": "itob",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "1794": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1795": {
      "op": "bytec 17 // \"_proposer\"",
      "defined_out": [
        "\"_proposer\"",
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)",
        "\"_proposer\""
      ]
    },
    "1797": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#0",
        "tmp%0#2"
      ]
    },
    "1798": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1799": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value%0#0"
      ]
    },
    "1800": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "a#0 (copy)"
      ]
    },
    "1802": {
      "op": "bytec 18 // \"_title\"",
      "defined_out": [
        "\"_title\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "a#0 (copy)",
        "\"_title\""
      ]
    },
    "1804": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "tmp%0#2"
      ]
    },
    "1805": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1806": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "1807": {
      "op": "dig 2",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "a#0 (copy)"
      ]
    },
    "1809": {
      "op": "bytec 19 // \"_description\"",
      "defined_out": [
        "\"_description\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "a#0 (copy)",
        "\"_description\""
      ]
    },
    "1811": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%0#2"
      ]
    },
    "1812": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1813": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1814": {
      "op": "dig 3",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "a#0 (copy)"
      ]
    },
    "1816": {
      "op": "bytec 20 // \"_proposalType\"",
      "defined_out": [
        "\"_proposalType\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "a#0 (copy)",
        "\"_proposalType\""
      ]
    },
    "1818": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%0#2"
      ]
    },
    "1819": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1820": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "1821": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%3#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1822": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_exists%3#0"
      ]
    },
    "1823": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1824": {
      "op": "dig 4",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "a#0 (copy)"
      ]
    },
    "1826": {
      "op": "bytec 21 // \"_targetContract\"",
      "defined_out": [
        "\"_targetContract\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "a#0 (copy)",
        "\"_targetContract\""
      ]
    },
    "1828": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "tmp%0#2"
      ]
    },
    "1829": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%4#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1830": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0"
      ]
    },
    "1831": {
      "op": "dig 5",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "a#0 (copy)"
      ]
    },
    "1833": {
      "op": "bytec 22 // \"_executionData\"",
      "defined_out": [
        "\"_executionData\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "a#0 (copy)",
        "\"_executionData\""
      ]
    },
    "1835": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "tmp%0#2"
      ]
    },
    "1836": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%5#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1837": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "1838": {
      "op": "dig 6",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "a#0 (copy)"
      ]
    },
    "1840": {
      "op": "bytec 23 // \"_votingStartTime\"",
      "defined_out": [
        "\"_votingStartTime\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "a#0 (copy)",
        "\"_votingStartTime\""
      ]
    },
    "1842": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "tmp%0#2"
      ]
    },
    "1843": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%6#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1844": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ]
    },
    "1845": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%6#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%6#0",
        "maybe_value_converted%1#0"
      ]
    },
    "1846": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_exists%6#0"
      ]
    },
    "1847": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0"
      ]
    },
    "1848": {
      "op": "dig 7",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "a#0 (copy)"
      ]
    },
    "1850": {
      "op": "bytec 5 // \"_votingEndTime\"",
      "defined_out": [
        "\"_votingEndTime\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "a#0 (copy)",
        "\"_votingEndTime\""
      ]
    },
    "1852": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "tmp%0#2"
      ]
    },
    "1853": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%7#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%7#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1854": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ]
    },
    "1855": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%7#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_exists%7#0",
        "maybe_value_converted%2#0"
      ]
    },
    "1856": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_exists%7#0"
      ]
    },
    "1857": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0"
      ]
    },
    "1858": {
      "op": "dig 8",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "a#0 (copy)"
      ]
    },
    "1860": {
      "op": "bytec 6 // \"_forVotes\"",
      "defined_out": [
        "\"_forVotes\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "a#0 (copy)",
        "\"_forVotes\""
      ]
    },
    "1862": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "tmp%0#2"
      ]
    },
    "1863": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%8#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%8#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "1864": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ]
    },
    "1865": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%8#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_exists%8#0",
        "maybe_value_converted%3#0"
      ]
    },
    "1866": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_exists%8#0"
      ]
    },
    "1867": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0"
      ]
    },
    "1868": {
      "op": "dig 9",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "a#0 (copy)"
      ]
    },
    "1870": {
      "op": "bytec 7 // \"_againstVotes\"",
      "defined_out": [
        "\"_againstVotes\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "a#0 (copy)",
        "\"_againstVotes\""
      ]
    },
    "1872": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "tmp%0#2"
      ]
    },
    "1873": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%9#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%9#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "1874": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ]
    },
    "1875": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%9#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_exists%9#0",
        "maybe_value_converted%4#0"
      ]
    },
    "1876": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_exists%9#0"
      ]
    },
    "1877": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0"
      ]
    },
    "1878": {
      "op": "dig 10",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "a#0 (copy)"
      ]
    },
    "1880": {
      "op": "bytec 8 // \"_abstainVotes\"",
      "defined_out": [
        "\"_abstainVotes\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "a#0 (copy)",
        "\"_abstainVotes\""
      ]
    },
    "1882": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "tmp%0#2"
      ]
    },
    "1883": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%10#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%10#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "1884": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_exists%10#0",
        "maybe_value%10#0"
      ]
    },
    "1885": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%10#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_exists%10#0",
        "maybe_value_converted%5#0"
      ]
    },
    "1886": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_exists%10#0"
      ]
    },
    "1887": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0"
      ]
    },
    "1888": {
      "op": "dig 11",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "a#0 (copy)"
      ]
    },
    "1890": {
      "op": "bytec_3 // \"_status\"",
      "defined_out": [
        "\"_status\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "a#0 (copy)",
        "\"_status\""
      ]
    },
    "1891": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "tmp%0#2"
      ]
    },
    "1892": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%11#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%11#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "1893": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_exists%11#0",
        "maybe_value%11#0"
      ]
    },
    "1894": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%11#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_exists%11#0",
        "maybe_value_converted%6#0"
      ]
    },
    "1895": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_exists%11#0"
      ]
    },
    "1896": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0"
      ]
    },
    "1897": {
      "op": "dig 12",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "a#0 (copy)"
      ]
    },
    "1899": {
      "op": "bytec 13 // \"_quorumRequired\"",
      "defined_out": [
        "\"_quorumRequired\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "a#0 (copy)",
        "\"_quorumRequired\""
      ]
    },
    "1901": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "tmp%0#2"
      ]
    },
    "1902": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%12#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%12#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "1903": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_exists%12#0",
        "maybe_value%12#0"
      ]
    },
    "1904": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%12#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_exists%12#0",
        "maybe_value_converted%7#0"
      ]
    },
    "1905": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_exists%12#0"
      ]
    },
    "1906": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0"
      ]
    },
    "1907": {
      "op": "uncover 13",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "a#0"
      ]
    },
    "1909": {
      "op": "bytec 15 // \"_executed\"",
      "defined_out": [
        "\"_executed\"",
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "a#0",
        "\"_executed\""
      ]
    },
    "1911": {
      "op": "concat",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "tmp%0#2"
      ]
    },
    "1912": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%13#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%13#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "1913": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_exists%13#0",
        "maybe_value%13#0"
      ]
    },
    "1914": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%13#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_exists%13#0",
        "maybe_value_converted%8#0"
      ]
    },
    "1915": {
      "op": "swap",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_exists%13#0"
      ]
    },
    "1916": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0"
      ]
    },
    "1917": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "proposalId#0 (copy)"
      ]
    },
    "1919": {
      "retsub": true,
      "op": "retsub"
    },
    "1920": {
      "subroutine": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.getVote",
      "params": {
        "voter#0": "bytes",
        "proposalId#0": "uint64"
      },
      "block": "getVote",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1923": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposalId#0 (copy)"
      ],
      "stack_out": [
        "proposalId#0 (copy)"
      ]
    },
    "1925": {
      "op": "itob",
      "defined_out": [
        "b#0"
      ],
      "stack_out": [
        "b#0"
      ]
    },
    "1926": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0",
        "voter#0 (copy)"
      ],
      "stack_out": [
        "b#0",
        "voter#0 (copy)"
      ]
    },
    "1928": {
      "op": "swap",
      "stack_out": [
        "voter#0 (copy)",
        "b#0"
      ]
    },
    "1929": {
      "op": "concat",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3"
      ]
    },
    "1930": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1931": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1932": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1933": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1934": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "1935": {
      "retsub": true,
      "op": "retsub"
    },
    "1936": {
      "subroutine": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.hasVoted",
      "params": {
        "voter#0": "bytes",
        "proposalId#0": "uint64"
      },
      "block": "hasVoted",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1939": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposalId#0 (copy)"
      ],
      "stack_out": [
        "proposalId#0 (copy)"
      ]
    },
    "1941": {
      "op": "itob",
      "defined_out": [
        "b#0"
      ],
      "stack_out": [
        "b#0"
      ]
    },
    "1942": {
      "op": "frame_dig -2",
      "defined_out": [
        "b#0",
        "voter#0 (copy)"
      ],
      "stack_out": [
        "b#0",
        "voter#0 (copy)"
      ]
    },
    "1944": {
      "op": "swap",
      "stack_out": [
        "voter#0 (copy)",
        "b#0"
      ]
    },
    "1945": {
      "op": "concat",
      "defined_out": [
        "tmp%0#3"
      ],
      "stack_out": [
        "tmp%0#3"
      ]
    },
    "1946": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1947": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1949": {
      "retsub": true,
      "op": "retsub"
    },
    "1950": {
      "subroutine": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.getGovernanceInfo",
      "params": {},
      "block": "getGovernanceInfo",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1951": {
      "op": "bytec 12 // \"proposalCount\"",
      "defined_out": [
        "\"proposalCount\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"proposalCount\""
      ]
    },
    "1953": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1954": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1955": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "1956": {
      "op": "bytec 9 // \"votingDuration\"",
      "defined_out": [
        "\"votingDuration\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"votingDuration\""
      ]
    },
    "1958": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1959": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "1960": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "1961": {
      "op": "bytec 10 // \"quorumThreshold\"",
      "defined_out": [
        "\"quorumThreshold\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"quorumThreshold\""
      ]
    },
    "1963": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1964": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1965": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "1966": {
      "op": "bytec 11 // \"proposalThreshold\"",
      "defined_out": [
        "\"proposalThreshold\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"proposalThreshold\""
      ]
    },
    "1968": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1969": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "1970": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "1971": {
      "op": "bytec_2 // \"totalVotingPower\"",
      "defined_out": [
        "\"totalVotingPower\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"totalVotingPower\""
      ]
    },
    "1972": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1973": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "1974": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "1975": {
      "op": "bytec_1 // \"governanceActive\"",
      "defined_out": [
        "\"governanceActive\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0",
        "\"governanceActive\""
      ]
    },
    "1976": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1977": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "1978": {
      "retsub": true,
      "op": "retsub"
    },
    "1979": {
      "subroutine": "smart_contracts/vault/governance_vault.algo.ts::GovernanceVault.calculateQuorumProgress",
      "params": {
        "proposalId#0": "uint64"
      },
      "block": "calculateQuorumProgress",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1982": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposalId#0 (copy)"
      ],
      "stack_out": [
        "proposalId#0 (copy)"
      ]
    },
    "1984": {
      "op": "itob",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "1985": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1986": {
      "op": "bytec 6 // \"_forVotes\"",
      "defined_out": [
        "\"_forVotes\"",
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)",
        "\"_forVotes\""
      ]
    },
    "1988": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#0",
        "tmp%0#2"
      ]
    },
    "1989": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1990": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1991": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "forVotes#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_exists%0#0",
        "forVotes#0"
      ]
    },
    "1992": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "forVotes#0",
        "maybe_exists%0#0"
      ]
    },
    "1993": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "forVotes#0"
      ]
    },
    "1994": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "forVotes#0",
        "a#0 (copy)"
      ]
    },
    "1996": {
      "op": "bytec 7 // \"_againstVotes\"",
      "defined_out": [
        "\"_againstVotes\"",
        "a#0",
        "a#0 (copy)",
        "forVotes#0"
      ],
      "stack_out": [
        "a#0",
        "forVotes#0",
        "a#0 (copy)",
        "\"_againstVotes\""
      ]
    },
    "1998": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "forVotes#0",
        "tmp%0#2"
      ]
    },
    "1999": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "forVotes#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "a#0",
        "forVotes#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2000": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "forVotes#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "2001": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "againstVotes#0",
        "forVotes#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "a#0",
        "forVotes#0",
        "maybe_exists%1#0",
        "againstVotes#0"
      ]
    },
    "2002": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "forVotes#0",
        "againstVotes#0",
        "maybe_exists%1#0"
      ]
    },
    "2003": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "forVotes#0",
        "againstVotes#0"
      ]
    },
    "2004": {
      "op": "dig 2",
      "stack_out": [
        "a#0",
        "forVotes#0",
        "againstVotes#0",
        "a#0 (copy)"
      ]
    },
    "2006": {
      "op": "bytec 8 // \"_abstainVotes\"",
      "defined_out": [
        "\"_abstainVotes\"",
        "a#0",
        "a#0 (copy)",
        "againstVotes#0",
        "forVotes#0"
      ],
      "stack_out": [
        "a#0",
        "forVotes#0",
        "againstVotes#0",
        "a#0 (copy)",
        "\"_abstainVotes\""
      ]
    },
    "2008": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "forVotes#0",
        "againstVotes#0",
        "tmp%0#2"
      ]
    },
    "2009": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "againstVotes#0",
        "forVotes#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "a#0",
        "forVotes#0",
        "againstVotes#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2010": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "forVotes#0",
        "againstVotes#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "2011": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "abstainVotes#0",
        "againstVotes#0",
        "forVotes#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "a#0",
        "forVotes#0",
        "againstVotes#0",
        "maybe_exists%2#0",
        "abstainVotes#0"
      ]
    },
    "2012": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "forVotes#0",
        "againstVotes#0",
        "abstainVotes#0",
        "maybe_exists%2#0"
      ]
    },
    "2013": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "forVotes#0",
        "againstVotes#0",
        "abstainVotes#0"
      ]
    },
    "2014": {
      "op": "cover 2",
      "stack_out": [
        "a#0",
        "abstainVotes#0",
        "forVotes#0",
        "againstVotes#0"
      ]
    },
    "2016": {
      "op": "+",
      "defined_out": [
        "a#0",
        "abstainVotes#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "a#0",
        "abstainVotes#0",
        "tmp%6#0"
      ]
    },
    "2017": {
      "op": "+",
      "defined_out": [
        "a#0",
        "totalVotes#0"
      ],
      "stack_out": [
        "a#0",
        "totalVotes#0"
      ]
    },
    "2018": {
      "op": "swap",
      "defined_out": [
        "a#0",
        "totalVotes#0"
      ],
      "stack_out": [
        "totalVotes#0",
        "a#0"
      ]
    },
    "2019": {
      "op": "bytec 13 // \"_quorumRequired\"",
      "defined_out": [
        "\"_quorumRequired\"",
        "a#0",
        "totalVotes#0"
      ],
      "stack_out": [
        "totalVotes#0",
        "a#0",
        "\"_quorumRequired\""
      ]
    },
    "2021": {
      "op": "concat",
      "stack_out": [
        "totalVotes#0",
        "tmp%0#2"
      ]
    },
    "2022": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "totalVotes#0"
      ],
      "stack_out": [
        "totalVotes#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2023": {
      "op": "swap",
      "stack_out": [
        "totalVotes#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "2024": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%3#0",
        "quorumRequired#0",
        "totalVotes#0"
      ],
      "stack_out": [
        "totalVotes#0",
        "maybe_exists%3#0",
        "quorumRequired#0"
      ]
    },
    "2025": {
      "op": "swap",
      "stack_out": [
        "totalVotes#0",
        "quorumRequired#0",
        "maybe_exists%3#0"
      ]
    },
    "2026": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "totalVotes#0",
        "quorumRequired#0"
      ]
    },
    "2027": {
      "op": "intc_0 // 0",
      "stack_out": [
        "totalVotes#0",
        "quorumRequired#0",
        "0"
      ]
    },
    "2028": {
      "op": "bytec_2 // \"totalVotingPower\"",
      "defined_out": [
        "\"totalVotingPower\"",
        "0",
        "quorumRequired#0",
        "totalVotes#0"
      ],
      "stack_out": [
        "totalVotes#0",
        "quorumRequired#0",
        "0",
        "\"totalVotingPower\""
      ]
    },
    "2029": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "quorumRequired#0",
        "totalVotes#0"
      ],
      "stack_out": [
        "totalVotes#0",
        "quorumRequired#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2030": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "totalVotes#0",
        "quorumRequired#0",
        "maybe_value%4#0"
      ]
    },
    "2031": {
      "op": "*",
      "defined_out": [
        "tmp%9#0",
        "totalVotes#0"
      ],
      "stack_out": [
        "totalVotes#0",
        "tmp%9#0"
      ]
    },
    "2032": {
      "op": "intc_3 // 100",
      "defined_out": [
        "100",
        "tmp%9#0",
        "totalVotes#0"
      ],
      "stack_out": [
        "totalVotes#0",
        "tmp%9#0",
        "100"
      ]
    },
    "2033": {
      "op": "/",
      "defined_out": [
        "requiredVotes#0",
        "totalVotes#0"
      ],
      "stack_out": [
        "totalVotes#0",
        "requiredVotes#0"
      ]
    },
    "2034": {
      "op": "dup",
      "defined_out": [
        "requiredVotes#0",
        "totalVotes#0"
      ],
      "stack_out": [
        "totalVotes#0",
        "requiredVotes#0",
        "requiredVotes#0"
      ]
    },
    "2035": {
      "op": "bz calculateQuorumProgress_ternary_false@2",
      "stack_out": [
        "totalVotes#0",
        "requiredVotes#0"
      ]
    },
    "2038": {
      "op": "frame_dig 0",
      "stack_out": [
        "totalVotes#0",
        "requiredVotes#0",
        "totalVotes#0"
      ]
    },
    "2040": {
      "op": "intc_3 // 100",
      "stack_out": [
        "totalVotes#0",
        "requiredVotes#0",
        "totalVotes#0",
        "100"
      ]
    },
    "2041": {
      "op": "*",
      "defined_out": [
        "requiredVotes#0",
        "tmp%11#0",
        "totalVotes#0"
      ],
      "stack_out": [
        "totalVotes#0",
        "requiredVotes#0",
        "tmp%11#0"
      ]
    },
    "2042": {
      "op": "frame_dig 1",
      "stack_out": [
        "totalVotes#0",
        "requiredVotes#0",
        "tmp%11#0",
        "requiredVotes#0"
      ]
    },
    "2044": {
      "op": "/",
      "defined_out": [
        "requiredVotes#0",
        "ternary_result%0#0",
        "totalVotes#0"
      ],
      "stack_out": [
        "totalVotes#0",
        "requiredVotes#0",
        "ternary_result%0#0"
      ]
    },
    "2045": {
      "block": "calculateQuorumProgress_ternary_merge@3",
      "stack_in": [
        "totalVotes#0",
        "requiredVotes#0",
        "ternary_result%0#0"
      ],
      "op": "frame_bury 0",
      "defined_out": [
        "ternary_result%0#0"
      ]
    },
    "2047": {
      "retsub": true,
      "op": "retsub"
    },
    "2048": {
      "block": "calculateQuorumProgress_ternary_false@2",
      "stack_in": [
        "totalVotes#0",
        "requiredVotes#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "totalVotes#0",
        "requiredVotes#0",
        "ternary_result%0#0"
      ]
    },
    "2049": {
      "op": "b calculateQuorumProgress_ternary_merge@3"
    }
  }
}