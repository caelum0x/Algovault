{
    "name": "AutoCompounder",
    "structs": {},
    "methods": [
        {
            "name": "initialize",
            "args": [
                {
                    "type": "byte[]",
                    "name": "stakingPool"
                },
                {
                    "type": "byte[]",
                    "name": "rewardDistributorAddr"
                },
                {
                    "type": "uint64",
                    "name": "compoundFee"
                },
                {
                    "type": "byte[]",
                    "name": "feeCollector"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "enableAutoCompound",
            "args": [
                {
                    "type": "uint64",
                    "name": "frequency"
                },
                {
                    "type": "uint64",
                    "name": "threshold"
                },
                {
                    "type": "uint64",
                    "name": "maxGasFee"
                },
                {
                    "type": "uint64",
                    "name": "slippageTolerance"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "disableAutoCompound",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "triggerCompound",
            "args": [
                {
                    "type": "byte[]",
                    "name": "user"
                },
                {
                    "type": "uint64",
                    "name": "pendingRewards"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "executeCompound",
            "args": [
                {
                    "type": "byte[]",
                    "name": "user"
                },
                {
                    "type": "uint64",
                    "name": "rewardAmount"
                },
                {
                    "type": "uint64",
                    "name": "gasCost"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "batchCompound",
            "args": [
                {
                    "type": "byte[][]",
                    "name": "users"
                },
                {
                    "type": "uint64[]",
                    "name": "pendingRewardsArray"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculateCompoundEfficiency",
            "args": [
                {
                    "type": "uint64",
                    "name": "rewardAmount"
                },
                {
                    "type": "uint64",
                    "name": "gasCost"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "recordCompoundHistory",
            "args": [
                {
                    "type": "byte[]",
                    "name": "user"
                },
                {
                    "type": "uint64",
                    "name": "rewardAmount"
                },
                {
                    "type": "uint64",
                    "name": "compoundedAmount"
                },
                {
                    "type": "uint64",
                    "name": "gasCost"
                },
                {
                    "type": "uint64",
                    "name": "efficiency"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateGlobalStats",
            "args": [
                {
                    "type": "uint64",
                    "name": "compoundedAmount"
                },
                {
                    "type": "uint64",
                    "name": "efficiency"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateCompoundFee",
            "args": [
                {
                    "type": "uint64",
                    "name": "newFeeRate"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateFeeCollector",
            "args": [
                {
                    "type": "byte[]",
                    "name": "newCollector"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "pauseCompounds",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "resumeCompounds",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "isEligibleForCompound",
            "args": [
                {
                    "type": "byte[]",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getUserSettings",
            "args": [
                {
                    "type": "byte[]",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getCompoundStats",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPendingRewards",
            "args": [
                {
                    "type": "byte[]",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "estimateGasCost",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculateOptimalCompoundTime",
            "args": [
                {
                    "type": "byte[]",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "projectCompoundValue",
            "args": [
                {
                    "type": "byte[]",
                    "name": "user"
                },
                {
                    "type": "uint64",
                    "name": "timeHorizon"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 8,
                "bytes": 4
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "totalUsersEnabled": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxVc2Vyc0VuYWJsZWQ="
                },
                "totalCompounds": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxDb21wb3VuZHM="
                },
                "totalRewardsCompounded": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxSZXdhcmRzQ29tcG91bmRlZA=="
                },
                "lastGlobalCompound": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGFzdEdsb2JhbENvbXBvdW5k"
                },
                "compoundFeeRate": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y29tcG91bmRGZWVSYXRl"
                },
                "feeCollector": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "ZmVlQ29sbGVjdG9y"
                },
                "stakingPoolContract": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "c3Rha2luZ1Bvb2xDb250cmFjdA=="
                },
                "rewardDistributor": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "cmV3YXJkRGlzdHJpYnV0b3I="
                },
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YWRtaW4="
                },
                "compoundsActive": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Y29tcG91bmRzQWN0aXZl"
                },
                "averageEfficiency": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXZlcmFnZUVmZmljaWVuY3k="
                },
                "bestEfficiency": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YmVzdEVmZmljaWVuY3k="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1086,
                        1158,
                        1229,
                        1244,
                        1252,
                        1260,
                        1281,
                        2515,
                        2532,
                        2540,
                        2548,
                        2569,
                        2661,
                        2678,
                        2695,
                        2712,
                        2729,
                        2849
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        1413,
                        1487,
                        1565,
                        1647,
                        1729,
                        1811,
                        1893,
                        1975,
                        2057,
                        2139
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        421,
                        433,
                        456,
                        480,
                        492,
                        542,
                        592,
                        621,
                        633,
                        645,
                        663,
                        679,
                        699,
                        733,
                        758,
                        781,
                        812,
                        839,
                        851,
                        879
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        918
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        424,
                        436,
                        459,
                        483,
                        495,
                        545,
                        595,
                        624,
                        636,
                        648,
                        666,
                        682,
                        702,
                        736,
                        761,
                        784,
                        815,
                        842,
                        854,
                        882
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        927,
                        1024,
                        1129,
                        1173,
                        1191,
                        1357,
                        1380,
                        2202,
                        2337,
                        2348,
                        2365,
                        2381,
                        2386,
                        2412,
                        2436,
                        2451,
                        2464,
                        2782,
                        2787,
                        2792,
                        2797,
                        2802,
                        2806
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}