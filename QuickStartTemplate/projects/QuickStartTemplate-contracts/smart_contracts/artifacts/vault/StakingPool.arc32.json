{
    "hints": {
        "initialize(uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updatePool()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "stake(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claimRewards()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "emergencyWithdraw()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getUserStake(byte[])(uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPendingRewards(byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 8
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "accRewardPerShare": {
                    "type": "uint64",
                    "key": "accRewardPerShare"
                },
                "admin": {
                    "type": "bytes",
                    "key": "admin"
                },
                "assetId": {
                    "type": "uint64",
                    "key": "assetId"
                },
                "emergencyPaused": {
                    "type": "uint64",
                    "key": "emergencyPaused"
                },
                "lastUpdateTime": {
                    "type": "uint64",
                    "key": "lastUpdateTime"
                },
                "minimumStake": {
                    "type": "uint64",
                    "key": "minimumStake"
                },
                "poolActive": {
                    "type": "uint64",
                    "key": "poolActive"
                },
                "rewardRate": {
                    "type": "uint64",
                    "key": "rewardRate"
                },
                "totalStaked": {
                    "type": "uint64",
                    "key": "totalStaked"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "StakingPool",
        "methods": [
            {
                "name": "initialize",
                "args": [
                    {
                        "type": "uint64",
                        "name": "assetId"
                    },
                    {
                        "type": "uint64",
                        "name": "rewardRate"
                    },
                    {
                        "type": "uint64",
                        "name": "minimumStake"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updatePool",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "stake",
                "args": [
                    {
                        "type": "uint64",
                        "name": "payment"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "claimRewards",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "emergencyWithdraw",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getUserStake",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "user"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64)"
                }
            },
            {
                "name": "getPendingRewards",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "user"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getPoolInfo",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint64,uint64)"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}