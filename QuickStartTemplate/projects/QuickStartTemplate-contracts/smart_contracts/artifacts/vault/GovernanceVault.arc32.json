{
    "hints": {
        "initialize(uint64,uint64,uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "createProposal(byte[],byte[],uint64,byte[],byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "vote(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "finalizeProposal(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "executeProposal(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "cancelProposal(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delegateVoting(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateVotingPower(byte[],uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateGovernanceParameters(uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pauseGovernance()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "resumeGovernance()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getVotingPower(byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getVote(byte[],uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "hasVoted(byte[],uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "calculateQuorumProgress(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 9
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin": {
                    "type": "bytes",
                    "key": "admin"
                },
                "executionDelay": {
                    "type": "uint64",
                    "key": "executionDelay"
                },
                "governanceActive": {
                    "type": "uint64",
                    "key": "governanceActive"
                },
                "governanceToken": {
                    "type": "uint64",
                    "key": "governanceToken"
                },
                "gracePeriod": {
                    "type": "uint64",
                    "key": "gracePeriod"
                },
                "proposalCount": {
                    "type": "uint64",
                    "key": "proposalCount"
                },
                "proposalThreshold": {
                    "type": "uint64",
                    "key": "proposalThreshold"
                },
                "quorumThreshold": {
                    "type": "uint64",
                    "key": "quorumThreshold"
                },
                "totalVotingPower": {
                    "type": "uint64",
                    "key": "totalVotingPower"
                },
                "votingDuration": {
                    "type": "uint64",
                    "key": "votingDuration"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "GovernanceVault",
        "methods": [
            {
                "name": "initialize",
                "args": [
                    {
                        "type": "uint64",
                        "name": "governanceTokenId"
                    },
                    {
                        "type": "uint64",
                        "name": "votingDuration"
                    },
                    {
                        "type": "uint64",
                        "name": "quorumThreshold"
                    },
                    {
                        "type": "uint64",
                        "name": "proposalThreshold"
                    },
                    {
                        "type": "uint64",
                        "name": "executionDelay"
                    },
                    {
                        "type": "uint64",
                        "name": "gracePeriod"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "createProposal",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "title"
                    },
                    {
                        "type": "byte[]",
                        "name": "description"
                    },
                    {
                        "type": "uint64",
                        "name": "proposalType"
                    },
                    {
                        "type": "byte[]",
                        "name": "targetContract"
                    },
                    {
                        "type": "byte[]",
                        "name": "executionData"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "vote",
                "args": [
                    {
                        "type": "uint64",
                        "name": "proposalId"
                    },
                    {
                        "type": "uint64",
                        "name": "support"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "finalizeProposal",
                "args": [
                    {
                        "type": "uint64",
                        "name": "proposalId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "executeProposal",
                "args": [
                    {
                        "type": "uint64",
                        "name": "proposalId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "cancelProposal",
                "args": [
                    {
                        "type": "uint64",
                        "name": "proposalId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "delegateVoting",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "delegate"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updateVotingPower",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "user"
                    },
                    {
                        "type": "uint64",
                        "name": "newPower"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updateGovernanceParameters",
                "args": [
                    {
                        "type": "uint64",
                        "name": "newVotingDuration"
                    },
                    {
                        "type": "uint64",
                        "name": "newQuorumThreshold"
                    },
                    {
                        "type": "uint64",
                        "name": "newProposalThreshold"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "pauseGovernance",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "resumeGovernance",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getVotingPower",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "user"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getProposal",
                "args": [
                    {
                        "type": "uint64",
                        "name": "proposalId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "getVote",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "voter"
                    },
                    {
                        "type": "uint64",
                        "name": "proposalId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "hasVoted",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "voter"
                    },
                    {
                        "type": "uint64",
                        "name": "proposalId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getGovernanceInfo",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "calculateQuorumProgress",
                "args": [
                    {
                        "type": "uint64",
                        "name": "proposalId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}