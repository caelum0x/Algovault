/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"RewardDistributor","structs":{},"methods":[{"name":"initialize","args":[{"type":"uint64","name":"initialRewardPool"},{"type":"uint64","name":"baseDistributionRate"},{"type":"uint64","name":"maxRate"},{"type":"uint64","name":"minRate"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addRewards","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Add rewards to the pool - expects a payment transaction in the same group\nThis method requires the sender to include a payment transaction to this contract\nin the same transaction group as this application call.","events":[],"recommendations":{}},{"name":"distributeRewards","args":[{"type":"byte[]","name":"poolAddress"},{"type":"uint64","name":"totalStaked"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"updateDistributionRate","args":[{"type":"uint64","name":"newRate"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"setTargetAPY","args":[{"type":"uint64","name":"totalStaked"},{"type":"uint64","name":"targetAPY"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"pauseDistribution","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"resumeDistribution","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"withdrawExcessRewards","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getDistributorInfo","args":[],"returns":{"type":"(uint64,uint64,uint64,bool,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"calculateProjectedRewards","args":[{"type":"uint64","name":"totalStaked"},{"type":"uint64","name":"timespan"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getCurrentAPY","args":[{"type":"uint64","name":"totalStaked"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":8,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"totalRewardPool":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxSZXdhcmRQb29s"},"distributionRate":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZGlzdHJpYnV0aW9uUmF0ZQ=="},"lastDistribution":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdERpc3RyaWJ1dGlvbg=="},"distributionActive":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZGlzdHJpYnV0aW9uQWN0aXZl"},"admin":{"keyType":"AVMString","valueType":"AVMBytes","key":"YWRtaW4="},"maxDistributionRate":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4RGlzdHJpYnV0aW9uUmF0ZQ=="},"minDistributionRate":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWluRGlzdHJpYnV0aW9uUmF0ZQ=="},"totalDistributed":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxEaXN0cmlidXRlZA=="},"distributionCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZGlzdHJpYnV0aW9uQ291bnQ="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[263,285,311,366,382,394,406,426,442,470,482],"errorMessage":"OnCompletion is not NoOp"},{"pc":[515],"errorMessage":"can only call when creating"},{"pc":[266,288,314,369,385,397,409,429,445,473,485],"errorMessage":"can only call when not creating"},{"pc":[524,569,580,588,597,602,621,629,640,654,666,757,764,775,801,820,829,841,852,863,875,895,901,909,936,940,945,949,954,959,969,984,1007,1015,1041],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAFkgKCUpY0dJgoPdG90YWxSZXdhcmRQb29sEmRpc3RyaWJ1dGlvbkFjdGl2ZRBkaXN0cmlidXRpb25SYXRlBWFkbWluEGxhc3REaXN0cmlidXRpb24EFR98dRNtYXhEaXN0cmlidXRpb25SYXRlE21pbkRpc3RyaWJ1dGlvblJhdGUQdG90YWxEaXN0cmlidXRlZBFkaXN0cmlidXRpb25Db3VudDEbQQFNggsEEJu+sQSztwFGBD5sjdIEgNnh+QS2XftvBO3UEDwEnJAlnATTvZi3BMPkCPME7YJXnAR3/2ObNhoAjgsA3QDRALUApQCRAIUAeQBpADIAGAACIkMxGRREMRhENhoBF4gC7RYnBUxQsCNDMRkURDEYRDYaARc2GgIXiAKVFicFTFCwI0MxGRREMRhEiAJnTwUWTwUWTwUWgAEAIk8HVE8FFk8FFk8FTwVQTwRQTwNQTwJQTFAnBUxQsCNDMRkURDEYRDYaAReIAf4jQzEZFEQxGESIAeEjQzEZFEQxGESIAckjQzEZFEQxGEQ2GgEXNhoCF4gBdCNDMRkURDEYRDYaAReIATgjQzEZFEQxGEQ2GgFXAgA2GgIXiABxFicFTFCwI0MxGRREMRhEiABZI0MxGRREMRhENhoBFzYaAhc2GgMXNhoEF4gADSNDMRlA/wIxGBREI0OKBAAiKWVEFEQoi/xnKov9ZycGi/5nJweL/2cnBDIHZykjZysxAGcnCCJnJwkiZ4kiKWVERImKAgGAACIpZUREi/9EIihlREQyB0kiJwRlRAkiKmVEC4v/CyUKi/+IAFYLJApJIihlRA1BAEMiKGVEjACLAEEANyIoZUSLAElOAgkoTGciJwhlREsBCCcITGciJwllRCMIJwlMZycEiwFnsbIIi/6yByOyECKyAbOJiwKMAEL/vIoBAYv/gYCU69wDD0EABIGWAYmL/4GAwtcvD0EAA4F9iYv/gYCt4gQPQQADgW6JJImKAQAxACIrZUQSRCInB2VEi/8OQQASIicGZUSL/w9BAAcjRCqL/2eJIkL/9ooCADEAIitlRBJEi/8lC4GAvODfCwpJIicGZUQNQQAMIicGZUSMACqLAGeJIicHZUSLAA1B//AiJwdlRIwAQv/mMQAiK2VEEkQpImeJMQAiK2VEEkQpI2cnBDIHZ4mKAQAxACIrZUQSRCIoZUSL/w9EIihlRIv/CShMZ7ExAIv/sgiyByOyECKyAbOJIihlRCIqZUQiJwRlRCIpZUQiJwhlRCInCWVEiYoCAYAAIillREEABYv+QAADIkyJIiplRIv/C4v+CyUKi/6I/tYLJApJjAAiKGVEDUEABiIoZURMiYsAQv/5igEBi/9AAAIiiYv/iP6uIiplRAskCoGA54QPC4v/CyUKJAuL/wqJ","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the RewardDistributor contract
 */
export type RewardDistributorArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initialize(uint64,uint64,uint64,uint64)void': {
      initialRewardPool: bigint | number
      baseDistributionRate: bigint | number
      maxRate: bigint | number
      minRate: bigint | number
    }
    'addRewards()void': Record<string, never>
    'distributeRewards(byte[],uint64)uint64': {
      poolAddress: Uint8Array
      totalStaked: bigint | number
    }
    'updateDistributionRate(uint64)void': {
      newRate: bigint | number
    }
    'setTargetAPY(uint64,uint64)void': {
      totalStaked: bigint | number
      targetApy: bigint | number
    }
    'pauseDistribution()void': Record<string, never>
    'resumeDistribution()void': Record<string, never>
    'withdrawExcessRewards(uint64)void': {
      amount: bigint | number
    }
    'getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)': Record<string, never>
    'calculateProjectedRewards(uint64,uint64)uint64': {
      totalStaked: bigint | number
      timespan: bigint | number
    }
    'getCurrentAPY(uint64)uint64': {
      totalStaked: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initialize(uint64,uint64,uint64,uint64)void': [initialRewardPool: bigint | number, baseDistributionRate: bigint | number, maxRate: bigint | number, minRate: bigint | number]
    'addRewards()void': []
    'distributeRewards(byte[],uint64)uint64': [poolAddress: Uint8Array, totalStaked: bigint | number]
    'updateDistributionRate(uint64)void': [newRate: bigint | number]
    'setTargetAPY(uint64,uint64)void': [totalStaked: bigint | number, targetApy: bigint | number]
    'pauseDistribution()void': []
    'resumeDistribution()void': []
    'withdrawExcessRewards(uint64)void': [amount: bigint | number]
    'getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)': []
    'calculateProjectedRewards(uint64,uint64)uint64': [totalStaked: bigint | number, timespan: bigint | number]
    'getCurrentAPY(uint64)uint64': [totalStaked: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type RewardDistributorReturns = {
  'initialize(uint64,uint64,uint64,uint64)void': void
  'addRewards()void': void
  'distributeRewards(byte[],uint64)uint64': bigint
  'updateDistributionRate(uint64)void': void
  'setTargetAPY(uint64,uint64)void': void
  'pauseDistribution()void': void
  'resumeDistribution()void': void
  'withdrawExcessRewards(uint64)void': void
  'getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)': [bigint, bigint, bigint, boolean, bigint, bigint]
  'calculateProjectedRewards(uint64,uint64)uint64': bigint
  'getCurrentAPY(uint64)uint64': bigint
}

/**
 * Defines the types of available calls and state of the RewardDistributor smart contract.
 */
export type RewardDistributorTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize(uint64,uint64,uint64,uint64)void' | 'initialize', {
      argsObj: RewardDistributorArgs['obj']['initialize(uint64,uint64,uint64,uint64)void']
      argsTuple: RewardDistributorArgs['tuple']['initialize(uint64,uint64,uint64,uint64)void']
      returns: RewardDistributorReturns['initialize(uint64,uint64,uint64,uint64)void']
    }>
    & Record<'addRewards()void' | 'addRewards', {
      argsObj: RewardDistributorArgs['obj']['addRewards()void']
      argsTuple: RewardDistributorArgs['tuple']['addRewards()void']
      returns: RewardDistributorReturns['addRewards()void']
    }>
    & Record<'distributeRewards(byte[],uint64)uint64' | 'distributeRewards', {
      argsObj: RewardDistributorArgs['obj']['distributeRewards(byte[],uint64)uint64']
      argsTuple: RewardDistributorArgs['tuple']['distributeRewards(byte[],uint64)uint64']
      returns: RewardDistributorReturns['distributeRewards(byte[],uint64)uint64']
    }>
    & Record<'updateDistributionRate(uint64)void' | 'updateDistributionRate', {
      argsObj: RewardDistributorArgs['obj']['updateDistributionRate(uint64)void']
      argsTuple: RewardDistributorArgs['tuple']['updateDistributionRate(uint64)void']
      returns: RewardDistributorReturns['updateDistributionRate(uint64)void']
    }>
    & Record<'setTargetAPY(uint64,uint64)void' | 'setTargetAPY', {
      argsObj: RewardDistributorArgs['obj']['setTargetAPY(uint64,uint64)void']
      argsTuple: RewardDistributorArgs['tuple']['setTargetAPY(uint64,uint64)void']
      returns: RewardDistributorReturns['setTargetAPY(uint64,uint64)void']
    }>
    & Record<'pauseDistribution()void' | 'pauseDistribution', {
      argsObj: RewardDistributorArgs['obj']['pauseDistribution()void']
      argsTuple: RewardDistributorArgs['tuple']['pauseDistribution()void']
      returns: RewardDistributorReturns['pauseDistribution()void']
    }>
    & Record<'resumeDistribution()void' | 'resumeDistribution', {
      argsObj: RewardDistributorArgs['obj']['resumeDistribution()void']
      argsTuple: RewardDistributorArgs['tuple']['resumeDistribution()void']
      returns: RewardDistributorReturns['resumeDistribution()void']
    }>
    & Record<'withdrawExcessRewards(uint64)void' | 'withdrawExcessRewards', {
      argsObj: RewardDistributorArgs['obj']['withdrawExcessRewards(uint64)void']
      argsTuple: RewardDistributorArgs['tuple']['withdrawExcessRewards(uint64)void']
      returns: RewardDistributorReturns['withdrawExcessRewards(uint64)void']
    }>
    & Record<'getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)' | 'getDistributorInfo', {
      argsObj: RewardDistributorArgs['obj']['getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)']
      argsTuple: RewardDistributorArgs['tuple']['getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)']
      returns: RewardDistributorReturns['getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)']
    }>
    & Record<'calculateProjectedRewards(uint64,uint64)uint64' | 'calculateProjectedRewards', {
      argsObj: RewardDistributorArgs['obj']['calculateProjectedRewards(uint64,uint64)uint64']
      argsTuple: RewardDistributorArgs['tuple']['calculateProjectedRewards(uint64,uint64)uint64']
      returns: RewardDistributorReturns['calculateProjectedRewards(uint64,uint64)uint64']
    }>
    & Record<'getCurrentAPY(uint64)uint64' | 'getCurrentAPY', {
      argsObj: RewardDistributorArgs['obj']['getCurrentAPY(uint64)uint64']
      argsTuple: RewardDistributorArgs['tuple']['getCurrentAPY(uint64)uint64']
      returns: RewardDistributorReturns['getCurrentAPY(uint64)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        totalRewardPool: bigint
        distributionRate: bigint
        lastDistribution: bigint
        distributionActive: bigint
        admin: BinaryState
        maxDistributionRate: bigint
        minDistributionRate: bigint
        totalDistributed: bigint
        distributionCount: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type RewardDistributorSignatures = keyof RewardDistributorTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type RewardDistributorNonVoidMethodSignatures = keyof RewardDistributorTypes['methods'] extends infer T ? T extends keyof RewardDistributorTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the RewardDistributor smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends RewardDistributorSignatures> = RewardDistributorTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the RewardDistributor smart contract to the method's return type
 */
export type MethodReturn<TSignature extends RewardDistributorSignatures> = RewardDistributorTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = RewardDistributorTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type RewardDistributorCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type RewardDistributorDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: RewardDistributorCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the RewardDistributor smart contract
 */
export abstract class RewardDistributorParamsFactory {
  /**
   * Constructs a no op call for the initialize(uint64,uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<RewardDistributorArgs['obj']['initialize(uint64,uint64,uint64,uint64)void'] | RewardDistributorArgs['tuple']['initialize(uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize(uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.initialRewardPool, params.args.baseDistributionRate, params.args.maxRate, params.args.minRate],
    }
  }
  /**
   * Constructs a no op call for the addRewards()void ABI method
   *
  * Add rewards to the pool - expects a payment transaction in the same group
  This method requires the sender to include a payment transaction to this contract
  in the same transaction group as this application call.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addRewards(params: CallParams<RewardDistributorArgs['obj']['addRewards()void'] | RewardDistributorArgs['tuple']['addRewards()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addRewards()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the distributeRewards(byte[],uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static distributeRewards(params: CallParams<RewardDistributorArgs['obj']['distributeRewards(byte[],uint64)uint64'] | RewardDistributorArgs['tuple']['distributeRewards(byte[],uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'distributeRewards(byte[],uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolAddress, params.args.totalStaked],
    }
  }
  /**
   * Constructs a no op call for the updateDistributionRate(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateDistributionRate(params: CallParams<RewardDistributorArgs['obj']['updateDistributionRate(uint64)void'] | RewardDistributorArgs['tuple']['updateDistributionRate(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateDistributionRate(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newRate],
    }
  }
  /**
   * Constructs a no op call for the setTargetAPY(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setTargetApy(params: CallParams<RewardDistributorArgs['obj']['setTargetAPY(uint64,uint64)void'] | RewardDistributorArgs['tuple']['setTargetAPY(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setTargetAPY(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.totalStaked, params.args.targetApy],
    }
  }
  /**
   * Constructs a no op call for the pauseDistribution()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pauseDistribution(params: CallParams<RewardDistributorArgs['obj']['pauseDistribution()void'] | RewardDistributorArgs['tuple']['pauseDistribution()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pauseDistribution()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the resumeDistribution()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resumeDistribution(params: CallParams<RewardDistributorArgs['obj']['resumeDistribution()void'] | RewardDistributorArgs['tuple']['resumeDistribution()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'resumeDistribution()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the withdrawExcessRewards(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawExcessRewards(params: CallParams<RewardDistributorArgs['obj']['withdrawExcessRewards(uint64)void'] | RewardDistributorArgs['tuple']['withdrawExcessRewards(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawExcessRewards(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getDistributorInfo(params: CallParams<RewardDistributorArgs['obj']['getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)'] | RewardDistributorArgs['tuple']['getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the calculateProjectedRewards(uint64,uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateProjectedRewards(params: CallParams<RewardDistributorArgs['obj']['calculateProjectedRewards(uint64,uint64)uint64'] | RewardDistributorArgs['tuple']['calculateProjectedRewards(uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateProjectedRewards(uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.totalStaked, params.args.timespan],
    }
  }
  /**
   * Constructs a no op call for the getCurrentAPY(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCurrentApy(params: CallParams<RewardDistributorArgs['obj']['getCurrentAPY(uint64)uint64'] | RewardDistributorArgs['tuple']['getCurrentAPY(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCurrentAPY(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.totalStaked],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the RewardDistributor smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class RewardDistributorFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `RewardDistributorFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new RewardDistributorClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new RewardDistributorClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the RewardDistributor smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: RewardDistributorDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new RewardDistributorClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the RewardDistributor smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the RewardDistributor smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the RewardDistributor smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new RewardDistributorClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the RewardDistributor smart contract
 */
export class RewardDistributorClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `RewardDistributorClient`
   *
   * @param appClient An `AppClient` instance which has been created with the RewardDistributor app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `RewardDistributorClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends RewardDistributorNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `RewardDistributorClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<RewardDistributorClient> {
    return new RewardDistributorClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `RewardDistributorClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<RewardDistributorClient> {
    return new RewardDistributorClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the RewardDistributor smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `initialize(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<RewardDistributorArgs['obj']['initialize(uint64,uint64,uint64,uint64)void'] | RewardDistributorArgs['tuple']['initialize(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RewardDistributorParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `addRewards()void` ABI method.
     *
    * Add rewards to the pool - expects a payment transaction in the same group
    This method requires the sender to include a payment transaction to this contract
    in the same transaction group as this application call.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addRewards: (params: CallParams<RewardDistributorArgs['obj']['addRewards()void'] | RewardDistributorArgs['tuple']['addRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RewardDistributorParamsFactory.addRewards(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `distributeRewards(byte[],uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    distributeRewards: (params: CallParams<RewardDistributorArgs['obj']['distributeRewards(byte[],uint64)uint64'] | RewardDistributorArgs['tuple']['distributeRewards(byte[],uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RewardDistributorParamsFactory.distributeRewards(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `updateDistributionRate(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateDistributionRate: (params: CallParams<RewardDistributorArgs['obj']['updateDistributionRate(uint64)void'] | RewardDistributorArgs['tuple']['updateDistributionRate(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RewardDistributorParamsFactory.updateDistributionRate(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `setTargetAPY(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setTargetApy: (params: CallParams<RewardDistributorArgs['obj']['setTargetAPY(uint64,uint64)void'] | RewardDistributorArgs['tuple']['setTargetAPY(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RewardDistributorParamsFactory.setTargetApy(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `pauseDistribution()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pauseDistribution: (params: CallParams<RewardDistributorArgs['obj']['pauseDistribution()void'] | RewardDistributorArgs['tuple']['pauseDistribution()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RewardDistributorParamsFactory.pauseDistribution(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `resumeDistribution()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resumeDistribution: (params: CallParams<RewardDistributorArgs['obj']['resumeDistribution()void'] | RewardDistributorArgs['tuple']['resumeDistribution()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RewardDistributorParamsFactory.resumeDistribution(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `withdrawExcessRewards(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawExcessRewards: (params: CallParams<RewardDistributorArgs['obj']['withdrawExcessRewards(uint64)void'] | RewardDistributorArgs['tuple']['withdrawExcessRewards(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RewardDistributorParamsFactory.withdrawExcessRewards(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getDistributorInfo: (params: CallParams<RewardDistributorArgs['obj']['getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)'] | RewardDistributorArgs['tuple']['getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(RewardDistributorParamsFactory.getDistributorInfo(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `calculateProjectedRewards(uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateProjectedRewards: (params: CallParams<RewardDistributorArgs['obj']['calculateProjectedRewards(uint64,uint64)uint64'] | RewardDistributorArgs['tuple']['calculateProjectedRewards(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RewardDistributorParamsFactory.calculateProjectedRewards(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `getCurrentAPY(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCurrentApy: (params: CallParams<RewardDistributorArgs['obj']['getCurrentAPY(uint64)uint64'] | RewardDistributorArgs['tuple']['getCurrentAPY(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(RewardDistributorParamsFactory.getCurrentApy(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the RewardDistributor smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `initialize(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<RewardDistributorArgs['obj']['initialize(uint64,uint64,uint64,uint64)void'] | RewardDistributorArgs['tuple']['initialize(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RewardDistributorParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `addRewards()void` ABI method.
     *
    * Add rewards to the pool - expects a payment transaction in the same group
    This method requires the sender to include a payment transaction to this contract
    in the same transaction group as this application call.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addRewards: (params: CallParams<RewardDistributorArgs['obj']['addRewards()void'] | RewardDistributorArgs['tuple']['addRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RewardDistributorParamsFactory.addRewards(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `distributeRewards(byte[],uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    distributeRewards: (params: CallParams<RewardDistributorArgs['obj']['distributeRewards(byte[],uint64)uint64'] | RewardDistributorArgs['tuple']['distributeRewards(byte[],uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RewardDistributorParamsFactory.distributeRewards(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `updateDistributionRate(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateDistributionRate: (params: CallParams<RewardDistributorArgs['obj']['updateDistributionRate(uint64)void'] | RewardDistributorArgs['tuple']['updateDistributionRate(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RewardDistributorParamsFactory.updateDistributionRate(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `setTargetAPY(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setTargetApy: (params: CallParams<RewardDistributorArgs['obj']['setTargetAPY(uint64,uint64)void'] | RewardDistributorArgs['tuple']['setTargetAPY(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RewardDistributorParamsFactory.setTargetApy(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `pauseDistribution()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pauseDistribution: (params: CallParams<RewardDistributorArgs['obj']['pauseDistribution()void'] | RewardDistributorArgs['tuple']['pauseDistribution()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RewardDistributorParamsFactory.pauseDistribution(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `resumeDistribution()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resumeDistribution: (params: CallParams<RewardDistributorArgs['obj']['resumeDistribution()void'] | RewardDistributorArgs['tuple']['resumeDistribution()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RewardDistributorParamsFactory.resumeDistribution(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `withdrawExcessRewards(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawExcessRewards: (params: CallParams<RewardDistributorArgs['obj']['withdrawExcessRewards(uint64)void'] | RewardDistributorArgs['tuple']['withdrawExcessRewards(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RewardDistributorParamsFactory.withdrawExcessRewards(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getDistributorInfo: (params: CallParams<RewardDistributorArgs['obj']['getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)'] | RewardDistributorArgs['tuple']['getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(RewardDistributorParamsFactory.getDistributorInfo(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `calculateProjectedRewards(uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateProjectedRewards: (params: CallParams<RewardDistributorArgs['obj']['calculateProjectedRewards(uint64,uint64)uint64'] | RewardDistributorArgs['tuple']['calculateProjectedRewards(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RewardDistributorParamsFactory.calculateProjectedRewards(params))
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `getCurrentAPY(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCurrentApy: (params: CallParams<RewardDistributorArgs['obj']['getCurrentAPY(uint64)uint64'] | RewardDistributorArgs['tuple']['getCurrentAPY(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(RewardDistributorParamsFactory.getCurrentApy(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the RewardDistributor smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `initialize(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<RewardDistributorArgs['obj']['initialize(uint64,uint64,uint64,uint64)void'] | RewardDistributorArgs['tuple']['initialize(uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RewardDistributorParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | RewardDistributorReturns['initialize(uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `addRewards()void` ABI method.
     *
    * Add rewards to the pool - expects a payment transaction in the same group
    This method requires the sender to include a payment transaction to this contract
    in the same transaction group as this application call.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addRewards: async (params: CallParams<RewardDistributorArgs['obj']['addRewards()void'] | RewardDistributorArgs['tuple']['addRewards()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RewardDistributorParamsFactory.addRewards(params))
      return {...result, return: result.return as unknown as (undefined | RewardDistributorReturns['addRewards()void'])}
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `distributeRewards(byte[],uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    distributeRewards: async (params: CallParams<RewardDistributorArgs['obj']['distributeRewards(byte[],uint64)uint64'] | RewardDistributorArgs['tuple']['distributeRewards(byte[],uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RewardDistributorParamsFactory.distributeRewards(params))
      return {...result, return: result.return as unknown as (undefined | RewardDistributorReturns['distributeRewards(byte[],uint64)uint64'])}
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `updateDistributionRate(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateDistributionRate: async (params: CallParams<RewardDistributorArgs['obj']['updateDistributionRate(uint64)void'] | RewardDistributorArgs['tuple']['updateDistributionRate(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RewardDistributorParamsFactory.updateDistributionRate(params))
      return {...result, return: result.return as unknown as (undefined | RewardDistributorReturns['updateDistributionRate(uint64)void'])}
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `setTargetAPY(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setTargetApy: async (params: CallParams<RewardDistributorArgs['obj']['setTargetAPY(uint64,uint64)void'] | RewardDistributorArgs['tuple']['setTargetAPY(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RewardDistributorParamsFactory.setTargetApy(params))
      return {...result, return: result.return as unknown as (undefined | RewardDistributorReturns['setTargetAPY(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `pauseDistribution()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pauseDistribution: async (params: CallParams<RewardDistributorArgs['obj']['pauseDistribution()void'] | RewardDistributorArgs['tuple']['pauseDistribution()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RewardDistributorParamsFactory.pauseDistribution(params))
      return {...result, return: result.return as unknown as (undefined | RewardDistributorReturns['pauseDistribution()void'])}
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `resumeDistribution()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resumeDistribution: async (params: CallParams<RewardDistributorArgs['obj']['resumeDistribution()void'] | RewardDistributorArgs['tuple']['resumeDistribution()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RewardDistributorParamsFactory.resumeDistribution(params))
      return {...result, return: result.return as unknown as (undefined | RewardDistributorReturns['resumeDistribution()void'])}
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `withdrawExcessRewards(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawExcessRewards: async (params: CallParams<RewardDistributorArgs['obj']['withdrawExcessRewards(uint64)void'] | RewardDistributorArgs['tuple']['withdrawExcessRewards(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RewardDistributorParamsFactory.withdrawExcessRewards(params))
      return {...result, return: result.return as unknown as (undefined | RewardDistributorReturns['withdrawExcessRewards(uint64)void'])}
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getDistributorInfo: async (params: CallParams<RewardDistributorArgs['obj']['getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)'] | RewardDistributorArgs['tuple']['getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(RewardDistributorParamsFactory.getDistributorInfo(params))
      return {...result, return: result.return as unknown as (undefined | RewardDistributorReturns['getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)'])}
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `calculateProjectedRewards(uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateProjectedRewards: async (params: CallParams<RewardDistributorArgs['obj']['calculateProjectedRewards(uint64,uint64)uint64'] | RewardDistributorArgs['tuple']['calculateProjectedRewards(uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RewardDistributorParamsFactory.calculateProjectedRewards(params))
      return {...result, return: result.return as unknown as (undefined | RewardDistributorReturns['calculateProjectedRewards(uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the RewardDistributor smart contract using the `getCurrentAPY(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCurrentApy: async (params: CallParams<RewardDistributorArgs['obj']['getCurrentAPY(uint64)uint64'] | RewardDistributorArgs['tuple']['getCurrentAPY(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(RewardDistributorParamsFactory.getCurrentApy(params))
      return {...result, return: result.return as unknown as (undefined | RewardDistributorReturns['getCurrentAPY(uint64)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new RewardDistributorClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current RewardDistributor app
   */
  state = {
    /**
     * Methods to access global state for the current RewardDistributor app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          totalRewardPool: result.totalRewardPool,
          distributionRate: result.distributionRate,
          lastDistribution: result.lastDistribution,
          distributionActive: result.distributionActive,
          admin: new BinaryStateValue(result.admin),
          maxDistributionRate: result.maxDistributionRate,
          minDistributionRate: result.minDistributionRate,
          totalDistributed: result.totalDistributed,
          distributionCount: result.distributionCount,
        }
      },
      /**
       * Get the current value of the totalRewardPool key in global state
       */
      totalRewardPool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalRewardPool")) as bigint | undefined },
      /**
       * Get the current value of the distributionRate key in global state
       */
      distributionRate: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("distributionRate")) as bigint | undefined },
      /**
       * Get the current value of the lastDistribution key in global state
       */
      lastDistribution: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastDistribution")) as bigint | undefined },
      /**
       * Get the current value of the distributionActive key in global state
       */
      distributionActive: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("distributionActive")) as bigint | undefined },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin")) as Uint8Array | undefined) },
      /**
       * Get the current value of the maxDistributionRate key in global state
       */
      maxDistributionRate: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxDistributionRate")) as bigint | undefined },
      /**
       * Get the current value of the minDistributionRate key in global state
       */
      minDistributionRate: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minDistributionRate")) as bigint | undefined },
      /**
       * Get the current value of the totalDistributed key in global state
       */
      totalDistributed: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalDistributed")) as bigint | undefined },
      /**
       * Get the current value of the distributionCount key in global state
       */
      distributionCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("distributionCount")) as bigint | undefined },
    },
  }

  public newGroup(): RewardDistributorComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initialize(uint64,uint64,uint64,uint64)void method call against the RewardDistributor contract
       */
      initialize(params: CallParams<RewardDistributorArgs['obj']['initialize(uint64,uint64,uint64,uint64)void'] | RewardDistributorArgs['tuple']['initialize(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addRewards()void method call against the RewardDistributor contract
       */
      addRewards(params: CallParams<RewardDistributorArgs['obj']['addRewards()void'] | RewardDistributorArgs['tuple']['addRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a distributeRewards(byte[],uint64)uint64 method call against the RewardDistributor contract
       */
      distributeRewards(params: CallParams<RewardDistributorArgs['obj']['distributeRewards(byte[],uint64)uint64'] | RewardDistributorArgs['tuple']['distributeRewards(byte[],uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.distributeRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('distributeRewards(byte[],uint64)uint64', v))
        return this
      },
      /**
       * Add a updateDistributionRate(uint64)void method call against the RewardDistributor contract
       */
      updateDistributionRate(params: CallParams<RewardDistributorArgs['obj']['updateDistributionRate(uint64)void'] | RewardDistributorArgs['tuple']['updateDistributionRate(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateDistributionRate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setTargetAPY(uint64,uint64)void method call against the RewardDistributor contract
       */
      setTargetApy(params: CallParams<RewardDistributorArgs['obj']['setTargetAPY(uint64,uint64)void'] | RewardDistributorArgs['tuple']['setTargetAPY(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setTargetApy(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a pauseDistribution()void method call against the RewardDistributor contract
       */
      pauseDistribution(params: CallParams<RewardDistributorArgs['obj']['pauseDistribution()void'] | RewardDistributorArgs['tuple']['pauseDistribution()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pauseDistribution(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a resumeDistribution()void method call against the RewardDistributor contract
       */
      resumeDistribution(params: CallParams<RewardDistributorArgs['obj']['resumeDistribution()void'] | RewardDistributorArgs['tuple']['resumeDistribution()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resumeDistribution(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdrawExcessRewards(uint64)void method call against the RewardDistributor contract
       */
      withdrawExcessRewards(params: CallParams<RewardDistributorArgs['obj']['withdrawExcessRewards(uint64)void'] | RewardDistributorArgs['tuple']['withdrawExcessRewards(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawExcessRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64) method call against the RewardDistributor contract
       */
      getDistributorInfo(params: CallParams<RewardDistributorArgs['obj']['getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)'] | RewardDistributorArgs['tuple']['getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getDistributorInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)', v))
        return this
      },
      /**
       * Add a calculateProjectedRewards(uint64,uint64)uint64 method call against the RewardDistributor contract
       */
      calculateProjectedRewards(params: CallParams<RewardDistributorArgs['obj']['calculateProjectedRewards(uint64,uint64)uint64'] | RewardDistributorArgs['tuple']['calculateProjectedRewards(uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateProjectedRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateProjectedRewards(uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a getCurrentAPY(uint64)uint64 method call against the RewardDistributor contract
       */
      getCurrentApy(params: CallParams<RewardDistributorArgs['obj']['getCurrentAPY(uint64)uint64'] | RewardDistributorArgs['tuple']['getCurrentAPY(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCurrentApy(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCurrentAPY(uint64)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the RewardDistributor contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as RewardDistributorComposer
  }
}
export type RewardDistributorComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize(uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<RewardDistributorArgs['obj']['initialize(uint64,uint64,uint64,uint64)void'] | RewardDistributorArgs['tuple']['initialize(uint64,uint64,uint64,uint64)void']>): RewardDistributorComposer<[...TReturns, RewardDistributorReturns['initialize(uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the addRewards()void ABI method.
   *
  * Add rewards to the pool - expects a payment transaction in the same group
  This method requires the sender to include a payment transaction to this contract
  in the same transaction group as this application call.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addRewards(params?: CallParams<RewardDistributorArgs['obj']['addRewards()void'] | RewardDistributorArgs['tuple']['addRewards()void']>): RewardDistributorComposer<[...TReturns, RewardDistributorReturns['addRewards()void'] | undefined]>

  /**
   * Calls the distributeRewards(byte[],uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  distributeRewards(params?: CallParams<RewardDistributorArgs['obj']['distributeRewards(byte[],uint64)uint64'] | RewardDistributorArgs['tuple']['distributeRewards(byte[],uint64)uint64']>): RewardDistributorComposer<[...TReturns, RewardDistributorReturns['distributeRewards(byte[],uint64)uint64'] | undefined]>

  /**
   * Calls the updateDistributionRate(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateDistributionRate(params?: CallParams<RewardDistributorArgs['obj']['updateDistributionRate(uint64)void'] | RewardDistributorArgs['tuple']['updateDistributionRate(uint64)void']>): RewardDistributorComposer<[...TReturns, RewardDistributorReturns['updateDistributionRate(uint64)void'] | undefined]>

  /**
   * Calls the setTargetAPY(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setTargetApy(params?: CallParams<RewardDistributorArgs['obj']['setTargetAPY(uint64,uint64)void'] | RewardDistributorArgs['tuple']['setTargetAPY(uint64,uint64)void']>): RewardDistributorComposer<[...TReturns, RewardDistributorReturns['setTargetAPY(uint64,uint64)void'] | undefined]>

  /**
   * Calls the pauseDistribution()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pauseDistribution(params?: CallParams<RewardDistributorArgs['obj']['pauseDistribution()void'] | RewardDistributorArgs['tuple']['pauseDistribution()void']>): RewardDistributorComposer<[...TReturns, RewardDistributorReturns['pauseDistribution()void'] | undefined]>

  /**
   * Calls the resumeDistribution()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resumeDistribution(params?: CallParams<RewardDistributorArgs['obj']['resumeDistribution()void'] | RewardDistributorArgs['tuple']['resumeDistribution()void']>): RewardDistributorComposer<[...TReturns, RewardDistributorReturns['resumeDistribution()void'] | undefined]>

  /**
   * Calls the withdrawExcessRewards(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawExcessRewards(params?: CallParams<RewardDistributorArgs['obj']['withdrawExcessRewards(uint64)void'] | RewardDistributorArgs['tuple']['withdrawExcessRewards(uint64)void']>): RewardDistributorComposer<[...TReturns, RewardDistributorReturns['withdrawExcessRewards(uint64)void'] | undefined]>

  /**
   * Calls the getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDistributorInfo(params?: CallParams<RewardDistributorArgs['obj']['getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)'] | RewardDistributorArgs['tuple']['getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)']>): RewardDistributorComposer<[...TReturns, RewardDistributorReturns['getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)'] | undefined]>

  /**
   * Calls the calculateProjectedRewards(uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateProjectedRewards(params?: CallParams<RewardDistributorArgs['obj']['calculateProjectedRewards(uint64,uint64)uint64'] | RewardDistributorArgs['tuple']['calculateProjectedRewards(uint64,uint64)uint64']>): RewardDistributorComposer<[...TReturns, RewardDistributorReturns['calculateProjectedRewards(uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the getCurrentAPY(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCurrentApy(params?: CallParams<RewardDistributorArgs['obj']['getCurrentAPY(uint64)uint64'] | RewardDistributorArgs['tuple']['getCurrentAPY(uint64)uint64']>): RewardDistributorComposer<[...TReturns, RewardDistributorReturns['getCurrentAPY(uint64)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the RewardDistributor smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): RewardDistributorComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): RewardDistributorComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<RewardDistributorComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<RewardDistributorComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<RewardDistributorComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<RewardDistributorComposerResults<TReturns>>
}
export type RewardDistributorComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

