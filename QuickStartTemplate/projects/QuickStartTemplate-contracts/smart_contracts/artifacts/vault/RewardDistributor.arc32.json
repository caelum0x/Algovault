{
    "hints": {
        "initialize(uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addRewards()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "distributeRewards(byte[],uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateDistributionRate(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setTargetAPY(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "pauseDistribution()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "resumeDistribution()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdrawExcessRewards(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getDistributorInfo()(uint64,uint64,uint64,bool,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "calculateProjectedRewards(uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getCurrentAPY(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 8
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin": {
                    "type": "bytes",
                    "key": "admin"
                },
                "distributionActive": {
                    "type": "uint64",
                    "key": "distributionActive"
                },
                "distributionCount": {
                    "type": "uint64",
                    "key": "distributionCount"
                },
                "distributionRate": {
                    "type": "uint64",
                    "key": "distributionRate"
                },
                "lastDistribution": {
                    "type": "uint64",
                    "key": "lastDistribution"
                },
                "maxDistributionRate": {
                    "type": "uint64",
                    "key": "maxDistributionRate"
                },
                "minDistributionRate": {
                    "type": "uint64",
                    "key": "minDistributionRate"
                },
                "totalDistributed": {
                    "type": "uint64",
                    "key": "totalDistributed"
                },
                "totalRewardPool": {
                    "type": "uint64",
                    "key": "totalRewardPool"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "RewardDistributor",
        "methods": [
            {
                "name": "initialize",
                "args": [
                    {
                        "type": "uint64",
                        "name": "initialRewardPool"
                    },
                    {
                        "type": "uint64",
                        "name": "baseDistributionRate"
                    },
                    {
                        "type": "uint64",
                        "name": "maxRate"
                    },
                    {
                        "type": "uint64",
                        "name": "minRate"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "addRewards",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Add rewards to the pool - expects a payment transaction in the same group\nThis method requires the sender to include a payment transaction to this contract\nin the same transaction group as this application call."
            },
            {
                "name": "distributeRewards",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "poolAddress"
                    },
                    {
                        "type": "uint64",
                        "name": "totalStaked"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "updateDistributionRate",
                "args": [
                    {
                        "type": "uint64",
                        "name": "newRate"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setTargetAPY",
                "args": [
                    {
                        "type": "uint64",
                        "name": "totalStaked"
                    },
                    {
                        "type": "uint64",
                        "name": "targetAPY"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "pauseDistribution",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "resumeDistribution",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "withdrawExcessRewards",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getDistributorInfo",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,bool,uint64,uint64)"
                }
            },
            {
                "name": "calculateProjectedRewards",
                "args": [
                    {
                        "type": "uint64",
                        "name": "totalStaked"
                    },
                    {
                        "type": "uint64",
                        "name": "timespan"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getCurrentAPY",
                "args": [
                    {
                        "type": "uint64",
                        "name": "totalStaked"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}