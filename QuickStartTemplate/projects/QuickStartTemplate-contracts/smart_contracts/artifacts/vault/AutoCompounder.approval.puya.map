{
  "version": 3,
  "sources": [
    "/Users/arhansubasi/Algorand-dApp-Quick-Start-Template-TypeScript/QuickStartTemplate/projects/QuickStartTemplate-contracts/smart_contracts/vault/auto_compounder.algo.ts"
  ],
  "mappingsrWF;;;AAAA;;;AAqWE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAvTF;;;AAAA;;;AAuTE;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA3BA;;AAAA;AAAA;AAAA;;AAAA;AA5RF;;;AAAA;;;AA4RE;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARC;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAtQH;;;AAAA;;;AAsQG;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AA9PH;;;AAAA;AA8PG;;;AAAA;;AAdD;;AAAA;AAAA;AAAA;;AAAA;AAhPF;;;AAAA;AAAA;;;AAAA;AAgPE;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAhOF;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAgOE;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAxNF;;;AAAA;AAAA;;;AAAA;AAwNE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvEC;;AAAA;AAAA;AAAA;;AAAA;AAjJH;;;AAAA;;;AAiJG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA3BD;;AAAA;AAAA;AAAA;;AAAA;AAtHF;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAsHE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/BC;;AAAA;AAAA;AAAA;;AAAA;AAvFH;;;AAAA;;;AAAA;;;AAAA;AAuFG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AA/CH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA+CG;;;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AAvBH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAuBG;;;AAAA;;AAvBH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAuBE;;;AANA;AAAA;AAAA;AAAA;AAaS;AAAP;AAlBF;;;;;;;;;;;;;;;;;;;;;AAoBE;;AAAA;AAnBF;;;;;;;;;;;;;;;;;;;AAoBE;;AAAA;AAzBF;AA0BE;;AAAA;AAzBF;;AA0BE;;AAAA;AAnBF;;AAoByB;;AAAvB;AAlCF;AAoCiC;AAA/B;AAnCF;;AAoC8B;AAA5B;AAnCF;;AAoCsC;AAApC;AAnCF;;AAoCyC;;AAAvC;AAxBF;AAyB+B;AAA7B;AAtBF;;AAuBiC;AAA/B;AAtBF;;AAuB8B;AAA5B;;AAGF;;;AA9BA;AAAA;AAAA;AAAA;AAqCE;AACO;;AAAa;;;AAAb;AAAP;AACA;;AAAA;AACO;;AAAqB;;;AAArB;AAAP;AACiB;;AAjEZ;AAkEiC;;AAlEjC;AAAA;AAAA;;AAAA;AAmEmC;;AAnEnC;AAAA;;AAAA;AAoEmC;;AApEnC;AAAA;;AAAA;AAqEmC;;AArEnC;AAAA;;AAsE2C;;AAtE3C;AAAA;AAuE+C;AAAA;;AAAjC;;;AAA2E;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAU;AAA3C;AACpB;AAAzC;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;;AAAA;AAAA;AACI;;;AApEN;AAAA;AAAA;AAAA;AAqEkE;AAA/B;AArEnC;AAqEI;AAAA;;AAP0G;;;;AAW9G;;;AAEmB;;AACqB;;AArFjC;AAAA;;AAsFmC;AAAA;;AAAxC;AACoD;AAAA;AAAA;AAAA;AAAA;AAAU;AAA3C;AACnB;;;AAC2C;AAAzC;AAAA;;AAAA;AAAA;AAhFJ;AAAA;AAAA;AAAA;AAiFkE;AAA/B;AAjFnC;AAiFI;AAAA;;AAIJ;;;;;;;;AAtEA;AAAA;AAAA;AAAA;AAwEE;AAhGK;;AAiGiC;;AAjGjC;AAAA;AAAA;;AAkGmC;;AAlGnC;AAAA;AAAA;;AAmGmC;;AAnGnC;AAAA;AAAA;;AAoGmC;;AApGnC;AAAA;AAqGmC;AAAA;;AAAjC;;;AAA4E;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAU;AAA3C;AAA3C;;;;AAAP;AACqD;;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAxGhD;;AA0GsC;;AA1GtC;AAAA;AAAA;;AA2GsD;AAAA;;AAAtC;;;AAAqF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5F;;AAAmB;AAAA;;AAAA;AAA1B;AAAP;AACO;;AAAA;;AAAA;AAAP;AA4PO;AAzPA;;AAAA;AAAP;AACM;;AAwPC;AAxPY;;;AAEb;;AAAA;;AAsPC;AAtPkB;;;AAEzB;;AAAA;;AAAA;;AAoPO;AApPP;;AAAA;;;AAEA;AAAA;;AAAA;;;AAEqD;;AAArD;AAAA;;AAAA;AAAA;AACA;;AAAA;AAfkH;;;;;;;;AAkBpH;;;AA9GA;AAAA;AAAA;AAAA;AAgHuB;;AAAA;AAA6C;;AAA9C;AAWF;;AAAA;AAAA;AAAZ;;AAAY;AAWlB;AAGF;;;;AAhIA;;AAAA;AAAA;AAAA;AAkIE;AAG8B;AAA1B;AAGM;;AAAA;AAAA;AAAA;AAAA;;;AAAN;;;AAAwC;;AAAA;AAAA;;;;;AAAxC;;;AAC6B;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAA3B;;;AAAJ;;;AACoD;;;AAAA;AAA5C;;AAAA;AAAa;;;;;;;;;;;;;;AAInB;;AAAe;AAAf;;;;AAAA;;;AAAwC;;AAAA;AAAA;AAAS;AAA7B;;;;;AAApB;;;AAC6B;;AAAA;;;AAAM;AAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAA3B;;;;;;;AAAJ;;;AACoD;;;;AAAA;AAA5C;;AAAA;AAAa;;;AACnB;;AAAkB;;;;;;;;AAGlB;;AAAe;AAAf;;;;AAAA;;;AAAwC;;AAAA;AAAA;AAAS;AAA7B;;;;;AAApB;;;AAC6B;;AAAA;;;AAAM;AAAN;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAA3B;;;;;;;AAAJ;;;AACoD;;;;AAAA;AAA5C;;AAAA;AAAa;;;AACnB;;AAAkB;;;;;;;;AAGlB;;AAAe;;AAAf;;;;AAAA;;;AAAwC;;AAAA;AAAA;AAAS;;AAA7B;;;;;AAApB;;;AAC6B;;AAAA;;;AAAM;;AAAN;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAA3B;;;;;;;AAAJ;;;AACoD;;;;AAAA;AAA5C;;AAAA;AAAa;;;AACnB;;AAAkB;;;;;;;;AAGlB;;AAAe;;AAAf;;;;AAAA;;;AAAwC;;AAAA;AAAA;AAAS;;AAA7B;;;;;AAApB;;;AAC6B;;AAAA;;;AAAM;;AAAN;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAA3B;;;;;;;AAAJ;;;AACoD;;;;AAAA;AAA5C;;AAAA;AAAa;;;AACnB;;AAAkB;;;;;;;;AAGlB;;AAAe;;AAAf;;;;AAAA;;;AAAwC;;AAAA;AAAA;AAAS;;AAA7B;;;;;AAApB;;;AAC6B;;AAAA;;;AAAM;;AAAN;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAA3B;;;;;;;AAAJ;;;AACoD;;;;AAAA;AAA5C;;AAAA;AAAa;;;AACnB;;AAAkB;;;;;;;;AAGlB;;AAAe;;AAAf;;;;AAAA;;;AAAwC;;AAAA;AAAA;AAAS;;AAA7B;;;;;AAApB;;;AAC6B;;AAAA;;;AAAM;;AAAN;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAA3B;;;;;;;AAAJ;;;AACoD;;;;AAAA;AAA5C;;AAAA;AAAa;;;AACnB;;AAAkB;;;;;;;;AAGlB;;AAAe;;AAAf;;;;AAAA;;;AAAwC;;AAAA;AAAA;AAAS;;AAA7B;;;;;AAApB;;;AAC6B;;AAAA;;;AAAM;;AAAN;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAA3B;;;;;;;AAAJ;;;AACoD;;;;AAAA;AAA5C;;AAAA;AAAa;;;AACnB;;AAAkB;;;;;;;;AAGlB;;AAAe;;AAAf;;;;AAAA;;;AAAwC;;AAAA;AAAA;AAAS;;AAA7B;;;;;AAApB;;;AAC6B;;AAAA;;;AAAM;;AAAN;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAA3B;;;;;;;AAAJ;;;AACoD;;;;AAAA;AAA5C;;AAAA;AAAa;;;AACnB;;AAAkB;;;;;;;;AAGlB;;AAAe;;AAAf;;;;AAAA;;;AAAwC;;AAAA;AAAA;AAAS;;AAA7B;;;;;AAApB;;;AAC6B;;AAAA;;;AAAM;;AAAN;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAA3B;;;;;;;AAAJ;;;AACoD;;;;AAAA;AAA5C;;AAAA;AAAa;;;AACnB;;AAAkB;;;;;AAGtB;;AAAA;AAGF;;;;;AACE;;AAAA;;;AAAyC;AAAP;AAAA;AAjNpC;AAAA;AAAA;AAAA;AAkNuB;;AAAA;AAA6C;;AAA9C;AACd;;AAAY;AAAZ;AAAA;;AACY;;AAAA;AAAA;;;AAA2B;;AAAA;;AAAA;AACzB;;AAAZ;AAAD;;AAAA;AAAP;AAAA;AADkF;;;;AAIpF;;;AAQoB;;AA/Ob;;AAgP+C;;;;;;;;;;;AAhP/C;AAIA;AAAA;AAJA;AAAA;;AAAA;AAAA;AAgPwF;;;;;;;;;AAhPxF;AAgPL;;AAAA;AAAA;AAhPK;AAiPwF;;;;;;;;;;;;;AAjPxF;AAiPL;;AAAA;AAAA;AAjPK;AAkPwF;;;;;;AAlPxF;AAkPL;;AAAA;AAAA;AAlPK;AAmPwF;;;;;;AAnPxF;AAmPL;;AAAA;AAAA;AAC6F;;;;;AApPxF;AAoPL;AAAA;;AAGF;;;AA7OA;AAAA;;AAAA;AAAA;AA8O0D;AAA5B;AA9O9B;;AA8OE;AAAA;AA7OF;AAAA;;AAAA;AAAA;AA8OsC;;AAAA;AA9OtC;;AA8OE;AAAA;AA7OF;;AA8OyC;;AAAvC;AA9NF;AAAA;;AAAA;AAAA;AA+NM;;AAAA;AAAJ;;;AA/NF;;AAgOI;;AAAA;AAjOJ;AAAA;;AAAA;AAAA;AAjBA;AAAA;;AAAA;AAAA;AAuPiD;AAAa;AAAb;AAAd;;AAAA;AAAD;;AAAA;AAAD;AAAA;AAtOjC;;AAsOE;AAAA;;AAIF;;;AAEa;;AAhPb;AAAA;;AAAA;AAAA;AAgPS;AAAP;AACO;;AAAc;;;AAAd;AAAP;AAzPF;AA2PE;;AAAA;;AAGF;;;AAEa;;AAxPb;AAAA;;AAAA;AAAA;AAwPS;AAAP;AA/PF;;AAiQE;;AAAA;;AAKW;;AA/Pb;AAAA;;AAAA;AAAA;AA+PS;AAAP;AA9PF;AAgQ+B;AAA7B;;AAKW;;AAtQb;AAAA;;AAAA;AAAA;AAsQS;AAAP;AArQF;AAuQ+B;AAA7B;;AAIF;;;;;;;;AAnSO;;AAoSiC;;AApSjC;AAAA;AAAA;;AAqSmC;;AArSnC;AAAA;AAAA;;AAsSmC;;AAtSnC;AAAA;AAAA;;AAuSmC;;AAvSnC;AAAA;AAwSiC;AAAA;;AAAlC;;;AAA6E;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAU;AAA3C;AAA5C;;;AACK;AAAP;;AAAA;AAEmD;;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AA7ShD;;AA8SsC;;AA9StC;AAAA;AAAA;;AA+SsD;AAAA;;AAAtC;;;AAAqF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/F;;AAAkB;AAAA;;AAAA;AAAzB;AAAJ;;;AACS;AAAP;;AAAA;AAGF;;AAAA;;;AACS;AAAP;;AAAA;AAoDK;AAjDH;;AAAA;AAAJ;;;AACS;AAAP;;AAAA;AAEK;AAAP;;AAAA;AAZkH;;;;AAepH;;;;;;;AA9TO;;AAgUiC;;AAhUjC;AAAA;AAAA;;AAiUmC;;AAjUnC;AAAA;AAAA;;AAkUmC;;AAlUnC;AAAA;AAAA;;AAmUmC;;AAnUnC;AAAA;AAAA;;AAoU2C;;AApU3C;AAAA;AAqU4C;AAAA;;AAAjC;;;AAA2E;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AACtC;;AAAA;AAAA;;AAAnC;;;AAA+E;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAC5C;;AAAA;AAAA;;AAAnC;;;AAA+E;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAC5C;;AAAA;AAAA;;AAAnC;;;AAA+E;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAC5B;;AAAA;AAAA;;AAA3C;;;AAA+F;;AAAA;AAAA;AAAA;AAAA;AAAA;AACzH;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AADiI;;;;AADxB;;;;;;AADA;;;;;;AADA;;;;;;AADN;;;;;;AA5TrG;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAgBA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAbA;AAAA;AAAA;AAAA;AAgUE;AA6BF;;;;AACQ;;AAAW;;;AAAX;;AAAA;AACc;AAAhB;AAAJ;;;AACS;AAAP;;AAAA;AA/WG;;AAiXsC;;AAjXtC;AAAA;AAAA;;AAkXsD;AAAA;;AAAtC;;;AAAqF;;AAAA;AAAA;AAAA;AAAA;AAAA;AACnG;;AAAA;AAAP;;AAAA;AADkH;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 3000 10000"
    },
    "10": {
      "op": "bytecblock 0x151f7c75 \"compoundsActive\" \"totalUsersEnabled\" \"compoundFeeRate\" \"admin\" \"totalCompounds\" \"_enabled\" \"totalRewardsCompounded\" \"averageEfficiency\" \"bestEfficiency\" \"_frequency\" \"_threshold\" \"_maxGasFee\" \"_lastCompound\" 0x151f7c750000000000000000 \"feeCollector\" \"lastGlobalCompound\" \"_slippageTolerance\""
    },
    "264": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "266": {
      "op": "bz main_bare_routing@25",
      "stack_out": []
    },
    "269": {
      "op": "pushbytess 0x6d79c89c 0x0fe93bce 0x726bcbe1 0xd7021f77 0x231f673f 0x893a0ebe 0xbae90038 0x9f163dc1 0xa7ecb6d8 0xa7056935 0x4e825a90 0x0e136baa 0xc94bf3db 0xbf77a915 0xda29bb89 0x004e6bec 0x2342c0eb 0xd6f2f27c 0xfe57ab5c 0x2d3bc29c // method \"initialize(byte[],byte[],uint64,byte[])void\", method \"enableAutoCompound(uint64,uint64,uint64,uint64)void\", method \"disableAutoCompound()void\", method \"triggerCompound(byte[],uint64)uint64\", method \"executeCompound(byte[],uint64,uint64)uint64\", method \"batchCompound(byte[][],uint64[])uint64\", method \"calculateCompoundEfficiency(uint64,uint64)uint64\", method \"recordCompoundHistory(byte[],uint64,uint64,uint64,uint64)void\", method \"updateGlobalStats(uint64,uint64)void\", method \"updateCompoundFee(uint64)void\", method \"updateFeeCollector(byte[])void\", method \"pauseCompounds()void\", method \"resumeCompounds()void\", method \"isEligibleForCompound(byte[])bool\", method \"getUserSettings(byte[])(uint64,uint64,uint64,uint64,uint64)\", method \"getCompoundStats()(uint64,uint64,uint64,uint64,uint64,uint64)\", method \"getPendingRewards(byte[])uint64\", method \"estimateGasCost()uint64\", method \"calculateOptimalCompoundTime(byte[])uint64\", method \"projectCompoundValue(byte[],uint64)uint64\"",
      "defined_out": [
        "Method(batchCompound(byte[][],uint64[])uint64)",
        "Method(calculateCompoundEfficiency(uint64,uint64)uint64)",
        "Method(calculateOptimalCompoundTime(byte[])uint64)",
        "Method(disableAutoCompound()void)",
        "Method(enableAutoCompound(uint64,uint64,uint64,uint64)void)",
        "Method(estimateGasCost()uint64)",
        "Method(executeCompound(byte[],uint64,uint64)uint64)",
        "Method(getCompoundStats()(uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getPendingRewards(byte[])uint64)",
        "Method(getUserSettings(byte[])(uint64,uint64,uint64,uint64,uint64))",
        "Method(initialize(byte[],byte[],uint64,byte[])void)",
        "Method(isEligibleForCompound(byte[])bool)",
        "Method(pauseCompounds()void)",
        "Method(projectCompoundValue(byte[],uint64)uint64)",
        "Method(recordCompoundHistory(byte[],uint64,uint64,uint64,uint64)void)",
        "Method(resumeCompounds()void)",
        "Method(triggerCompound(byte[],uint64)uint64)",
        "Method(updateCompoundFee(uint64)void)",
        "Method(updateFeeCollector(byte[])void)",
        "Method(updateGlobalStats(uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(initialize(byte[],byte[],uint64,byte[])void)",
        "Method(enableAutoCompound(uint64,uint64,uint64,uint64)void)",
        "Method(disableAutoCompound()void)",
        "Method(triggerCompound(byte[],uint64)uint64)",
        "Method(executeCompound(byte[],uint64,uint64)uint64)",
        "Method(batchCompound(byte[][],uint64[])uint64)",
        "Method(calculateCompoundEfficiency(uint64,uint64)uint64)",
        "Method(recordCompoundHistory(byte[],uint64,uint64,uint64,uint64)void)",
        "Method(updateGlobalStats(uint64,uint64)void)",
        "Method(updateCompoundFee(uint64)void)",
        "Method(updateFeeCollector(byte[])void)",
        "Method(pauseCompounds()void)",
        "Method(resumeCompounds()void)",
        "Method(isEligibleForCompound(byte[])bool)",
        "Method(getUserSettings(byte[])(uint64,uint64,uint64,uint64,uint64))",
        "Method(getCompoundStats()(uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getPendingRewards(byte[])uint64)",
        "Method(estimateGasCost()uint64)",
        "Method(calculateOptimalCompoundTime(byte[])uint64)",
        "Method(projectCompoundValue(byte[],uint64)uint64)"
      ]
    },
    "371": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(batchCompound(byte[][],uint64[])uint64)",
        "Method(calculateCompoundEfficiency(uint64,uint64)uint64)",
        "Method(calculateOptimalCompoundTime(byte[])uint64)",
        "Method(disableAutoCompound()void)",
        "Method(enableAutoCompound(uint64,uint64,uint64,uint64)void)",
        "Method(estimateGasCost()uint64)",
        "Method(executeCompound(byte[],uint64,uint64)uint64)",
        "Method(getCompoundStats()(uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getPendingRewards(byte[])uint64)",
        "Method(getUserSettings(byte[])(uint64,uint64,uint64,uint64,uint64))",
        "Method(initialize(byte[],byte[],uint64,byte[])void)",
        "Method(isEligibleForCompound(byte[])bool)",
        "Method(pauseCompounds()void)",
        "Method(projectCompoundValue(byte[],uint64)uint64)",
        "Method(recordCompoundHistory(byte[],uint64,uint64,uint64,uint64)void)",
        "Method(resumeCompounds()void)",
        "Method(triggerCompound(byte[],uint64)uint64)",
        "Method(updateCompoundFee(uint64)void)",
        "Method(updateFeeCollector(byte[])void)",
        "Method(updateGlobalStats(uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(initialize(byte[],byte[],uint64,byte[])void)",
        "Method(enableAutoCompound(uint64,uint64,uint64,uint64)void)",
        "Method(disableAutoCompound()void)",
        "Method(triggerCompound(byte[],uint64)uint64)",
        "Method(executeCompound(byte[],uint64,uint64)uint64)",
        "Method(batchCompound(byte[][],uint64[])uint64)",
        "Method(calculateCompoundEfficiency(uint64,uint64)uint64)",
        "Method(recordCompoundHistory(byte[],uint64,uint64,uint64,uint64)void)",
        "Method(updateGlobalStats(uint64,uint64)void)",
        "Method(updateCompoundFee(uint64)void)",
        "Method(updateFeeCollector(byte[])void)",
        "Method(pauseCompounds()void)",
        "Method(resumeCompounds()void)",
        "Method(isEligibleForCompound(byte[])bool)",
        "Method(getUserSettings(byte[])(uint64,uint64,uint64,uint64,uint64))",
        "Method(getCompoundStats()(uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getPendingRewards(byte[])uint64)",
        "Method(estimateGasCost()uint64)",
        "Method(calculateOptimalCompoundTime(byte[])uint64)",
        "Method(projectCompoundValue(byte[],uint64)uint64)",
        "tmp%2#0"
      ]
    },
    "374": {
      "op": "match main_initialize_route@3 main_enableAutoCompound_route@4 main_disableAutoCompound_route@5 main_triggerCompound_route@6 main_executeCompound_route@7 main_batchCompound_route@8 main_calculateCompoundEfficiency_route@9 main_recordCompoundHistory_route@10 main_updateGlobalStats_route@11 main_updateCompoundFee_route@12 main_updateFeeCollector_route@13 main_pauseCompounds_route@14 main_resumeCompounds_route@15 main_isEligibleForCompound_route@16 main_getUserSettings_route@17 main_getCompoundStats_route@18 main_getPendingRewards_route@19 main_estimateGasCost_route@20 main_calculateOptimalCompoundTime_route@21 main_projectCompoundValue_route@22",
      "stack_out": []
    },
    "416": {
      "block": "main_after_if_else@29",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "417": {
      "op": "return",
      "stack_out": []
    },
    "418": {
      "block": "main_projectCompoundValue_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "420": {
      "op": "!",
      "defined_out": [
        "tmp%129#0"
      ],
      "stack_out": [
        "tmp%129#0"
      ]
    },
    "421": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "422": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "424": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "425": {
      "op": "bytec 14 // 0x151f7c750000000000000000",
      "defined_out": [
        "0x151f7c750000000000000000"
      ],
      "stack_out": [
        "0x151f7c750000000000000000"
      ]
    },
    "427": {
      "op": "log",
      "stack_out": []
    },
    "428": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "429": {
      "op": "return",
      "stack_out": []
    },
    "430": {
      "block": "main_calculateOptimalCompoundTime_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%121#0"
      ]
    },
    "432": {
      "op": "!",
      "defined_out": [
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%122#0"
      ]
    },
    "433": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "434": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%123#0"
      ]
    },
    "436": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "437": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "440": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "443": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.calculateOptimalCompoundTime",
      "op": "callsub calculateOptimalCompoundTime",
      "defined_out": [
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0"
      ]
    },
    "446": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%17#0"
      ],
      "stack_out": [
        "val_as_bytes%17#0"
      ]
    },
    "447": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%17#0"
      ],
      "stack_out": [
        "val_as_bytes%17#0",
        "0x151f7c75"
      ]
    },
    "448": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%17#0"
      ]
    },
    "449": {
      "op": "concat",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "450": {
      "op": "log",
      "stack_out": []
    },
    "451": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "452": {
      "op": "return",
      "stack_out": []
    },
    "453": {
      "block": "main_estimateGasCost_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "455": {
      "op": "!",
      "defined_out": [
        "tmp%117#0"
      ],
      "stack_out": [
        "tmp%117#0"
      ]
    },
    "456": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "457": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "459": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "460": {
      "op": "pushbytes 0x151f7c750000000000000bb8",
      "defined_out": [
        "0x151f7c750000000000000bb8"
      ],
      "stack_out": [
        "0x151f7c750000000000000bb8"
      ]
    },
    "474": {
      "op": "log",
      "stack_out": []
    },
    "475": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "476": {
      "op": "return",
      "stack_out": []
    },
    "477": {
      "block": "main_getPendingRewards_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "479": {
      "op": "!",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "480": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "481": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "483": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "484": {
      "op": "bytec 14 // 0x151f7c750000000000000000",
      "defined_out": [
        "0x151f7c750000000000000000"
      ],
      "stack_out": [
        "0x151f7c750000000000000000"
      ]
    },
    "486": {
      "op": "log",
      "stack_out": []
    },
    "487": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "488": {
      "op": "return",
      "stack_out": []
    },
    "489": {
      "block": "main_getCompoundStats_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "491": {
      "op": "!",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "492": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "493": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "495": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "496": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.getCompoundStats",
      "op": "callsub getCompoundStats",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0"
      ]
    },
    "499": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%5#0"
      ]
    },
    "501": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "val_as_bytes%9#0"
      ]
    },
    "502": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "val_as_bytes%9#0",
        "elements_to_encode%6#0"
      ]
    },
    "504": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "505": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "elements_to_encode%7#0"
      ]
    },
    "507": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0"
      ]
    },
    "508": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "elements_to_encode%8#0"
      ]
    },
    "510": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0"
      ]
    },
    "511": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%10#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "elements_to_encode%9#0"
      ]
    },
    "513": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%10#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0"
      ]
    },
    "514": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "elements_to_encode%10#0"
      ]
    },
    "516": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ]
    },
    "517": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%9#0"
      ]
    },
    "519": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "521": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ],
      "stack_out": [
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "522": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%11#0"
      ]
    },
    "524": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ],
      "stack_out": [
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "525": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%12#0"
      ]
    },
    "527": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%13#0",
        "val_as_bytes%14#0"
      ],
      "stack_out": [
        "val_as_bytes%13#0",
        "val_as_bytes%14#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "528": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%14#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%13#0"
      ]
    },
    "530": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%14#0"
      ],
      "stack_out": [
        "val_as_bytes%14#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "531": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%14#0"
      ]
    },
    "532": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0"
      ]
    },
    "533": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%12#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%12#0",
        "0x151f7c75"
      ]
    },
    "534": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "535": {
      "op": "concat",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "536": {
      "op": "log",
      "stack_out": []
    },
    "537": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "538": {
      "op": "return",
      "stack_out": []
    },
    "539": {
      "block": "main_getUserSettings_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "541": {
      "op": "!",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "542": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "543": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "545": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "546": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "549": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "552": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.getUserSettings",
      "op": "callsub getUserSettings",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0"
      ]
    },
    "555": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%0#0"
      ]
    },
    "557": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%4#0"
      ]
    },
    "558": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%4#0",
        "elements_to_encode%1#0"
      ]
    },
    "560": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "561": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "elements_to_encode%2#0"
      ]
    },
    "563": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "564": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "elements_to_encode%3#0"
      ]
    },
    "566": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "567": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%4#0"
      ]
    },
    "569": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "570": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%4#0"
      ]
    },
    "572": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "574": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "575": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%6#0"
      ]
    },
    "577": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "578": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%8#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%7#0"
      ]
    },
    "580": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "val_as_bytes%8#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "581": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%8#0"
      ]
    },
    "582": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0"
      ]
    },
    "583": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "0x151f7c75"
      ]
    },
    "584": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "585": {
      "op": "concat",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "586": {
      "op": "log",
      "stack_out": []
    },
    "587": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "588": {
      "op": "return",
      "stack_out": []
    },
    "589": {
      "block": "main_isEligibleForCompound_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "591": {
      "op": "!",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "592": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "593": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "595": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "596": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "599": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "602": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.isEligibleForCompound",
      "op": "callsub isEligibleForCompound",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "605": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00"
      ]
    },
    "608": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00",
        "0"
      ]
    },
    "609": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%4#0"
      ]
    },
    "611": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "612": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "613": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "614": {
      "op": "concat",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "615": {
      "op": "log",
      "stack_out": []
    },
    "616": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "617": {
      "op": "return",
      "stack_out": []
    },
    "618": {
      "block": "main_resumeCompounds_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "620": {
      "op": "!",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "621": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "622": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "624": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "625": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.resumeCompounds",
      "op": "callsub resumeCompounds"
    },
    "628": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "629": {
      "op": "return",
      "stack_out": []
    },
    "630": {
      "block": "main_pauseCompounds_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "632": {
      "op": "!",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "633": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "634": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "636": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "637": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.pauseCompounds",
      "op": "callsub pauseCompounds"
    },
    "640": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "641": {
      "op": "return",
      "stack_out": []
    },
    "642": {
      "block": "main_updateFeeCollector_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "644": {
      "op": "!",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "645": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "646": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "648": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "649": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "652": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "655": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.updateFeeCollector",
      "op": "callsub updateFeeCollector",
      "stack_out": []
    },
    "658": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "659": {
      "op": "return",
      "stack_out": []
    },
    "660": {
      "block": "main_updateCompoundFee_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "662": {
      "op": "!",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "663": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "664": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "666": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "667": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%16#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "670": {
      "op": "btoi",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "671": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.updateCompoundFee",
      "op": "callsub updateCompoundFee",
      "stack_out": []
    },
    "674": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "675": {
      "op": "return",
      "stack_out": []
    },
    "676": {
      "block": "main_updateGlobalStats_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "678": {
      "op": "!",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "679": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "680": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "682": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "683": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "686": {
      "op": "btoi",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "687": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%15#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "690": {
      "op": "btoi",
      "defined_out": [
        "tmp%69#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%69#0",
        "tmp%70#0"
      ]
    },
    "691": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.updateGlobalStats",
      "op": "callsub updateGlobalStats",
      "stack_out": []
    },
    "694": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "695": {
      "op": "return",
      "stack_out": []
    },
    "696": {
      "block": "main_recordCompoundHistory_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "698": {
      "op": "!",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "699": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "700": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "702": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "703": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "706": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "709": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "712": {
      "op": "btoi",
      "defined_out": [
        "tmp%60#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%61#0"
      ]
    },
    "713": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%11#0",
        "tmp%60#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%61#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "716": {
      "op": "btoi",
      "defined_out": [
        "tmp%60#0",
        "tmp%61#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%61#0",
        "tmp%62#0"
      ]
    },
    "717": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%12#0",
        "tmp%60#0",
        "tmp%61#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%61#0",
        "tmp%62#0",
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "720": {
      "op": "btoi",
      "defined_out": [
        "tmp%60#0",
        "tmp%61#0",
        "tmp%62#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%61#0",
        "tmp%62#0",
        "tmp%63#0"
      ]
    },
    "721": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%13#0",
        "tmp%60#0",
        "tmp%61#0",
        "tmp%62#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%61#0",
        "tmp%62#0",
        "tmp%63#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "724": {
      "op": "btoi",
      "defined_out": [
        "tmp%60#0",
        "tmp%61#0",
        "tmp%62#0",
        "tmp%63#0",
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%60#0",
        "tmp%61#0",
        "tmp%62#0",
        "tmp%63#0",
        "tmp%64#0"
      ]
    },
    "725": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.recordCompoundHistory",
      "op": "callsub recordCompoundHistory",
      "stack_out": []
    },
    "728": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "729": {
      "op": "return",
      "stack_out": []
    },
    "730": {
      "block": "main_calculateCompoundEfficiency_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "732": {
      "op": "!",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "733": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "734": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "736": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "737": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "740": {
      "op": "btoi",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "741": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "744": {
      "op": "btoi",
      "defined_out": [
        "tmp%52#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%53#0"
      ]
    },
    "745": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.calculateCompoundEfficiency",
      "op": "callsub calculateCompoundEfficiency",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "748": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "749": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "750": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "751": {
      "op": "concat",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "752": {
      "op": "log",
      "stack_out": []
    },
    "753": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "754": {
      "op": "return",
      "stack_out": []
    },
    "755": {
      "block": "main_batchCompound_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "757": {
      "op": "!",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "758": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "759": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "761": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "762": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[]%0#0"
      ]
    },
    "765": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[]%0#0",
        "reinterpret_encoded_uint64[]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[]%0#0",
        "reinterpret_encoded_uint64[]%0#0"
      ]
    },
    "768": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.batchCompound",
      "op": "callsub batchCompound",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "771": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "772": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "773": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "774": {
      "op": "concat",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "775": {
      "op": "log",
      "stack_out": []
    },
    "776": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "777": {
      "op": "return",
      "stack_out": []
    },
    "778": {
      "block": "main_executeCompound_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "780": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "781": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "782": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "784": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "785": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "788": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "791": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%6#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "794": {
      "op": "btoi",
      "defined_out": [
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "795": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%40#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "798": {
      "op": "btoi",
      "defined_out": [
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "799": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.executeCompound",
      "op": "callsub executeCompound",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "802": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "803": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "804": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "805": {
      "op": "concat",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "806": {
      "op": "log",
      "stack_out": []
    },
    "807": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "808": {
      "op": "return",
      "stack_out": []
    },
    "809": {
      "block": "main_triggerCompound_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "811": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "812": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "813": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "815": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "816": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "819": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "822": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "825": {
      "op": "btoi",
      "defined_out": [
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "826": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.triggerCompound",
      "op": "callsub triggerCompound",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "829": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "830": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "831": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "832": {
      "op": "concat",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "833": {
      "op": "log",
      "stack_out": []
    },
    "834": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "835": {
      "op": "return",
      "stack_out": []
    },
    "836": {
      "block": "main_disableAutoCompound_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "838": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "839": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "840": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "842": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "843": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.disableAutoCompound",
      "op": "callsub disableAutoCompound"
    },
    "846": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "847": {
      "op": "return",
      "stack_out": []
    },
    "848": {
      "block": "main_enableAutoCompound_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "850": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "851": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "852": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "854": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "855": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "858": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "859": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "862": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "863": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "866": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "867": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "870": {
      "op": "btoi",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "871": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.enableAutoCompound",
      "op": "callsub enableAutoCompound",
      "stack_out": []
    },
    "874": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "875": {
      "op": "return",
      "stack_out": []
    },
    "876": {
      "block": "main_initialize_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "878": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "879": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "880": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "882": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "883": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "886": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "889": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "892": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "895": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "898": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "899": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "902": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%13#0"
      ]
    },
    "905": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.initialize",
      "op": "callsub initialize",
      "stack_out": []
    },
    "908": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "909": {
      "op": "return",
      "stack_out": []
    },
    "910": {
      "block": "main_bare_routing@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "912": {
      "op": "bnz main_after_if_else@29",
      "stack_out": []
    },
    "915": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "917": {
      "op": "!",
      "defined_out": [
        "tmp%138#0"
      ],
      "stack_out": [
        "tmp%138#0"
      ]
    },
    "918": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "919": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "920": {
      "op": "return",
      "stack_out": []
    },
    "921": {
      "subroutine": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.initialize",
      "params": {
        "stakingPool#0": "bytes",
        "rewardDistributorAddr#0": "bytes",
        "compoundFee#0": "uint64",
        "feeCollector#0": "bytes"
      },
      "block": "initialize",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "924": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "925": {
      "op": "bytec_1 // \"compoundsActive\"",
      "defined_out": [
        "\"compoundsActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"compoundsActive\""
      ]
    },
    "926": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "927": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "928": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "929": {
      "op": "assert",
      "stack_out": []
    },
    "930": {
      "op": "pushbytes \"stakingPoolContract\"",
      "defined_out": [
        "\"stakingPoolContract\""
      ],
      "stack_out": [
        "\"stakingPoolContract\""
      ]
    },
    "951": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"stakingPoolContract\"",
        "stakingPool#0 (copy)"
      ],
      "stack_out": [
        "\"stakingPoolContract\"",
        "stakingPool#0 (copy)"
      ]
    },
    "953": {
      "op": "app_global_put",
      "stack_out": []
    },
    "954": {
      "op": "pushbytes \"rewardDistributor\"",
      "defined_out": [
        "\"rewardDistributor\""
      ],
      "stack_out": [
        "\"rewardDistributor\""
      ]
    },
    "973": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"rewardDistributor\"",
        "rewardDistributorAddr#0 (copy)"
      ],
      "stack_out": [
        "\"rewardDistributor\"",
        "rewardDistributorAddr#0 (copy)"
      ]
    },
    "975": {
      "op": "app_global_put",
      "stack_out": []
    },
    "976": {
      "op": "bytec_3 // \"compoundFeeRate\"",
      "defined_out": [
        "\"compoundFeeRate\""
      ],
      "stack_out": [
        "\"compoundFeeRate\""
      ]
    },
    "977": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"compoundFeeRate\"",
        "compoundFee#0 (copy)"
      ],
      "stack_out": [
        "\"compoundFeeRate\"",
        "compoundFee#0 (copy)"
      ]
    },
    "979": {
      "op": "app_global_put",
      "stack_out": []
    },
    "980": {
      "op": "bytec 15 // \"feeCollector\"",
      "defined_out": [
        "\"feeCollector\""
      ],
      "stack_out": [
        "\"feeCollector\""
      ]
    },
    "982": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"feeCollector\"",
        "feeCollector#0 (copy)"
      ],
      "stack_out": [
        "\"feeCollector\"",
        "feeCollector#0 (copy)"
      ]
    },
    "984": {
      "op": "app_global_put",
      "stack_out": []
    },
    "985": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "987": {
      "op": "txn Sender",
      "defined_out": [
        "\"admin\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"admin\"",
        "new_state_value%0#0"
      ]
    },
    "989": {
      "op": "app_global_put",
      "stack_out": []
    },
    "990": {
      "op": "bytec_2 // \"totalUsersEnabled\"",
      "defined_out": [
        "\"totalUsersEnabled\""
      ],
      "stack_out": [
        "\"totalUsersEnabled\""
      ]
    },
    "991": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalUsersEnabled\"",
        "0"
      ]
    },
    "992": {
      "op": "app_global_put",
      "stack_out": []
    },
    "993": {
      "op": "bytec 5 // \"totalCompounds\"",
      "defined_out": [
        "\"totalCompounds\""
      ],
      "stack_out": [
        "\"totalCompounds\""
      ]
    },
    "995": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalCompounds\"",
        "0"
      ]
    },
    "996": {
      "op": "app_global_put",
      "stack_out": []
    },
    "997": {
      "op": "bytec 7 // \"totalRewardsCompounded\"",
      "defined_out": [
        "\"totalRewardsCompounded\""
      ],
      "stack_out": [
        "\"totalRewardsCompounded\""
      ]
    },
    "999": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalRewardsCompounded\"",
        "0"
      ]
    },
    "1000": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1001": {
      "op": "bytec 16 // \"lastGlobalCompound\"",
      "defined_out": [
        "\"lastGlobalCompound\""
      ],
      "stack_out": [
        "\"lastGlobalCompound\""
      ]
    },
    "1003": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"lastGlobalCompound\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"lastGlobalCompound\"",
        "new_state_value%1#0"
      ]
    },
    "1005": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1006": {
      "op": "bytec_1 // \"compoundsActive\"",
      "stack_out": [
        "\"compoundsActive\""
      ]
    },
    "1007": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"compoundsActive\"",
        "1"
      ],
      "stack_out": [
        "\"compoundsActive\"",
        "1"
      ]
    },
    "1008": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1009": {
      "op": "bytec 8 // \"averageEfficiency\"",
      "defined_out": [
        "\"averageEfficiency\""
      ],
      "stack_out": [
        "\"averageEfficiency\""
      ]
    },
    "1011": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"averageEfficiency\"",
        "0"
      ]
    },
    "1012": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1013": {
      "op": "bytec 9 // \"bestEfficiency\"",
      "defined_out": [
        "\"bestEfficiency\""
      ],
      "stack_out": [
        "\"bestEfficiency\""
      ]
    },
    "1015": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"bestEfficiency\"",
        "0"
      ]
    },
    "1016": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1017": {
      "retsub": true,
      "op": "retsub"
    },
    "1018": {
      "subroutine": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.enableAutoCompound",
      "params": {
        "frequency#0": "uint64",
        "threshold#0": "uint64",
        "maxGasFee#0": "uint64",
        "slippageTolerance#0": "uint64"
      },
      "block": "enableAutoCompound",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "1021": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1022": {
      "op": "bytec_1 // \"compoundsActive\"",
      "defined_out": [
        "\"compoundsActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"compoundsActive\""
      ]
    },
    "1023": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1024": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1025": {
      "op": "assert",
      "stack_out": []
    },
    "1026": {
      "op": "frame_dig -4",
      "defined_out": [
        "frequency#0 (copy)"
      ],
      "stack_out": [
        "frequency#0 (copy)"
      ]
    },
    "1028": {
      "op": "pushint 3600 // 3600",
      "defined_out": [
        "3600",
        "frequency#0 (copy)"
      ],
      "stack_out": [
        "frequency#0 (copy)",
        "3600"
      ]
    },
    "1031": {
      "op": ">=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1032": {
      "op": "assert",
      "stack_out": []
    },
    "1033": {
      "op": "frame_dig -3",
      "defined_out": [
        "threshold#0 (copy)"
      ],
      "stack_out": [
        "threshold#0 (copy)"
      ]
    },
    "1035": {
      "op": "assert",
      "stack_out": []
    },
    "1036": {
      "op": "frame_dig -1",
      "defined_out": [
        "slippageTolerance#0 (copy)"
      ],
      "stack_out": [
        "slippageTolerance#0 (copy)"
      ]
    },
    "1038": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "slippageTolerance#0 (copy)"
      ],
      "stack_out": [
        "slippageTolerance#0 (copy)",
        "1000"
      ]
    },
    "1041": {
      "op": "<=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1042": {
      "op": "assert",
      "stack_out": []
    },
    "1043": {
      "op": "txn Sender",
      "defined_out": [
        "user#0"
      ],
      "stack_out": [
        "user#0"
      ]
    },
    "1045": {
      "op": "dup",
      "defined_out": [
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0",
        "user#0 (copy)"
      ]
    },
    "1046": {
      "op": "bytec 6 // \"_enabled\"",
      "defined_out": [
        "\"_enabled\"",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0",
        "user#0 (copy)",
        "\"_enabled\""
      ]
    },
    "1048": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "enabledKey#0"
      ]
    },
    "1049": {
      "op": "dup",
      "stack_out": [
        "user#0",
        "enabledKey#0",
        "enabledKey#0 (copy)"
      ]
    },
    "1050": {
      "op": "uncover 2",
      "defined_out": [
        "enabledKey#0",
        "user#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "enabledKey#0",
        "user#0"
      ]
    },
    "1052": {
      "op": "dup",
      "stack_out": [
        "enabledKey#0",
        "enabledKey#0",
        "user#0",
        "user#0 (copy)"
      ]
    },
    "1053": {
      "op": "bytec 10 // \"_frequency\"",
      "defined_out": [
        "\"_frequency\"",
        "enabledKey#0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "enabledKey#0",
        "enabledKey#0",
        "user#0",
        "user#0 (copy)",
        "\"_frequency\""
      ]
    },
    "1055": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "user#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "enabledKey#0",
        "user#0",
        "frequencyKey#0"
      ]
    },
    "1056": {
      "op": "cover 2",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "user#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "enabledKey#0",
        "user#0"
      ]
    },
    "1058": {
      "op": "dup",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "enabledKey#0",
        "user#0",
        "user#0 (copy)"
      ]
    },
    "1059": {
      "op": "bytec 11 // \"_threshold\"",
      "defined_out": [
        "\"_threshold\"",
        "enabledKey#0",
        "frequencyKey#0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "enabledKey#0",
        "user#0",
        "user#0 (copy)",
        "\"_threshold\""
      ]
    },
    "1061": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "user#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "enabledKey#0",
        "user#0",
        "thresholdKey#0"
      ]
    },
    "1062": {
      "op": "cover 2",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "user#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "enabledKey#0",
        "user#0"
      ]
    },
    "1064": {
      "op": "dup",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "enabledKey#0",
        "user#0",
        "user#0 (copy)"
      ]
    },
    "1065": {
      "op": "bytec 12 // \"_maxGasFee\"",
      "defined_out": [
        "\"_maxGasFee\"",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "user#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "enabledKey#0",
        "user#0",
        "user#0 (copy)",
        "\"_maxGasFee\""
      ]
    },
    "1067": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "thresholdKey#0",
        "user#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "enabledKey#0",
        "user#0",
        "maxGasFeeKey#0"
      ]
    },
    "1068": {
      "op": "cover 2",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "thresholdKey#0",
        "user#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "enabledKey#0",
        "user#0"
      ]
    },
    "1070": {
      "op": "bytec 17 // \"_slippageTolerance\"",
      "defined_out": [
        "\"_slippageTolerance\"",
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "thresholdKey#0",
        "user#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "enabledKey#0",
        "user#0",
        "\"_slippageTolerance\""
      ]
    },
    "1072": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "enabledKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "1073": {
      "op": "swap",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "enabledKey#0"
      ]
    },
    "1074": {
      "op": "box_len",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1075": {
      "op": "bury 1",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_exists%1#0"
      ]
    },
    "1077": {
      "op": "bz enableAutoCompound_ternary_false@2",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "1080": {
      "op": "frame_dig 0",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "enabledKey#0"
      ]
    },
    "1082": {
      "op": "box_get",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1083": {
      "op": "swap",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "1084": {
      "op": "btoi",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%2#0",
        "maybe_value_converted%0#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_exists%2#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1085": {
      "op": "swap",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value_converted%0#0",
        "maybe_exists%2#0"
      ]
    },
    "1086": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1087": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "maybe_value_converted%0#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value_converted%0#0",
        "1"
      ]
    },
    "1088": {
      "op": "==",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "thresholdKey#0",
        "wasEnabled#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0"
      ]
    },
    "1089": {
      "block": "enableAutoCompound_ternary_merge@3",
      "stack_in": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "1"
      ]
    },
    "1090": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "new_box_value%0#0"
      ]
    },
    "1091": {
      "op": "frame_dig 0",
      "defined_out": [
        "enabledKey#0",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "new_box_value%0#0",
        "enabledKey#0"
      ]
    },
    "1093": {
      "op": "swap",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "enabledKey#0",
        "new_box_value%0#0"
      ]
    },
    "1094": {
      "op": "box_put",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0"
      ]
    },
    "1095": {
      "op": "frame_dig -4",
      "defined_out": [
        "enabledKey#0",
        "frequency#0 (copy)"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "frequency#0 (copy)"
      ]
    },
    "1097": {
      "op": "itob",
      "defined_out": [
        "enabledKey#0",
        "new_box_value%1#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "new_box_value%1#0"
      ]
    },
    "1098": {
      "op": "frame_dig 1",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "new_box_value%1#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "new_box_value%1#0",
        "frequencyKey#0"
      ]
    },
    "1100": {
      "op": "swap",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "frequencyKey#0",
        "new_box_value%1#0"
      ]
    },
    "1101": {
      "op": "box_put",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0"
      ]
    },
    "1102": {
      "op": "frame_dig -3",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "threshold#0 (copy)"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "threshold#0 (copy)"
      ]
    },
    "1104": {
      "op": "itob",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "new_box_value%2#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "new_box_value%2#0"
      ]
    },
    "1105": {
      "op": "frame_dig 2",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "new_box_value%2#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "new_box_value%2#0",
        "thresholdKey#0"
      ]
    },
    "1107": {
      "op": "swap",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "thresholdKey#0",
        "new_box_value%2#0"
      ]
    },
    "1108": {
      "op": "box_put",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0"
      ]
    },
    "1109": {
      "op": "frame_dig -2",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFee#0 (copy)",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "maxGasFee#0 (copy)"
      ]
    },
    "1111": {
      "op": "itob",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "new_box_value%3#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "new_box_value%3#0"
      ]
    },
    "1112": {
      "op": "frame_dig 3",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "new_box_value%3#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "new_box_value%3#0",
        "maxGasFeeKey#0"
      ]
    },
    "1114": {
      "op": "swap",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "maxGasFeeKey#0",
        "new_box_value%3#0"
      ]
    },
    "1115": {
      "op": "box_put",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0"
      ]
    },
    "1116": {
      "op": "frame_dig -1",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "slippageTolerance#0 (copy)",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "slippageTolerance#0 (copy)"
      ]
    },
    "1118": {
      "op": "itob",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "new_box_value%4#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "new_box_value%4#0"
      ]
    },
    "1119": {
      "op": "frame_dig 4",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "new_box_value%4#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "new_box_value%4#0",
        "slippageToleranceKey#0"
      ]
    },
    "1121": {
      "op": "swap",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0",
        "slippageToleranceKey#0",
        "new_box_value%4#0"
      ]
    },
    "1122": {
      "op": "box_put",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "thresholdKey#0",
        "wasEnabled#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0"
      ]
    },
    "1123": {
      "op": "bnz enableAutoCompound_after_if_else@5",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "1126": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "0"
      ]
    },
    "1127": {
      "op": "bytec_2 // \"totalUsersEnabled\"",
      "defined_out": [
        "\"totalUsersEnabled\"",
        "0",
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "0",
        "\"totalUsersEnabled\""
      ]
    },
    "1128": {
      "op": "app_global_get_ex",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1129": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value%3#0"
      ]
    },
    "1130": {
      "op": "intc_1 // 1",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value%3#0",
        "1"
      ]
    },
    "1131": {
      "op": "+",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "new_state_value%0#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "new_state_value%0#0"
      ]
    },
    "1132": {
      "op": "bytec_2 // \"totalUsersEnabled\"",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "new_state_value%0#0",
        "\"totalUsersEnabled\""
      ]
    },
    "1133": {
      "op": "swap",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "\"totalUsersEnabled\"",
        "new_state_value%0#0"
      ]
    },
    "1134": {
      "op": "app_global_put",
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "1135": {
      "block": "enableAutoCompound_after_if_else@5",
      "stack_in": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1136": {
      "block": "enableAutoCompound_ternary_false@2",
      "stack_in": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "wasEnabled#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "wasEnabled#0"
      ]
    },
    "1137": {
      "op": "b enableAutoCompound_ternary_merge@3"
    },
    "1140": {
      "subroutine": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.disableAutoCompound",
      "params": {},
      "block": "disableAutoCompound",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1143": {
      "op": "txn Sender",
      "defined_out": [
        "user#0"
      ],
      "stack_out": [
        "user#0"
      ]
    },
    "1145": {
      "op": "bytec 6 // \"_enabled\"",
      "defined_out": [
        "\"_enabled\"",
        "user#0"
      ],
      "stack_out": [
        "user#0",
        "\"_enabled\""
      ]
    },
    "1147": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0"
      ],
      "stack_out": [
        "enabledKey#0"
      ]
    },
    "1148": {
      "op": "dupn 2",
      "defined_out": [
        "enabledKey#0",
        "enabledKey#0 (copy)"
      ],
      "stack_out": [
        "enabledKey#0",
        "enabledKey#0",
        "enabledKey#0 (copy)"
      ]
    },
    "1150": {
      "op": "box_len",
      "defined_out": [
        "enabledKey#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "enabledKey#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1151": {
      "op": "bury 1",
      "stack_out": [
        "enabledKey#0",
        "enabledKey#0",
        "maybe_exists%0#0"
      ]
    },
    "1153": {
      "op": "assert",
      "stack_out": [
        "enabledKey#0",
        "enabledKey#0"
      ]
    },
    "1154": {
      "op": "box_get",
      "defined_out": [
        "enabledKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1155": {
      "op": "swap",
      "stack_out": [
        "enabledKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "1156": {
      "op": "btoi",
      "defined_out": [
        "enabledKey#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1157": {
      "op": "swap",
      "stack_out": [
        "enabledKey#0",
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1158": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "enabledKey#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1159": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "enabledKey#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "maybe_value_converted%0#0",
        "1"
      ]
    },
    "1160": {
      "op": "==",
      "defined_out": [
        "enabledKey#0",
        "wasEnabled#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "wasEnabled#0"
      ]
    },
    "1161": {
      "op": "bz disableAutoCompound_after_if_else@2",
      "stack_out": [
        "enabledKey#0"
      ]
    },
    "1164": {
      "op": "intc_0 // 0",
      "stack_out": [
        "enabledKey#0",
        "0"
      ]
    },
    "1165": {
      "op": "itob",
      "defined_out": [
        "enabledKey#0",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "new_box_value%0#0"
      ]
    },
    "1166": {
      "op": "frame_dig 0",
      "stack_out": [
        "enabledKey#0",
        "new_box_value%0#0",
        "enabledKey#0"
      ]
    },
    "1168": {
      "op": "swap",
      "stack_out": [
        "enabledKey#0",
        "enabledKey#0",
        "new_box_value%0#0"
      ]
    },
    "1169": {
      "op": "box_put",
      "stack_out": [
        "enabledKey#0"
      ]
    },
    "1170": {
      "op": "intc_0 // 0",
      "stack_out": [
        "enabledKey#0",
        "0"
      ]
    },
    "1171": {
      "op": "bytec_2 // \"totalUsersEnabled\"",
      "defined_out": [
        "\"totalUsersEnabled\"",
        "0",
        "enabledKey#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "0",
        "\"totalUsersEnabled\""
      ]
    },
    "1172": {
      "op": "app_global_get_ex",
      "defined_out": [
        "enabledKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1173": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "enabledKey#0",
        "maybe_value%2#0"
      ]
    },
    "1174": {
      "op": "intc_1 // 1",
      "stack_out": [
        "enabledKey#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "1175": {
      "op": "-",
      "defined_out": [
        "enabledKey#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "enabledKey#0",
        "new_state_value%0#0"
      ]
    },
    "1176": {
      "op": "bytec_2 // \"totalUsersEnabled\"",
      "stack_out": [
        "enabledKey#0",
        "new_state_value%0#0",
        "\"totalUsersEnabled\""
      ]
    },
    "1177": {
      "op": "swap",
      "stack_out": [
        "enabledKey#0",
        "\"totalUsersEnabled\"",
        "new_state_value%0#0"
      ]
    },
    "1178": {
      "op": "app_global_put",
      "stack_out": [
        "enabledKey#0"
      ]
    },
    "1179": {
      "block": "disableAutoCompound_after_if_else@2",
      "stack_in": [
        "enabledKey#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1180": {
      "subroutine": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.triggerCompound",
      "params": {
        "user#0": "bytes",
        "pendingRewards#0": "uint64"
      },
      "block": "triggerCompound",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1183": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lastCompoundKey#0"
      ]
    },
    "1184": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0"
      ]
    },
    "1186": {
      "op": "dupn 2",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0"
      ]
    },
    "1188": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "0"
      ]
    },
    "1189": {
      "op": "bytec_1 // \"compoundsActive\"",
      "defined_out": [
        "\"compoundsActive\"",
        "0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "0",
        "\"compoundsActive\""
      ]
    },
    "1190": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1191": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "maybe_value%0#0"
      ]
    },
    "1192": {
      "op": "assert",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0"
      ]
    },
    "1193": {
      "op": "frame_dig -2",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "user#0 (copy)"
      ]
    },
    "1195": {
      "op": "bytec 6 // \"_enabled\"",
      "defined_out": [
        "\"_enabled\"",
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "user#0 (copy)",
        "\"_enabled\""
      ]
    },
    "1197": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0"
      ]
    },
    "1198": {
      "op": "dup",
      "defined_out": [
        "enabledKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "enabledKey#0"
      ]
    },
    "1199": {
      "op": "frame_dig -2",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "enabledKey#0",
        "user#0 (copy)"
      ]
    },
    "1201": {
      "op": "bytec 10 // \"_frequency\"",
      "defined_out": [
        "\"_frequency\"",
        "enabledKey#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "enabledKey#0",
        "user#0 (copy)",
        "\"_frequency\""
      ]
    },
    "1203": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "enabledKey#0",
        "frequencyKey#0"
      ]
    },
    "1204": {
      "op": "swap",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "enabledKey#0"
      ]
    },
    "1205": {
      "op": "frame_dig -2",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "enabledKey#0",
        "user#0 (copy)"
      ]
    },
    "1207": {
      "op": "bytec 11 // \"_threshold\"",
      "defined_out": [
        "\"_threshold\"",
        "enabledKey#0",
        "frequencyKey#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "enabledKey#0",
        "user#0 (copy)",
        "\"_threshold\""
      ]
    },
    "1209": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "enabledKey#0",
        "thresholdKey#0"
      ]
    },
    "1210": {
      "op": "swap",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "enabledKey#0"
      ]
    },
    "1211": {
      "op": "frame_dig -2",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "enabledKey#0",
        "user#0 (copy)"
      ]
    },
    "1213": {
      "op": "bytec 12 // \"_maxGasFee\"",
      "defined_out": [
        "\"_maxGasFee\"",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "enabledKey#0",
        "user#0 (copy)",
        "\"_maxGasFee\""
      ]
    },
    "1215": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "enabledKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "1216": {
      "op": "swap",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "enabledKey#0"
      ]
    },
    "1217": {
      "op": "box_len",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1218": {
      "op": "bury 1",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%1#0"
      ]
    },
    "1220": {
      "op": "bz triggerCompound_bool_false@3",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "1223": {
      "op": "frame_dig 4",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "enabledKey#0"
      ]
    },
    "1225": {
      "op": "box_get",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1226": {
      "op": "swap",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "1227": {
      "op": "btoi",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%2#0",
        "maybe_value_converted%0#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%2#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1228": {
      "op": "swap",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value_converted%0#0",
        "maybe_exists%2#0"
      ]
    },
    "1229": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1230": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "maybe_value_converted%0#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value_converted%0#0",
        "1"
      ]
    },
    "1231": {
      "op": "==",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "thresholdKey#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "tmp%0#0"
      ]
    },
    "1232": {
      "op": "bz triggerCompound_bool_false@3",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "1235": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "and_result%0#0"
      ]
    },
    "1236": {
      "block": "triggerCompound_bool_merge@4",
      "stack_in": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "and_result%0#0"
      ],
      "op": "assert",
      "defined_out": [],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "1237": {
      "op": "frame_dig 5",
      "defined_out": [
        "frequencyKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "frequencyKey#0"
      ]
    },
    "1239": {
      "op": "box_get",
      "defined_out": [
        "frequencyKey#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1240": {
      "op": "swap",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "1241": {
      "op": "btoi",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%3#0",
        "frequency#0"
      ]
    },
    "1242": {
      "op": "frame_bury 1",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%3#0"
      ]
    },
    "1244": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "1245": {
      "op": "frame_dig 6",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "thresholdKey#0"
      ]
    },
    "1247": {
      "op": "box_get",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1248": {
      "op": "swap",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ]
    },
    "1249": {
      "op": "btoi",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maybe_exists%4#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%4#0",
        "threshold#0"
      ]
    },
    "1250": {
      "op": "frame_bury 3",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maybe_exists%4#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%4#0"
      ]
    },
    "1252": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "1253": {
      "op": "frame_dig 7",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "1255": {
      "op": "box_get",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1256": {
      "op": "swap",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ]
    },
    "1257": {
      "op": "btoi",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "maybe_exists%5#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%5#0",
        "maxGasFee#0"
      ]
    },
    "1258": {
      "op": "frame_bury 2",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "maybe_exists%5#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%5#0"
      ]
    },
    "1260": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "1261": {
      "op": "frame_dig -2",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "threshold#0",
        "thresholdKey#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "user#0 (copy)"
      ]
    },
    "1263": {
      "op": "bytec 13 // \"_lastCompound\"",
      "defined_out": [
        "\"_lastCompound\"",
        "frequency#0",
        "frequencyKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "threshold#0",
        "thresholdKey#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "user#0 (copy)",
        "\"_lastCompound\""
      ]
    },
    "1265": {
      "op": "concat",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "lastCompoundKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "lastCompoundKey#0"
      ]
    },
    "1266": {
      "op": "dup",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "lastCompoundKey#0",
        "lastCompoundKey#0"
      ]
    },
    "1267": {
      "op": "frame_bury 0",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "lastCompoundKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "lastCompoundKey#0"
      ]
    },
    "1269": {
      "op": "box_len",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "lastCompoundKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1270": {
      "op": "bury 1",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%6#0"
      ]
    },
    "1272": {
      "op": "bz triggerCompound_ternary_false@6",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "1275": {
      "op": "frame_dig 0",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "lastCompoundKey#0"
      ]
    },
    "1277": {
      "op": "box_get",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "lastCompoundKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1278": {
      "op": "swap",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ]
    },
    "1279": {
      "op": "btoi",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "lastCompoundKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "maybe_exists%7#0",
        "maybe_value_converted%4#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%7#0",
        "maybe_value_converted%4#0"
      ]
    },
    "1280": {
      "op": "swap",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value_converted%4#0",
        "maybe_exists%7#0"
      ]
    },
    "1281": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "lastCompound#0",
        "lastCompoundKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "lastCompound#0"
      ]
    },
    "1282": {
      "block": "triggerCompound_ternary_merge@7",
      "stack_in": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "lastCompound#0"
      ],
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "lastCompound#0",
        "tmp%1#0"
      ]
    },
    "1284": {
      "op": "swap",
      "defined_out": [
        "lastCompound#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "tmp%1#0",
        "lastCompound#0"
      ]
    },
    "1285": {
      "op": "frame_dig 1",
      "defined_out": [
        "frequency#0",
        "lastCompound#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "tmp%1#0",
        "lastCompound#0",
        "frequency#0"
      ]
    },
    "1287": {
      "op": "+",
      "defined_out": [
        "frequency#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "1288": {
      "op": ">=",
      "defined_out": [
        "frequency#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "tmp%3#0"
      ]
    },
    "1289": {
      "op": "assert",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "1290": {
      "op": "frame_dig -1",
      "defined_out": [
        "frequency#0",
        "pendingRewards#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "pendingRewards#0 (copy)"
      ]
    },
    "1292": {
      "op": "frame_dig 3",
      "defined_out": [
        "frequency#0",
        "pendingRewards#0 (copy)",
        "threshold#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "pendingRewards#0 (copy)",
        "threshold#0"
      ]
    },
    "1294": {
      "op": ">=",
      "defined_out": [
        "frequency#0",
        "threshold#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "tmp%4#0"
      ]
    },
    "1295": {
      "op": "assert",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "1296": {
      "op": "intc_3 // 3000",
      "defined_out": [
        "3000",
        "frequency#0",
        "threshold#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "3000"
      ]
    },
    "1297": {
      "op": "frame_dig 2",
      "defined_out": [
        "3000",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "3000",
        "maxGasFee#0"
      ]
    },
    "1299": {
      "op": "<=",
      "defined_out": [
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "tmp%5#0"
      ]
    },
    "1300": {
      "op": "assert",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "1301": {
      "op": "frame_dig -1",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "pendingRewards#0 (copy)"
      ]
    },
    "1303": {
      "op": "intc_3 // 3000",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "pendingRewards#0 (copy)",
        "3000"
      ]
    },
    "1304": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.calculateCompoundEfficiency",
      "op": "callsub calculateCompoundEfficiency",
      "defined_out": [
        "efficiency#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "efficiency#0"
      ]
    },
    "1307": {
      "op": "frame_dig -2",
      "defined_out": [
        "efficiency#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "efficiency#0",
        "user#0 (copy)"
      ]
    },
    "1309": {
      "op": "frame_dig -1",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "efficiency#0",
        "user#0 (copy)",
        "pendingRewards#0 (copy)"
      ]
    },
    "1311": {
      "op": "intc_3 // 3000",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "efficiency#0",
        "user#0 (copy)",
        "pendingRewards#0 (copy)",
        "3000"
      ]
    },
    "1312": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.executeCompound",
      "op": "callsub executeCompound",
      "defined_out": [
        "compoundedAmount#0",
        "efficiency#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "efficiency#0",
        "compoundedAmount#0"
      ]
    },
    "1315": {
      "op": "frame_dig -2",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "efficiency#0",
        "compoundedAmount#0",
        "user#0 (copy)"
      ]
    },
    "1317": {
      "op": "frame_dig -1",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "efficiency#0",
        "compoundedAmount#0",
        "user#0 (copy)",
        "pendingRewards#0 (copy)"
      ]
    },
    "1319": {
      "op": "dig 2",
      "defined_out": [
        "compoundedAmount#0",
        "compoundedAmount#0 (copy)",
        "efficiency#0",
        "frequency#0",
        "maxGasFee#0",
        "pendingRewards#0 (copy)",
        "threshold#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "efficiency#0",
        "compoundedAmount#0",
        "user#0 (copy)",
        "pendingRewards#0 (copy)",
        "compoundedAmount#0 (copy)"
      ]
    },
    "1321": {
      "op": "intc_3 // 3000",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "efficiency#0",
        "compoundedAmount#0",
        "user#0 (copy)",
        "pendingRewards#0 (copy)",
        "compoundedAmount#0 (copy)",
        "3000"
      ]
    },
    "1322": {
      "op": "dig 5",
      "defined_out": [
        "3000",
        "compoundedAmount#0",
        "compoundedAmount#0 (copy)",
        "efficiency#0",
        "efficiency#0 (copy)",
        "frequency#0",
        "maxGasFee#0",
        "pendingRewards#0 (copy)",
        "threshold#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "efficiency#0",
        "compoundedAmount#0",
        "user#0 (copy)",
        "pendingRewards#0 (copy)",
        "compoundedAmount#0 (copy)",
        "3000",
        "efficiency#0 (copy)"
      ]
    },
    "1324": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.recordCompoundHistory",
      "op": "callsub recordCompoundHistory",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "efficiency#0",
        "compoundedAmount#0"
      ]
    },
    "1327": {
      "op": "dup",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "efficiency#0",
        "compoundedAmount#0",
        "compoundedAmount#0 (copy)"
      ]
    },
    "1328": {
      "op": "uncover 2",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "compoundedAmount#0",
        "compoundedAmount#0 (copy)",
        "efficiency#0"
      ]
    },
    "1330": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.updateGlobalStats",
      "op": "callsub updateGlobalStats",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "compoundedAmount#0"
      ]
    },
    "1333": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "compoundedAmount#0",
        "frequency#0",
        "maxGasFee#0",
        "new_box_value%0#0",
        "threshold#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "compoundedAmount#0",
        "new_box_value%0#0"
      ]
    },
    "1335": {
      "op": "itob",
      "defined_out": [
        "compoundedAmount#0",
        "frequency#0",
        "maxGasFee#0",
        "new_box_value%1#0",
        "threshold#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "compoundedAmount#0",
        "new_box_value%1#0"
      ]
    },
    "1336": {
      "op": "frame_dig 0",
      "defined_out": [
        "compoundedAmount#0",
        "frequency#0",
        "lastCompoundKey#0",
        "maxGasFee#0",
        "new_box_value%1#0",
        "threshold#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "compoundedAmount#0",
        "new_box_value%1#0",
        "lastCompoundKey#0"
      ]
    },
    "1338": {
      "op": "swap",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "compoundedAmount#0",
        "lastCompoundKey#0",
        "new_box_value%1#0"
      ]
    },
    "1339": {
      "op": "box_put",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "compoundedAmount#0"
      ]
    },
    "1340": {
      "op": "frame_bury 0"
    },
    "1342": {
      "retsub": true,
      "op": "retsub"
    },
    "1343": {
      "block": "triggerCompound_ternary_false@6",
      "stack_in": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "lastCompound#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "lastCompound#0"
      ]
    },
    "1344": {
      "op": "b triggerCompound_ternary_merge@7"
    },
    "1347": {
      "block": "triggerCompound_bool_false@3",
      "stack_in": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "and_result%0#0"
      ]
    },
    "1348": {
      "op": "b triggerCompound_bool_merge@4"
    },
    "1351": {
      "subroutine": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.executeCompound",
      "params": {
        "user#0": "bytes",
        "rewardAmount#0": "uint64",
        "gasCost#0": "uint64"
      },
      "block": "executeCompound",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1354": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1355": {
      "op": "bytec_3 // \"compoundFeeRate\"",
      "defined_out": [
        "\"compoundFeeRate\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"compoundFeeRate\""
      ]
    },
    "1356": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1357": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1358": {
      "op": "frame_dig -2",
      "defined_out": [
        "maybe_value%0#0",
        "rewardAmount#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "rewardAmount#0 (copy)"
      ]
    },
    "1360": {
      "op": "*",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1361": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "10000"
      ]
    },
    "1363": {
      "op": "/",
      "defined_out": [
        "compoundFee#0"
      ],
      "stack_out": [
        "compoundFee#0"
      ]
    },
    "1364": {
      "op": "frame_dig -2",
      "stack_out": [
        "compoundFee#0",
        "rewardAmount#0 (copy)"
      ]
    },
    "1366": {
      "op": "swap",
      "stack_out": [
        "rewardAmount#0 (copy)",
        "compoundFee#0"
      ]
    },
    "1367": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1368": {
      "op": "frame_dig -1",
      "defined_out": [
        "gasCost#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "gasCost#0 (copy)"
      ]
    },
    "1370": {
      "op": "-",
      "defined_out": [
        "netReward#0"
      ],
      "stack_out": [
        "netReward#0"
      ]
    },
    "1371": {
      "retsub": true,
      "op": "retsub"
    },
    "1372": {
      "subroutine": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.batchCompound",
      "params": {
        "users#0": "bytes",
        "pendingRewardsArray#0": "bytes"
      },
      "block": "batchCompound",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1375": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1376": {
      "op": "dupn 10",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "0"
      ]
    },
    "1378": {
      "op": "bytec_1 // \"compoundsActive\"",
      "defined_out": [
        "\"compoundsActive\"",
        "0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "0",
        "\"compoundsActive\""
      ]
    },
    "1379": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1380": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "maybe_value%0#0"
      ]
    },
    "1381": {
      "op": "assert",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0"
      ]
    },
    "1382": {
      "op": "intc_0 // 0"
    },
    "1383": {
      "op": "dup"
    },
    "1384": {
      "op": "frame_dig -2"
    },
    "1386": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "totalCompounded#0",
        "users#0 (copy)"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "totalCompounded#0",
        "users#0 (copy)",
        "0"
      ]
    },
    "1387": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "totalCompounded#0",
        "tmp%0#0"
      ]
    },
    "1388": {
      "op": "dup"
    },
    "1389": {
      "op": "uncover 2",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1391": {
      "op": "swap",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%0#0"
      ]
    },
    "1392": {
      "op": "bz batchCompound_after_if_else@5",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1395": {
      "op": "frame_dig -1",
      "defined_out": [
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "1397": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "0"
      ]
    },
    "1398": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%2#0"
      ]
    },
    "1399": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%2#0",
        "totalCompounded#36"
      ]
    },
    "1401": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%2#0"
      ]
    },
    "1403": {
      "op": "bz batchCompound_after_if_else@5",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1406": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ]
    },
    "1408": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%0#0"
      ]
    },
    "1411": {
      "op": "frame_dig 11",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%0#0",
        "tmp%0#0"
      ]
    },
    "1413": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%0#0"
      ]
    },
    "1414": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)"
      ]
    },
    "1415": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "0"
      ]
    },
    "1416": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1417": {
      "op": "dup2",
      "defined_out": [
        "array_head_and_tail%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset%0#0",
        "item_offset%0#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "array_head_and_tail%0#0 (copy)",
        "item_offset%0#0 (copy)"
      ]
    },
    "1418": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_length%0#0",
        "item_offset%0#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "item_length%0#0"
      ]
    },
    "1419": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%0#0",
        "item_length%0#0",
        "item_offset%0#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "item_length%0#0",
        "2"
      ]
    },
    "1420": {
      "op": "+",
      "defined_out": [
        "array_head_and_tail%0#0",
        "item_head_tail_length%0#0",
        "item_offset%0#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "item_head_tail_length%0#0"
      ]
    },
    "1421": {
      "op": "extract3",
      "defined_out": [
        "arc4_item%0#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "arc4_item%0#0"
      ]
    },
    "1422": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%4#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%4#0"
      ]
    },
    "1425": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%4#0",
        "tmp%4#0"
      ]
    },
    "1426": {
      "op": "frame_bury 4",
      "defined_out": [
        "tmp%0#0",
        "tmp%4#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%4#0"
      ]
    },
    "1428": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.isEligibleForCompound",
      "op": "callsub isEligibleForCompound",
      "defined_out": [
        "tmp%0#0",
        "tmp%4#0",
        "tmp%5#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%5#0"
      ]
    },
    "1431": {
      "op": "bz batchCompound_after_if_else@4",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1434": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "1436": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "2"
      ]
    },
    "1437": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#0",
        "tmp%4#0",
        "tmp%7#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%7#0"
      ]
    },
    "1438": {
      "op": "frame_dig 4",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%7#0",
        "tmp%4#0"
      ]
    },
    "1440": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%4#0",
        "tmp%7#0"
      ]
    },
    "1441": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.triggerCompound",
      "op": "callsub triggerCompound",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "1444": {
      "op": "frame_bury 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1446": {
      "block": "batchCompound_after_if_else@4",
      "stack_in": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ],
      "op": "frame_dig 10",
      "defined_out": [
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#36"
      ]
    },
    "1448": {
      "op": "frame_bury 12",
      "defined_out": [
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1450": {
      "block": "batchCompound_after_if_else@5",
      "stack_in": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ],
      "op": "frame_dig 12",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "1452": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "totalCompounded#0"
      ]
    },
    "1453": {
      "op": "frame_bury 10",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "1455": {
      "op": "frame_dig 11",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%0#0"
      ]
    },
    "1457": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%0#0",
        "1"
      ]
    },
    "1458": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%9#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%9#0"
      ]
    },
    "1459": {
      "op": "swap",
      "defined_out": [
        "tmp%0#0",
        "tmp%9#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%9#0",
        "totalCompounded#36"
      ]
    },
    "1460": {
      "op": "frame_bury 12",
      "defined_out": [
        "tmp%0#0",
        "tmp%9#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%9#0"
      ]
    },
    "1462": {
      "op": "bz batchCompound_after_if_else@10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1465": {
      "op": "frame_dig -1",
      "defined_out": [
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "1467": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "0"
      ]
    },
    "1468": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0",
        "tmp%10#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%10#0"
      ]
    },
    "1469": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%10#0",
        "1"
      ]
    },
    "1470": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%11#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%11#0"
      ]
    },
    "1471": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%11#0",
        "totalCompounded#36"
      ]
    },
    "1473": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%11#0"
      ]
    },
    "1475": {
      "op": "bz batchCompound_after_if_else@10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1478": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ]
    },
    "1480": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%3#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%3#0"
      ]
    },
    "1483": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%3#0",
        "1"
      ]
    },
    "1484": {
      "op": "frame_dig 11",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%3#0",
        "1",
        "tmp%0#0"
      ]
    },
    "1486": {
      "op": "<",
      "defined_out": [
        "array_head_and_tail%3#0",
        "index_is_in_bounds%2#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%3#0",
        "index_is_in_bounds%2#0"
      ]
    },
    "1487": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%3#0"
      ]
    },
    "1488": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%3#0",
        "array_head_and_tail%3#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%3#0",
        "array_head_and_tail%3#0 (copy)"
      ]
    },
    "1489": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%3#0",
        "array_head_and_tail%3#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%3#0",
        "array_head_and_tail%3#0 (copy)",
        "2"
      ]
    },
    "1490": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%3#0",
        "item_offset%3#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%3#0",
        "item_offset%3#0"
      ]
    },
    "1491": {
      "op": "dup2",
      "defined_out": [
        "array_head_and_tail%3#0",
        "array_head_and_tail%3#0 (copy)",
        "item_offset%3#0",
        "item_offset%3#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%3#0",
        "item_offset%3#0",
        "array_head_and_tail%3#0 (copy)",
        "item_offset%3#0 (copy)"
      ]
    },
    "1492": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%3#0",
        "item_length%2#0",
        "item_offset%3#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%3#0",
        "item_offset%3#0",
        "item_length%2#0"
      ]
    },
    "1493": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%3#0",
        "item_offset%3#0",
        "item_length%2#0",
        "2"
      ]
    },
    "1494": {
      "op": "+",
      "defined_out": [
        "array_head_and_tail%3#0",
        "item_head_tail_length%2#0",
        "item_offset%3#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%3#0",
        "item_offset%3#0",
        "item_head_tail_length%2#0"
      ]
    },
    "1495": {
      "op": "extract3",
      "defined_out": [
        "arc4_item%3#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "arc4_item%3#0"
      ]
    },
    "1496": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%12#0"
      ]
    },
    "1499": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%12#0",
        "tmp%12#0"
      ]
    },
    "1500": {
      "op": "frame_bury 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%12#0"
      ]
    },
    "1502": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.isEligibleForCompound",
      "op": "callsub isEligibleForCompound",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%13#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%13#0"
      ]
    },
    "1505": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%13#0",
        "totalCompounded#36"
      ]
    },
    "1507": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%13#0"
      ]
    },
    "1509": {
      "op": "bz batchCompound_after_if_else@10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1512": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "1514": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "tmp%12#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "10"
      ]
    },
    "1516": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#0",
        "tmp%12#0",
        "tmp%15#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%15#0"
      ]
    },
    "1517": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%15#0",
        "tmp%12#0"
      ]
    },
    "1519": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%12#0",
        "tmp%15#0"
      ]
    },
    "1520": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.triggerCompound",
      "op": "callsub triggerCompound",
      "defined_out": [
        "compounded\u2081#0",
        "tmp%0#0",
        "tmp%12#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "compounded\u2081#0"
      ]
    },
    "1523": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "compounded\u2081#0",
        "totalCompounded#0"
      ]
    },
    "1525": {
      "op": "+",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#36"
      ]
    },
    "1526": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1528": {
      "block": "batchCompound_after_if_else@10",
      "stack_in": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ],
      "op": "frame_dig 12",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "1530": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "totalCompounded#0"
      ]
    },
    "1531": {
      "op": "frame_bury 10",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "1533": {
      "op": "frame_dig 11",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%0#0"
      ]
    },
    "1535": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%0#0",
        "2"
      ]
    },
    "1536": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%17#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%17#0"
      ]
    },
    "1537": {
      "op": "swap",
      "defined_out": [
        "tmp%0#0",
        "tmp%17#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%17#0",
        "totalCompounded#36"
      ]
    },
    "1538": {
      "op": "frame_bury 12",
      "defined_out": [
        "tmp%0#0",
        "tmp%17#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%17#0"
      ]
    },
    "1540": {
      "op": "bz batchCompound_after_if_else@15",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1543": {
      "op": "frame_dig -1",
      "defined_out": [
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "1545": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "0"
      ]
    },
    "1546": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0",
        "tmp%18#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%18#0"
      ]
    },
    "1547": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%18#0",
        "2"
      ]
    },
    "1548": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%19#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%19#0"
      ]
    },
    "1549": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%19#0",
        "totalCompounded#36"
      ]
    },
    "1551": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%19#0"
      ]
    },
    "1553": {
      "op": "bz batchCompound_after_if_else@15",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1556": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ]
    },
    "1558": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%6#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%6#0"
      ]
    },
    "1561": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%6#0",
        "2"
      ]
    },
    "1562": {
      "op": "frame_dig 11",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%6#0",
        "2",
        "tmp%0#0"
      ]
    },
    "1564": {
      "op": "<",
      "defined_out": [
        "array_head_and_tail%6#0",
        "index_is_in_bounds%4#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%6#0",
        "index_is_in_bounds%4#0"
      ]
    },
    "1565": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%6#0"
      ]
    },
    "1566": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%6#0",
        "array_head_and_tail%6#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%6#0",
        "array_head_and_tail%6#0 (copy)"
      ]
    },
    "1567": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "array_head_and_tail%6#0",
        "array_head_and_tail%6#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%6#0",
        "array_head_and_tail%6#0 (copy)",
        "4"
      ]
    },
    "1569": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%6#0",
        "item_offset%6#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%6#0",
        "item_offset%6#0"
      ]
    },
    "1570": {
      "op": "dup2",
      "defined_out": [
        "array_head_and_tail%6#0",
        "array_head_and_tail%6#0 (copy)",
        "item_offset%6#0",
        "item_offset%6#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%6#0",
        "item_offset%6#0",
        "array_head_and_tail%6#0 (copy)",
        "item_offset%6#0 (copy)"
      ]
    },
    "1571": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%6#0",
        "item_length%4#0",
        "item_offset%6#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%6#0",
        "item_offset%6#0",
        "item_length%4#0"
      ]
    },
    "1572": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%6#0",
        "item_offset%6#0",
        "item_length%4#0",
        "2"
      ]
    },
    "1573": {
      "op": "+",
      "defined_out": [
        "array_head_and_tail%6#0",
        "item_head_tail_length%4#0",
        "item_offset%6#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%6#0",
        "item_offset%6#0",
        "item_head_tail_length%4#0"
      ]
    },
    "1574": {
      "op": "extract3",
      "defined_out": [
        "arc4_item%6#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "arc4_item%6#0"
      ]
    },
    "1575": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%20#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%20#0"
      ]
    },
    "1578": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%20#0",
        "tmp%20#0"
      ]
    },
    "1579": {
      "op": "frame_bury 1",
      "defined_out": [
        "tmp%0#0",
        "tmp%20#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%20#0"
      ]
    },
    "1581": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.isEligibleForCompound",
      "op": "callsub isEligibleForCompound",
      "defined_out": [
        "tmp%0#0",
        "tmp%20#0",
        "tmp%21#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%21#0"
      ]
    },
    "1584": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%21#0",
        "totalCompounded#36"
      ]
    },
    "1586": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%21#0"
      ]
    },
    "1588": {
      "op": "bz batchCompound_after_if_else@15",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1591": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "1593": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "tmp%20#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "18"
      ]
    },
    "1595": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#0",
        "tmp%20#0",
        "tmp%23#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%23#0"
      ]
    },
    "1596": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%23#0",
        "tmp%20#0"
      ]
    },
    "1598": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%20#0",
        "tmp%23#0"
      ]
    },
    "1599": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.triggerCompound",
      "op": "callsub triggerCompound",
      "defined_out": [
        "compounded\u2082#0",
        "tmp%0#0",
        "tmp%20#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "compounded\u2082#0"
      ]
    },
    "1602": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "compounded\u2082#0",
        "totalCompounded#0"
      ]
    },
    "1604": {
      "op": "+",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#36"
      ]
    },
    "1605": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1607": {
      "block": "batchCompound_after_if_else@15",
      "stack_in": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ],
      "op": "frame_dig 12",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "1609": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "totalCompounded#0"
      ]
    },
    "1610": {
      "op": "frame_bury 10",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "1612": {
      "op": "frame_dig 11",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%0#0"
      ]
    },
    "1614": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%0#0",
        "3"
      ]
    },
    "1616": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%25#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%25#0"
      ]
    },
    "1617": {
      "op": "swap",
      "defined_out": [
        "tmp%0#0",
        "tmp%25#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%25#0",
        "totalCompounded#36"
      ]
    },
    "1618": {
      "op": "frame_bury 12",
      "defined_out": [
        "tmp%0#0",
        "tmp%25#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%25#0"
      ]
    },
    "1620": {
      "op": "bz batchCompound_after_if_else@20",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1623": {
      "op": "frame_dig -1",
      "defined_out": [
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "1625": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "0"
      ]
    },
    "1626": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0",
        "tmp%26#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%26#0"
      ]
    },
    "1627": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%26#0",
        "3"
      ]
    },
    "1629": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%27#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%27#0"
      ]
    },
    "1630": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%27#0",
        "totalCompounded#36"
      ]
    },
    "1632": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%27#0"
      ]
    },
    "1634": {
      "op": "bz batchCompound_after_if_else@20",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1637": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ]
    },
    "1639": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%9#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%9#0"
      ]
    },
    "1642": {
      "op": "pushint 3 // 3",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%9#0",
        "3"
      ]
    },
    "1644": {
      "op": "frame_dig 11",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%9#0",
        "3",
        "tmp%0#0"
      ]
    },
    "1646": {
      "op": "<",
      "defined_out": [
        "array_head_and_tail%9#0",
        "index_is_in_bounds%6#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%9#0",
        "index_is_in_bounds%6#0"
      ]
    },
    "1647": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%9#0"
      ]
    },
    "1648": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%9#0",
        "array_head_and_tail%9#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%9#0",
        "array_head_and_tail%9#0 (copy)"
      ]
    },
    "1649": {
      "op": "pushint 6 // 6",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%9#0",
        "array_head_and_tail%9#0 (copy)",
        "6"
      ]
    },
    "1651": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%9#0",
        "item_offset%9#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%9#0",
        "item_offset%9#0"
      ]
    },
    "1652": {
      "op": "dup2",
      "defined_out": [
        "array_head_and_tail%9#0",
        "array_head_and_tail%9#0 (copy)",
        "item_offset%9#0",
        "item_offset%9#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%9#0",
        "item_offset%9#0",
        "array_head_and_tail%9#0 (copy)",
        "item_offset%9#0 (copy)"
      ]
    },
    "1653": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%9#0",
        "item_length%6#0",
        "item_offset%9#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%9#0",
        "item_offset%9#0",
        "item_length%6#0"
      ]
    },
    "1654": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%9#0",
        "item_length%6#0",
        "item_offset%9#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%9#0",
        "item_offset%9#0",
        "item_length%6#0",
        "2"
      ]
    },
    "1655": {
      "op": "+",
      "defined_out": [
        "array_head_and_tail%9#0",
        "item_head_tail_length%6#0",
        "item_offset%9#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%9#0",
        "item_offset%9#0",
        "item_head_tail_length%6#0"
      ]
    },
    "1656": {
      "op": "extract3",
      "defined_out": [
        "arc4_item%9#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "arc4_item%9#0"
      ]
    },
    "1657": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%28#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%28#0"
      ]
    },
    "1660": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%28#0",
        "tmp%28#0"
      ]
    },
    "1661": {
      "op": "frame_bury 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%28#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%28#0"
      ]
    },
    "1663": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.isEligibleForCompound",
      "op": "callsub isEligibleForCompound",
      "defined_out": [
        "tmp%0#0",
        "tmp%28#0",
        "tmp%29#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%29#0"
      ]
    },
    "1666": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%29#0",
        "totalCompounded#36"
      ]
    },
    "1668": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%29#0"
      ]
    },
    "1670": {
      "op": "bz batchCompound_after_if_else@20",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1673": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "1675": {
      "op": "pushint 26 // 26",
      "defined_out": [
        "26",
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "tmp%28#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "26"
      ]
    },
    "1677": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#0",
        "tmp%28#0",
        "tmp%31#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%31#0"
      ]
    },
    "1678": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%31#0",
        "tmp%28#0"
      ]
    },
    "1680": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%28#0",
        "tmp%31#0"
      ]
    },
    "1681": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.triggerCompound",
      "op": "callsub triggerCompound",
      "defined_out": [
        "compounded\u2083#0",
        "tmp%0#0",
        "tmp%28#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "compounded\u2083#0"
      ]
    },
    "1684": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "compounded\u2083#0",
        "totalCompounded#0"
      ]
    },
    "1686": {
      "op": "+",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#36"
      ]
    },
    "1687": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1689": {
      "block": "batchCompound_after_if_else@20",
      "stack_in": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ],
      "op": "frame_dig 12",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "1691": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "totalCompounded#0"
      ]
    },
    "1692": {
      "op": "frame_bury 10",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "1694": {
      "op": "frame_dig 11",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%0#0"
      ]
    },
    "1696": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%0#0",
        "4"
      ]
    },
    "1698": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%33#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%33#0"
      ]
    },
    "1699": {
      "op": "swap",
      "defined_out": [
        "tmp%0#0",
        "tmp%33#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%33#0",
        "totalCompounded#36"
      ]
    },
    "1700": {
      "op": "frame_bury 12",
      "defined_out": [
        "tmp%0#0",
        "tmp%33#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%33#0"
      ]
    },
    "1702": {
      "op": "bz batchCompound_after_if_else@25",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1705": {
      "op": "frame_dig -1",
      "defined_out": [
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "1707": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "0"
      ]
    },
    "1708": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0",
        "tmp%34#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%34#0"
      ]
    },
    "1709": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%34#0",
        "4"
      ]
    },
    "1711": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%35#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%35#0"
      ]
    },
    "1712": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%35#0",
        "totalCompounded#36"
      ]
    },
    "1714": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%35#0"
      ]
    },
    "1716": {
      "op": "bz batchCompound_after_if_else@25",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1719": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ]
    },
    "1721": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%12#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%12#0"
      ]
    },
    "1724": {
      "op": "pushint 4 // 4",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%12#0",
        "4"
      ]
    },
    "1726": {
      "op": "frame_dig 11",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%12#0",
        "4",
        "tmp%0#0"
      ]
    },
    "1728": {
      "op": "<",
      "defined_out": [
        "array_head_and_tail%12#0",
        "index_is_in_bounds%8#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%12#0",
        "index_is_in_bounds%8#0"
      ]
    },
    "1729": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%12#0"
      ]
    },
    "1730": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%12#0",
        "array_head_and_tail%12#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%12#0",
        "array_head_and_tail%12#0 (copy)"
      ]
    },
    "1731": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "array_head_and_tail%12#0",
        "array_head_and_tail%12#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%12#0",
        "array_head_and_tail%12#0 (copy)",
        "8"
      ]
    },
    "1733": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%12#0",
        "item_offset%12#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%12#0",
        "item_offset%12#0"
      ]
    },
    "1734": {
      "op": "dup2",
      "defined_out": [
        "array_head_and_tail%12#0",
        "array_head_and_tail%12#0 (copy)",
        "item_offset%12#0",
        "item_offset%12#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%12#0",
        "item_offset%12#0",
        "array_head_and_tail%12#0 (copy)",
        "item_offset%12#0 (copy)"
      ]
    },
    "1735": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%12#0",
        "item_length%8#0",
        "item_offset%12#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%12#0",
        "item_offset%12#0",
        "item_length%8#0"
      ]
    },
    "1736": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%12#0",
        "item_length%8#0",
        "item_offset%12#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%12#0",
        "item_offset%12#0",
        "item_length%8#0",
        "2"
      ]
    },
    "1737": {
      "op": "+",
      "defined_out": [
        "array_head_and_tail%12#0",
        "item_head_tail_length%8#0",
        "item_offset%12#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%12#0",
        "item_offset%12#0",
        "item_head_tail_length%8#0"
      ]
    },
    "1738": {
      "op": "extract3",
      "defined_out": [
        "arc4_item%12#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "arc4_item%12#0"
      ]
    },
    "1739": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%36#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%36#0"
      ]
    },
    "1742": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%36#0",
        "tmp%36#0"
      ]
    },
    "1743": {
      "op": "frame_bury 3",
      "defined_out": [
        "tmp%0#0",
        "tmp%36#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%36#0"
      ]
    },
    "1745": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.isEligibleForCompound",
      "op": "callsub isEligibleForCompound",
      "defined_out": [
        "tmp%0#0",
        "tmp%36#0",
        "tmp%37#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%37#0"
      ]
    },
    "1748": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%37#0",
        "totalCompounded#36"
      ]
    },
    "1750": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%37#0"
      ]
    },
    "1752": {
      "op": "bz batchCompound_after_if_else@25",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1755": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "1757": {
      "op": "pushint 34 // 34",
      "defined_out": [
        "34",
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "tmp%36#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "34"
      ]
    },
    "1759": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#0",
        "tmp%36#0",
        "tmp%39#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%39#0"
      ]
    },
    "1760": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%39#0",
        "tmp%36#0"
      ]
    },
    "1762": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%36#0",
        "tmp%39#0"
      ]
    },
    "1763": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.triggerCompound",
      "op": "callsub triggerCompound",
      "defined_out": [
        "compounded\u2084#0",
        "tmp%0#0",
        "tmp%36#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "compounded\u2084#0"
      ]
    },
    "1766": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "compounded\u2084#0",
        "totalCompounded#0"
      ]
    },
    "1768": {
      "op": "+",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#36"
      ]
    },
    "1769": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1771": {
      "block": "batchCompound_after_if_else@25",
      "stack_in": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ],
      "op": "frame_dig 12",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "1773": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "totalCompounded#0"
      ]
    },
    "1774": {
      "op": "frame_bury 10",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "1776": {
      "op": "frame_dig 11",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%0#0"
      ]
    },
    "1778": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%0#0",
        "5"
      ]
    },
    "1780": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%41#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%41#0"
      ]
    },
    "1781": {
      "op": "swap",
      "defined_out": [
        "tmp%0#0",
        "tmp%41#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%41#0",
        "totalCompounded#36"
      ]
    },
    "1782": {
      "op": "frame_bury 12",
      "defined_out": [
        "tmp%0#0",
        "tmp%41#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%41#0"
      ]
    },
    "1784": {
      "op": "bz batchCompound_after_if_else@30",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1787": {
      "op": "frame_dig -1",
      "defined_out": [
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "1789": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "0"
      ]
    },
    "1790": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0",
        "tmp%42#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%42#0"
      ]
    },
    "1791": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%42#0",
        "5"
      ]
    },
    "1793": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%43#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%43#0"
      ]
    },
    "1794": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%43#0",
        "totalCompounded#36"
      ]
    },
    "1796": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%43#0"
      ]
    },
    "1798": {
      "op": "bz batchCompound_after_if_else@30",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1801": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ]
    },
    "1803": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%15#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%15#0"
      ]
    },
    "1806": {
      "op": "pushint 5 // 5",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%15#0",
        "5"
      ]
    },
    "1808": {
      "op": "frame_dig 11",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%15#0",
        "5",
        "tmp%0#0"
      ]
    },
    "1810": {
      "op": "<",
      "defined_out": [
        "array_head_and_tail%15#0",
        "index_is_in_bounds%10#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%15#0",
        "index_is_in_bounds%10#0"
      ]
    },
    "1811": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%15#0"
      ]
    },
    "1812": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%15#0",
        "array_head_and_tail%15#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%15#0",
        "array_head_and_tail%15#0 (copy)"
      ]
    },
    "1813": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "array_head_and_tail%15#0",
        "array_head_and_tail%15#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%15#0",
        "array_head_and_tail%15#0 (copy)",
        "10"
      ]
    },
    "1815": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%15#0",
        "item_offset%15#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%15#0",
        "item_offset%15#0"
      ]
    },
    "1816": {
      "op": "dup2",
      "defined_out": [
        "array_head_and_tail%15#0",
        "array_head_and_tail%15#0 (copy)",
        "item_offset%15#0",
        "item_offset%15#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%15#0",
        "item_offset%15#0",
        "array_head_and_tail%15#0 (copy)",
        "item_offset%15#0 (copy)"
      ]
    },
    "1817": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%15#0",
        "item_length%10#0",
        "item_offset%15#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%15#0",
        "item_offset%15#0",
        "item_length%10#0"
      ]
    },
    "1818": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%15#0",
        "item_length%10#0",
        "item_offset%15#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%15#0",
        "item_offset%15#0",
        "item_length%10#0",
        "2"
      ]
    },
    "1819": {
      "op": "+",
      "defined_out": [
        "array_head_and_tail%15#0",
        "item_head_tail_length%10#0",
        "item_offset%15#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%15#0",
        "item_offset%15#0",
        "item_head_tail_length%10#0"
      ]
    },
    "1820": {
      "op": "extract3",
      "defined_out": [
        "arc4_item%15#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "arc4_item%15#0"
      ]
    },
    "1821": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%44#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%44#0"
      ]
    },
    "1824": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%44#0",
        "tmp%44#0"
      ]
    },
    "1825": {
      "op": "frame_bury 5",
      "defined_out": [
        "tmp%0#0",
        "tmp%44#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%44#0"
      ]
    },
    "1827": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.isEligibleForCompound",
      "op": "callsub isEligibleForCompound",
      "defined_out": [
        "tmp%0#0",
        "tmp%44#0",
        "tmp%45#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%45#0"
      ]
    },
    "1830": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%45#0",
        "totalCompounded#36"
      ]
    },
    "1832": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%45#0"
      ]
    },
    "1834": {
      "op": "bz batchCompound_after_if_else@30",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1837": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "1839": {
      "op": "pushint 42 // 42",
      "defined_out": [
        "42",
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "tmp%44#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "42"
      ]
    },
    "1841": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#0",
        "tmp%44#0",
        "tmp%47#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%47#0"
      ]
    },
    "1842": {
      "op": "frame_dig 5",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%47#0",
        "tmp%44#0"
      ]
    },
    "1844": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%44#0",
        "tmp%47#0"
      ]
    },
    "1845": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.triggerCompound",
      "op": "callsub triggerCompound",
      "defined_out": [
        "compounded\u2085#0",
        "tmp%0#0",
        "tmp%44#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "compounded\u2085#0"
      ]
    },
    "1848": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "compounded\u2085#0",
        "totalCompounded#0"
      ]
    },
    "1850": {
      "op": "+",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#36"
      ]
    },
    "1851": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1853": {
      "block": "batchCompound_after_if_else@30",
      "stack_in": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ],
      "op": "frame_dig 12",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "1855": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "totalCompounded#0"
      ]
    },
    "1856": {
      "op": "frame_bury 10",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "1858": {
      "op": "frame_dig 11",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%0#0"
      ]
    },
    "1860": {
      "op": "pushint 6 // 6",
      "defined_out": [
        "6",
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%0#0",
        "6"
      ]
    },
    "1862": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%49#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%49#0"
      ]
    },
    "1863": {
      "op": "swap",
      "defined_out": [
        "tmp%0#0",
        "tmp%49#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%49#0",
        "totalCompounded#36"
      ]
    },
    "1864": {
      "op": "frame_bury 12",
      "defined_out": [
        "tmp%0#0",
        "tmp%49#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%49#0"
      ]
    },
    "1866": {
      "op": "bz batchCompound_after_if_else@35",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1869": {
      "op": "frame_dig -1",
      "defined_out": [
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "1871": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "0"
      ]
    },
    "1872": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0",
        "tmp%50#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%50#0"
      ]
    },
    "1873": {
      "op": "pushint 6 // 6",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%50#0",
        "6"
      ]
    },
    "1875": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%51#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%51#0"
      ]
    },
    "1876": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%51#0",
        "totalCompounded#36"
      ]
    },
    "1878": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%51#0"
      ]
    },
    "1880": {
      "op": "bz batchCompound_after_if_else@35",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1883": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ]
    },
    "1885": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%18#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%18#0"
      ]
    },
    "1888": {
      "op": "pushint 6 // 6",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%18#0",
        "6"
      ]
    },
    "1890": {
      "op": "frame_dig 11",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%18#0",
        "6",
        "tmp%0#0"
      ]
    },
    "1892": {
      "op": "<",
      "defined_out": [
        "array_head_and_tail%18#0",
        "index_is_in_bounds%12#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%18#0",
        "index_is_in_bounds%12#0"
      ]
    },
    "1893": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%18#0"
      ]
    },
    "1894": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%18#0",
        "array_head_and_tail%18#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%18#0",
        "array_head_and_tail%18#0 (copy)"
      ]
    },
    "1895": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "array_head_and_tail%18#0",
        "array_head_and_tail%18#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%18#0",
        "array_head_and_tail%18#0 (copy)",
        "12"
      ]
    },
    "1897": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%18#0",
        "item_offset%18#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%18#0",
        "item_offset%18#0"
      ]
    },
    "1898": {
      "op": "dup2",
      "defined_out": [
        "array_head_and_tail%18#0",
        "array_head_and_tail%18#0 (copy)",
        "item_offset%18#0",
        "item_offset%18#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%18#0",
        "item_offset%18#0",
        "array_head_and_tail%18#0 (copy)",
        "item_offset%18#0 (copy)"
      ]
    },
    "1899": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%18#0",
        "item_length%12#0",
        "item_offset%18#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%18#0",
        "item_offset%18#0",
        "item_length%12#0"
      ]
    },
    "1900": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%18#0",
        "item_length%12#0",
        "item_offset%18#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%18#0",
        "item_offset%18#0",
        "item_length%12#0",
        "2"
      ]
    },
    "1901": {
      "op": "+",
      "defined_out": [
        "array_head_and_tail%18#0",
        "item_head_tail_length%12#0",
        "item_offset%18#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%18#0",
        "item_offset%18#0",
        "item_head_tail_length%12#0"
      ]
    },
    "1902": {
      "op": "extract3",
      "defined_out": [
        "arc4_item%18#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "arc4_item%18#0"
      ]
    },
    "1903": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%52#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%52#0"
      ]
    },
    "1906": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%52#0",
        "tmp%52#0"
      ]
    },
    "1907": {
      "op": "frame_bury 6",
      "defined_out": [
        "tmp%0#0",
        "tmp%52#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%52#0"
      ]
    },
    "1909": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.isEligibleForCompound",
      "op": "callsub isEligibleForCompound",
      "defined_out": [
        "tmp%0#0",
        "tmp%52#0",
        "tmp%53#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%53#0"
      ]
    },
    "1912": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%53#0",
        "totalCompounded#36"
      ]
    },
    "1914": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%53#0"
      ]
    },
    "1916": {
      "op": "bz batchCompound_after_if_else@35",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1919": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "1921": {
      "op": "pushint 50 // 50",
      "defined_out": [
        "50",
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "tmp%52#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "50"
      ]
    },
    "1923": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#0",
        "tmp%52#0",
        "tmp%55#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%55#0"
      ]
    },
    "1924": {
      "op": "frame_dig 6",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%55#0",
        "tmp%52#0"
      ]
    },
    "1926": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%52#0",
        "tmp%55#0"
      ]
    },
    "1927": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.triggerCompound",
      "op": "callsub triggerCompound",
      "defined_out": [
        "compounded\u2086#0",
        "tmp%0#0",
        "tmp%52#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "compounded\u2086#0"
      ]
    },
    "1930": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "compounded\u2086#0",
        "totalCompounded#0"
      ]
    },
    "1932": {
      "op": "+",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#36"
      ]
    },
    "1933": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1935": {
      "block": "batchCompound_after_if_else@35",
      "stack_in": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ],
      "op": "frame_dig 12",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "1937": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "totalCompounded#0"
      ]
    },
    "1938": {
      "op": "frame_bury 10",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "1940": {
      "op": "frame_dig 11",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%0#0"
      ]
    },
    "1942": {
      "op": "pushint 7 // 7",
      "defined_out": [
        "7",
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%0#0",
        "7"
      ]
    },
    "1944": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%57#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%57#0"
      ]
    },
    "1945": {
      "op": "swap",
      "defined_out": [
        "tmp%0#0",
        "tmp%57#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%57#0",
        "totalCompounded#36"
      ]
    },
    "1946": {
      "op": "frame_bury 12",
      "defined_out": [
        "tmp%0#0",
        "tmp%57#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%57#0"
      ]
    },
    "1948": {
      "op": "bz batchCompound_after_if_else@40",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1951": {
      "op": "frame_dig -1",
      "defined_out": [
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "1953": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "0"
      ]
    },
    "1954": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0",
        "tmp%58#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%58#0"
      ]
    },
    "1955": {
      "op": "pushint 7 // 7",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%58#0",
        "7"
      ]
    },
    "1957": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%59#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%59#0"
      ]
    },
    "1958": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%59#0",
        "totalCompounded#36"
      ]
    },
    "1960": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%59#0"
      ]
    },
    "1962": {
      "op": "bz batchCompound_after_if_else@40",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "1965": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ]
    },
    "1967": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%21#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%21#0"
      ]
    },
    "1970": {
      "op": "pushint 7 // 7",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%21#0",
        "7"
      ]
    },
    "1972": {
      "op": "frame_dig 11",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%21#0",
        "7",
        "tmp%0#0"
      ]
    },
    "1974": {
      "op": "<",
      "defined_out": [
        "array_head_and_tail%21#0",
        "index_is_in_bounds%14#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%21#0",
        "index_is_in_bounds%14#0"
      ]
    },
    "1975": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%21#0"
      ]
    },
    "1976": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%21#0",
        "array_head_and_tail%21#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%21#0",
        "array_head_and_tail%21#0 (copy)"
      ]
    },
    "1977": {
      "op": "pushint 14 // 14",
      "defined_out": [
        "14",
        "array_head_and_tail%21#0",
        "array_head_and_tail%21#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%21#0",
        "array_head_and_tail%21#0 (copy)",
        "14"
      ]
    },
    "1979": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%21#0",
        "item_offset%21#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%21#0",
        "item_offset%21#0"
      ]
    },
    "1980": {
      "op": "dup2",
      "defined_out": [
        "array_head_and_tail%21#0",
        "array_head_and_tail%21#0 (copy)",
        "item_offset%21#0",
        "item_offset%21#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%21#0",
        "item_offset%21#0",
        "array_head_and_tail%21#0 (copy)",
        "item_offset%21#0 (copy)"
      ]
    },
    "1981": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%21#0",
        "item_length%14#0",
        "item_offset%21#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%21#0",
        "item_offset%21#0",
        "item_length%14#0"
      ]
    },
    "1982": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%21#0",
        "item_length%14#0",
        "item_offset%21#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%21#0",
        "item_offset%21#0",
        "item_length%14#0",
        "2"
      ]
    },
    "1983": {
      "op": "+",
      "defined_out": [
        "array_head_and_tail%21#0",
        "item_head_tail_length%14#0",
        "item_offset%21#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%21#0",
        "item_offset%21#0",
        "item_head_tail_length%14#0"
      ]
    },
    "1984": {
      "op": "extract3",
      "defined_out": [
        "arc4_item%21#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "arc4_item%21#0"
      ]
    },
    "1985": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%60#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%60#0"
      ]
    },
    "1988": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%60#0",
        "tmp%60#0"
      ]
    },
    "1989": {
      "op": "frame_bury 7",
      "defined_out": [
        "tmp%0#0",
        "tmp%60#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%60#0"
      ]
    },
    "1991": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.isEligibleForCompound",
      "op": "callsub isEligibleForCompound",
      "defined_out": [
        "tmp%0#0",
        "tmp%60#0",
        "tmp%61#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%61#0"
      ]
    },
    "1994": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%61#0",
        "totalCompounded#36"
      ]
    },
    "1996": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%61#0"
      ]
    },
    "1998": {
      "op": "bz batchCompound_after_if_else@40",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "2001": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "2003": {
      "op": "pushint 58 // 58",
      "defined_out": [
        "58",
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "tmp%60#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "58"
      ]
    },
    "2005": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#0",
        "tmp%60#0",
        "tmp%63#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%63#0"
      ]
    },
    "2006": {
      "op": "frame_dig 7",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%63#0",
        "tmp%60#0"
      ]
    },
    "2008": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%60#0",
        "tmp%63#0"
      ]
    },
    "2009": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.triggerCompound",
      "op": "callsub triggerCompound",
      "defined_out": [
        "compounded\u2087#0",
        "tmp%0#0",
        "tmp%60#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "compounded\u2087#0"
      ]
    },
    "2012": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "compounded\u2087#0",
        "totalCompounded#0"
      ]
    },
    "2014": {
      "op": "+",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#36"
      ]
    },
    "2015": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "2017": {
      "block": "batchCompound_after_if_else@40",
      "stack_in": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ],
      "op": "frame_dig 12",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "2019": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "totalCompounded#0"
      ]
    },
    "2020": {
      "op": "frame_bury 10",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "2022": {
      "op": "frame_dig 11",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%0#0"
      ]
    },
    "2024": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%0#0",
        "8"
      ]
    },
    "2026": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%65#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%65#0"
      ]
    },
    "2027": {
      "op": "swap",
      "defined_out": [
        "tmp%0#0",
        "tmp%65#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%65#0",
        "totalCompounded#36"
      ]
    },
    "2028": {
      "op": "frame_bury 12",
      "defined_out": [
        "tmp%0#0",
        "tmp%65#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%65#0"
      ]
    },
    "2030": {
      "op": "bz batchCompound_after_if_else@45",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "2033": {
      "op": "frame_dig -1",
      "defined_out": [
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "2035": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "0"
      ]
    },
    "2036": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0",
        "tmp%66#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%66#0"
      ]
    },
    "2037": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%66#0",
        "8"
      ]
    },
    "2039": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%67#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%67#0"
      ]
    },
    "2040": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%67#0",
        "totalCompounded#36"
      ]
    },
    "2042": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%67#0"
      ]
    },
    "2044": {
      "op": "bz batchCompound_after_if_else@45",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "2047": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ]
    },
    "2049": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%24#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%24#0"
      ]
    },
    "2052": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%24#0",
        "8"
      ]
    },
    "2054": {
      "op": "frame_dig 11",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%24#0",
        "8",
        "tmp%0#0"
      ]
    },
    "2056": {
      "op": "<",
      "defined_out": [
        "array_head_and_tail%24#0",
        "index_is_in_bounds%16#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%24#0",
        "index_is_in_bounds%16#0"
      ]
    },
    "2057": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%24#0"
      ]
    },
    "2058": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%24#0",
        "array_head_and_tail%24#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%24#0",
        "array_head_and_tail%24#0 (copy)"
      ]
    },
    "2059": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "array_head_and_tail%24#0",
        "array_head_and_tail%24#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%24#0",
        "array_head_and_tail%24#0 (copy)",
        "16"
      ]
    },
    "2061": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%24#0",
        "item_offset%24#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%24#0",
        "item_offset%24#0"
      ]
    },
    "2062": {
      "op": "dup2",
      "defined_out": [
        "array_head_and_tail%24#0",
        "array_head_and_tail%24#0 (copy)",
        "item_offset%24#0",
        "item_offset%24#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%24#0",
        "item_offset%24#0",
        "array_head_and_tail%24#0 (copy)",
        "item_offset%24#0 (copy)"
      ]
    },
    "2063": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%24#0",
        "item_length%16#0",
        "item_offset%24#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%24#0",
        "item_offset%24#0",
        "item_length%16#0"
      ]
    },
    "2064": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%24#0",
        "item_length%16#0",
        "item_offset%24#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%24#0",
        "item_offset%24#0",
        "item_length%16#0",
        "2"
      ]
    },
    "2065": {
      "op": "+",
      "defined_out": [
        "array_head_and_tail%24#0",
        "item_head_tail_length%16#0",
        "item_offset%24#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%24#0",
        "item_offset%24#0",
        "item_head_tail_length%16#0"
      ]
    },
    "2066": {
      "op": "extract3",
      "defined_out": [
        "arc4_item%24#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "arc4_item%24#0"
      ]
    },
    "2067": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%68#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%68#0"
      ]
    },
    "2070": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%68#0",
        "tmp%68#0"
      ]
    },
    "2071": {
      "op": "frame_bury 8",
      "defined_out": [
        "tmp%0#0",
        "tmp%68#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%68#0"
      ]
    },
    "2073": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.isEligibleForCompound",
      "op": "callsub isEligibleForCompound",
      "defined_out": [
        "tmp%0#0",
        "tmp%68#0",
        "tmp%69#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%69#0"
      ]
    },
    "2076": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%69#0",
        "totalCompounded#36"
      ]
    },
    "2078": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%69#0"
      ]
    },
    "2080": {
      "op": "bz batchCompound_after_if_else@45",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "2083": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "2085": {
      "op": "pushint 66 // 66",
      "defined_out": [
        "66",
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "tmp%68#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "66"
      ]
    },
    "2087": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#0",
        "tmp%68#0",
        "tmp%71#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%71#0"
      ]
    },
    "2088": {
      "op": "frame_dig 8",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%71#0",
        "tmp%68#0"
      ]
    },
    "2090": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%68#0",
        "tmp%71#0"
      ]
    },
    "2091": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.triggerCompound",
      "op": "callsub triggerCompound",
      "defined_out": [
        "compounded\u2088#0",
        "tmp%0#0",
        "tmp%68#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "compounded\u2088#0"
      ]
    },
    "2094": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "compounded\u2088#0",
        "totalCompounded#0"
      ]
    },
    "2096": {
      "op": "+",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#36"
      ]
    },
    "2097": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "2099": {
      "block": "batchCompound_after_if_else@45",
      "stack_in": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ],
      "op": "frame_dig 12",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "2101": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "totalCompounded#0"
      ]
    },
    "2102": {
      "op": "frame_bury 10",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "2104": {
      "op": "frame_dig 11",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%0#0"
      ]
    },
    "2106": {
      "op": "pushint 9 // 9",
      "defined_out": [
        "9",
        "tmp%0#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%0#0",
        "9"
      ]
    },
    "2108": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%73#0",
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0",
        "tmp%73#0"
      ]
    },
    "2109": {
      "op": "swap",
      "defined_out": [
        "tmp%0#0",
        "tmp%73#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%73#0",
        "totalCompounded#36"
      ]
    },
    "2110": {
      "op": "frame_bury 12",
      "defined_out": [
        "tmp%0#0",
        "tmp%73#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%73#0"
      ]
    },
    "2112": {
      "op": "bz batchCompound_after_if_else@50",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "2115": {
      "op": "frame_dig -1",
      "defined_out": [
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "2117": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "0"
      ]
    },
    "2118": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0",
        "tmp%74#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%74#0"
      ]
    },
    "2119": {
      "op": "pushint 9 // 9",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%74#0",
        "9"
      ]
    },
    "2121": {
      "op": ">",
      "defined_out": [
        "tmp%0#0",
        "tmp%75#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%75#0"
      ]
    },
    "2122": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%75#0",
        "totalCompounded#36"
      ]
    },
    "2124": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%75#0"
      ]
    },
    "2126": {
      "op": "bz batchCompound_after_if_else@50",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "2129": {
      "op": "frame_dig -2",
      "defined_out": [
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "users#0 (copy)"
      ]
    },
    "2131": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%27#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%27#0"
      ]
    },
    "2134": {
      "op": "pushint 9 // 9",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%27#0",
        "9"
      ]
    },
    "2136": {
      "op": "frame_dig 11",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%27#0",
        "9",
        "tmp%0#0"
      ]
    },
    "2138": {
      "op": "<",
      "defined_out": [
        "array_head_and_tail%27#0",
        "index_is_in_bounds%18#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%27#0",
        "index_is_in_bounds%18#0"
      ]
    },
    "2139": {
      "error": "Index access is out of bounds",
      "op": "assert // Index access is out of bounds",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%27#0"
      ]
    },
    "2140": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%27#0",
        "array_head_and_tail%27#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%27#0",
        "array_head_and_tail%27#0 (copy)"
      ]
    },
    "2141": {
      "op": "pushint 18 // 18",
      "defined_out": [
        "18",
        "array_head_and_tail%27#0",
        "array_head_and_tail%27#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%27#0",
        "array_head_and_tail%27#0 (copy)",
        "18"
      ]
    },
    "2143": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%27#0",
        "item_offset%27#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%27#0",
        "item_offset%27#0"
      ]
    },
    "2144": {
      "op": "dup2",
      "defined_out": [
        "array_head_and_tail%27#0",
        "array_head_and_tail%27#0 (copy)",
        "item_offset%27#0",
        "item_offset%27#0 (copy)",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%27#0",
        "item_offset%27#0",
        "array_head_and_tail%27#0 (copy)",
        "item_offset%27#0 (copy)"
      ]
    },
    "2145": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail%27#0",
        "item_length%18#0",
        "item_offset%27#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%27#0",
        "item_offset%27#0",
        "item_length%18#0"
      ]
    },
    "2146": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail%27#0",
        "item_length%18#0",
        "item_offset%27#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%27#0",
        "item_offset%27#0",
        "item_length%18#0",
        "2"
      ]
    },
    "2147": {
      "op": "+",
      "defined_out": [
        "array_head_and_tail%27#0",
        "item_head_tail_length%18#0",
        "item_offset%27#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "array_head_and_tail%27#0",
        "item_offset%27#0",
        "item_head_tail_length%18#0"
      ]
    },
    "2148": {
      "op": "extract3",
      "defined_out": [
        "arc4_item%27#0",
        "tmp%0#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "arc4_item%27#0"
      ]
    },
    "2149": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%0#0",
        "tmp%76#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%76#0"
      ]
    },
    "2152": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%76#0",
        "tmp%76#0"
      ]
    },
    "2153": {
      "op": "frame_bury 9",
      "defined_out": [
        "tmp%0#0",
        "tmp%76#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%76#0"
      ]
    },
    "2155": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.isEligibleForCompound",
      "op": "callsub isEligibleForCompound",
      "defined_out": [
        "tmp%0#0",
        "tmp%76#0",
        "tmp%77#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%77#0"
      ]
    },
    "2158": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%77#0",
        "totalCompounded#36"
      ]
    },
    "2160": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%77#0"
      ]
    },
    "2162": {
      "op": "bz batchCompound_after_if_else@50",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "2165": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)"
      ]
    },
    "2167": {
      "op": "pushint 74 // 74",
      "defined_out": [
        "74",
        "pendingRewardsArray#0 (copy)",
        "tmp%0#0",
        "tmp%76#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "pendingRewardsArray#0 (copy)",
        "74"
      ]
    },
    "2169": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#0",
        "tmp%76#0",
        "tmp%79#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%79#0"
      ]
    },
    "2170": {
      "op": "frame_dig 9",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%79#0",
        "tmp%76#0"
      ]
    },
    "2172": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "tmp%76#0",
        "tmp%79#0"
      ]
    },
    "2173": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.triggerCompound",
      "op": "callsub triggerCompound",
      "defined_out": [
        "compounded\u2089#0",
        "tmp%0#0",
        "tmp%76#0",
        "totalCompounded#0",
        "totalCompounded#36"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "compounded\u2089#0"
      ]
    },
    "2176": {
      "op": "frame_dig 10",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "compounded\u2089#0",
        "totalCompounded#0"
      ]
    },
    "2178": {
      "op": "+",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#36"
      ]
    },
    "2179": {
      "op": "frame_bury 12",
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ]
    },
    "2181": {
      "block": "batchCompound_after_if_else@50",
      "stack_in": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36"
      ],
      "op": "frame_dig 12",
      "defined_out": [
        "totalCompounded#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%20#0",
        "tmp%28#0",
        "tmp%36#0",
        "tmp%4#0",
        "tmp%44#0",
        "tmp%52#0",
        "tmp%60#0",
        "tmp%68#0",
        "tmp%76#0",
        "totalCompounded#0",
        "tmp%0#0",
        "totalCompounded#36",
        "totalCompounded#0"
      ]
    },
    "2183": {
      "op": "frame_bury 0"
    },
    "2185": {
      "retsub": true,
      "op": "retsub"
    },
    "2186": {
      "subroutine": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.calculateCompoundEfficiency",
      "params": {
        "rewardAmount#0": "uint64",
        "gasCost#0": "uint64"
      },
      "block": "calculateCompoundEfficiency",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2189": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "totalCost#0"
      ]
    },
    "2191": {
      "op": "frame_dig -2",
      "defined_out": [
        "rewardAmount#0 (copy)"
      ],
      "stack_out": [
        "totalCost#0",
        "rewardAmount#0 (copy)"
      ]
    },
    "2193": {
      "op": "bnz calculateCompoundEfficiency_after_if_else@2",
      "stack_out": [
        "totalCost#0"
      ]
    },
    "2196": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "totalCost#0",
        "0"
      ]
    },
    "2197": {
      "op": "swap"
    },
    "2198": {
      "retsub": true,
      "op": "retsub"
    },
    "2199": {
      "block": "calculateCompoundEfficiency_after_if_else@2",
      "stack_in": [
        "totalCost#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "totalCost#0",
        "0"
      ]
    },
    "2200": {
      "op": "bytec_3 // \"compoundFeeRate\"",
      "defined_out": [
        "\"compoundFeeRate\"",
        "0"
      ],
      "stack_out": [
        "totalCost#0",
        "0",
        "\"compoundFeeRate\""
      ]
    },
    "2201": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "totalCost#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2202": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "totalCost#0",
        "maybe_value%0#0"
      ]
    },
    "2203": {
      "op": "frame_dig -2",
      "defined_out": [
        "maybe_value%0#0",
        "rewardAmount#0 (copy)"
      ],
      "stack_out": [
        "totalCost#0",
        "maybe_value%0#0",
        "rewardAmount#0 (copy)"
      ]
    },
    "2205": {
      "op": "*",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "totalCost#0",
        "tmp%1#0"
      ]
    },
    "2206": {
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "tmp%1#0"
      ],
      "stack_out": [
        "totalCost#0",
        "tmp%1#0",
        "10000"
      ]
    },
    "2208": {
      "op": "/",
      "defined_out": [
        "compoundFee#0"
      ],
      "stack_out": [
        "totalCost#0",
        "compoundFee#0"
      ]
    },
    "2209": {
      "op": "frame_dig -1",
      "defined_out": [
        "compoundFee#0",
        "gasCost#0 (copy)"
      ],
      "stack_out": [
        "totalCost#0",
        "compoundFee#0",
        "gasCost#0 (copy)"
      ]
    },
    "2211": {
      "op": "+",
      "defined_out": [
        "totalCost#0"
      ],
      "stack_out": [
        "totalCost#0",
        "totalCost#0"
      ]
    },
    "2212": {
      "op": "dup",
      "stack_out": [
        "totalCost#0",
        "totalCost#0",
        "totalCost#0"
      ]
    },
    "2213": {
      "op": "frame_bury 0",
      "defined_out": [
        "totalCost#0"
      ],
      "stack_out": [
        "totalCost#0",
        "totalCost#0"
      ]
    },
    "2215": {
      "op": "frame_dig -2",
      "stack_out": [
        "totalCost#0",
        "totalCost#0",
        "rewardAmount#0 (copy)"
      ]
    },
    "2217": {
      "op": "<",
      "defined_out": [
        "tmp%2#0",
        "totalCost#0"
      ],
      "stack_out": [
        "totalCost#0",
        "tmp%2#0"
      ]
    },
    "2218": {
      "op": "bz calculateCompoundEfficiency_ternary_false@4",
      "stack_out": [
        "totalCost#0"
      ]
    },
    "2221": {
      "op": "frame_dig -2",
      "stack_out": [
        "totalCost#0",
        "rewardAmount#0 (copy)"
      ]
    },
    "2223": {
      "op": "frame_dig 0",
      "stack_out": [
        "totalCost#0",
        "rewardAmount#0 (copy)",
        "totalCost#0"
      ]
    },
    "2225": {
      "op": "-",
      "defined_out": [
        "netReward#0",
        "totalCost#0"
      ],
      "stack_out": [
        "totalCost#0",
        "netReward#0"
      ]
    },
    "2226": {
      "block": "calculateCompoundEfficiency_ternary_merge@5",
      "stack_in": [
        "totalCost#0",
        "netReward#0"
      ],
      "op": "intc 4 // 10000",
      "defined_out": [
        "10000",
        "netReward#0"
      ],
      "stack_out": [
        "totalCost#0",
        "netReward#0",
        "10000"
      ]
    },
    "2228": {
      "op": "*",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "totalCost#0",
        "tmp%3#0"
      ]
    },
    "2229": {
      "op": "frame_dig -2",
      "defined_out": [
        "rewardAmount#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "totalCost#0",
        "tmp%3#0",
        "rewardAmount#0 (copy)"
      ]
    },
    "2231": {
      "op": "/",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "totalCost#0",
        "tmp%4#0"
      ]
    },
    "2232": {
      "op": "swap"
    },
    "2233": {
      "retsub": true,
      "op": "retsub"
    },
    "2234": {
      "block": "calculateCompoundEfficiency_ternary_false@4",
      "stack_in": [
        "totalCost#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "netReward#0"
      ],
      "stack_out": [
        "totalCost#0",
        "netReward#0"
      ]
    },
    "2235": {
      "op": "b calculateCompoundEfficiency_ternary_merge@5"
    },
    "2238": {
      "subroutine": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.recordCompoundHistory",
      "params": {
        "user#0": "bytes",
        "rewardAmount#0": "uint64",
        "compoundedAmount#0": "uint64",
        "gasCost#0": "uint64",
        "efficiency#0": "uint64"
      },
      "block": "recordCompoundHistory",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "2241": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "ts#0"
      ],
      "stack_out": [
        "ts#0"
      ]
    },
    "2243": {
      "op": "frame_dig -5",
      "defined_out": [
        "ts#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "ts#0",
        "user#0 (copy)"
      ]
    },
    "2245": {
      "op": "pushbytes \"_history_\"",
      "defined_out": [
        "\"_history_\"",
        "ts#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "ts#0",
        "user#0 (copy)",
        "\"_history_\""
      ]
    },
    "2256": {
      "op": "concat",
      "defined_out": [
        "a#1",
        "ts#0"
      ],
      "stack_out": [
        "ts#0",
        "a#1"
      ]
    },
    "2257": {
      "op": "swap",
      "stack_out": [
        "a#1",
        "ts#0"
      ]
    },
    "2258": {
      "op": "itob",
      "defined_out": [
        "a#1",
        "b#1"
      ],
      "stack_out": [
        "a#1",
        "b#1"
      ]
    },
    "2259": {
      "op": "swap",
      "stack_out": [
        "b#1",
        "a#1"
      ]
    },
    "2260": {
      "op": "dig 1",
      "defined_out": [
        "a#1",
        "b#1",
        "b#1 (copy)"
      ],
      "stack_out": [
        "b#1",
        "a#1",
        "b#1 (copy)"
      ]
    },
    "2262": {
      "op": "concat",
      "stack_out": [
        "b#1",
        "a#1"
      ]
    },
    "2263": {
      "op": "dup",
      "defined_out": [
        "a#1",
        "a#1 (copy)",
        "b#1"
      ],
      "stack_out": [
        "b#1",
        "a#1",
        "a#1 (copy)"
      ]
    },
    "2264": {
      "op": "pushbytes \"_reward\"",
      "defined_out": [
        "\"_reward\"",
        "a#1",
        "a#1 (copy)",
        "b#1"
      ],
      "stack_out": [
        "b#1",
        "a#1",
        "a#1 (copy)",
        "\"_reward\""
      ]
    },
    "2273": {
      "op": "concat",
      "defined_out": [
        "a#1",
        "b#1",
        "tmp%0#4"
      ],
      "stack_out": [
        "b#1",
        "a#1",
        "tmp%0#4"
      ]
    },
    "2274": {
      "op": "frame_dig -4",
      "defined_out": [
        "a#1",
        "b#1",
        "rewardAmount#0 (copy)",
        "tmp%0#4"
      ],
      "stack_out": [
        "b#1",
        "a#1",
        "tmp%0#4",
        "rewardAmount#0 (copy)"
      ]
    },
    "2276": {
      "op": "itob",
      "defined_out": [
        "a#1",
        "b#1",
        "new_box_value%0#0",
        "tmp%0#4"
      ],
      "stack_out": [
        "b#1",
        "a#1",
        "tmp%0#4",
        "new_box_value%0#0"
      ]
    },
    "2277": {
      "op": "box_put",
      "stack_out": [
        "b#1",
        "a#1"
      ]
    },
    "2278": {
      "op": "dup",
      "stack_out": [
        "b#1",
        "a#1",
        "a#1 (copy)"
      ]
    },
    "2279": {
      "op": "pushbytes \"_compounded\"",
      "defined_out": [
        "\"_compounded\"",
        "a#1",
        "a#1 (copy)",
        "b#1"
      ],
      "stack_out": [
        "b#1",
        "a#1",
        "a#1 (copy)",
        "\"_compounded\""
      ]
    },
    "2292": {
      "op": "concat",
      "stack_out": [
        "b#1",
        "a#1",
        "tmp%0#4"
      ]
    },
    "2293": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#1",
        "b#1",
        "compoundedAmount#0 (copy)",
        "tmp%0#4"
      ],
      "stack_out": [
        "b#1",
        "a#1",
        "tmp%0#4",
        "compoundedAmount#0 (copy)"
      ]
    },
    "2295": {
      "op": "itob",
      "defined_out": [
        "a#1",
        "b#1",
        "new_box_value%1#0",
        "tmp%0#4"
      ],
      "stack_out": [
        "b#1",
        "a#1",
        "tmp%0#4",
        "new_box_value%1#0"
      ]
    },
    "2296": {
      "op": "box_put",
      "stack_out": [
        "b#1",
        "a#1"
      ]
    },
    "2297": {
      "op": "dup",
      "stack_out": [
        "b#1",
        "a#1",
        "a#1 (copy)"
      ]
    },
    "2298": {
      "op": "pushbytes \"_gas\"",
      "defined_out": [
        "\"_gas\"",
        "a#1",
        "a#1 (copy)",
        "b#1"
      ],
      "stack_out": [
        "b#1",
        "a#1",
        "a#1 (copy)",
        "\"_gas\""
      ]
    },
    "2304": {
      "op": "concat",
      "stack_out": [
        "b#1",
        "a#1",
        "tmp%0#4"
      ]
    },
    "2305": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#1",
        "b#1",
        "gasCost#0 (copy)",
        "tmp%0#4"
      ],
      "stack_out": [
        "b#1",
        "a#1",
        "tmp%0#4",
        "gasCost#0 (copy)"
      ]
    },
    "2307": {
      "op": "itob",
      "defined_out": [
        "a#1",
        "b#1",
        "new_box_value%2#0",
        "tmp%0#4"
      ],
      "stack_out": [
        "b#1",
        "a#1",
        "tmp%0#4",
        "new_box_value%2#0"
      ]
    },
    "2308": {
      "op": "box_put",
      "stack_out": [
        "b#1",
        "a#1"
      ]
    },
    "2309": {
      "op": "dup",
      "stack_out": [
        "b#1",
        "a#1",
        "a#1 (copy)"
      ]
    },
    "2310": {
      "op": "pushbytes \"_eff\"",
      "defined_out": [
        "\"_eff\"",
        "a#1",
        "a#1 (copy)",
        "b#1"
      ],
      "stack_out": [
        "b#1",
        "a#1",
        "a#1 (copy)",
        "\"_eff\""
      ]
    },
    "2316": {
      "op": "concat",
      "stack_out": [
        "b#1",
        "a#1",
        "tmp%0#4"
      ]
    },
    "2317": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#1",
        "b#1",
        "efficiency#0 (copy)",
        "tmp%0#4"
      ],
      "stack_out": [
        "b#1",
        "a#1",
        "tmp%0#4",
        "efficiency#0 (copy)"
      ]
    },
    "2319": {
      "op": "itob",
      "defined_out": [
        "a#1",
        "b#1",
        "new_box_value%3#0",
        "tmp%0#4"
      ],
      "stack_out": [
        "b#1",
        "a#1",
        "tmp%0#4",
        "new_box_value%3#0"
      ]
    },
    "2320": {
      "op": "box_put",
      "stack_out": [
        "b#1",
        "a#1"
      ]
    },
    "2321": {
      "op": "pushbytes \"_ts\"",
      "defined_out": [
        "\"_ts\"",
        "a#1",
        "b#1"
      ],
      "stack_out": [
        "b#1",
        "a#1",
        "\"_ts\""
      ]
    },
    "2326": {
      "op": "concat",
      "stack_out": [
        "b#1",
        "tmp%0#4"
      ]
    },
    "2327": {
      "op": "swap",
      "stack_out": [
        "tmp%0#4",
        "b#1"
      ]
    },
    "2328": {
      "op": "box_put",
      "stack_out": []
    },
    "2329": {
      "retsub": true,
      "op": "retsub"
    },
    "2330": {
      "subroutine": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.updateGlobalStats",
      "params": {
        "compoundedAmount#0": "uint64",
        "efficiency#0": "uint64"
      },
      "block": "updateGlobalStats",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "2333": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2334": {
      "op": "bytec 5 // \"totalCompounds\"",
      "defined_out": [
        "\"totalCompounds\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalCompounds\""
      ]
    },
    "2336": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2337": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2338": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "2339": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "2340": {
      "op": "bytec 5 // \"totalCompounds\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalCompounds\""
      ]
    },
    "2342": {
      "op": "swap",
      "stack_out": [
        "\"totalCompounds\"",
        "new_state_value%0#0"
      ]
    },
    "2343": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2344": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2345": {
      "op": "bytec 7 // \"totalRewardsCompounded\"",
      "defined_out": [
        "\"totalRewardsCompounded\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalRewardsCompounded\""
      ]
    },
    "2347": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2348": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "2349": {
      "op": "frame_dig -2",
      "defined_out": [
        "compoundedAmount#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "compoundedAmount#0 (copy)"
      ]
    },
    "2351": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "2352": {
      "op": "bytec 7 // \"totalRewardsCompounded\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"totalRewardsCompounded\""
      ]
    },
    "2354": {
      "op": "swap",
      "stack_out": [
        "\"totalRewardsCompounded\"",
        "new_state_value%1#0"
      ]
    },
    "2355": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2356": {
      "op": "bytec 16 // \"lastGlobalCompound\"",
      "defined_out": [
        "\"lastGlobalCompound\""
      ],
      "stack_out": [
        "\"lastGlobalCompound\""
      ]
    },
    "2358": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"lastGlobalCompound\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "\"lastGlobalCompound\"",
        "new_state_value%2#0"
      ]
    },
    "2360": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2361": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "2362": {
      "op": "bytec 9 // \"bestEfficiency\"",
      "defined_out": [
        "\"bestEfficiency\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"bestEfficiency\""
      ]
    },
    "2364": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2365": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "2366": {
      "op": "frame_dig -1",
      "defined_out": [
        "efficiency#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "efficiency#0 (copy)"
      ]
    },
    "2368": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2369": {
      "op": "bz updateGlobalStats_after_if_else@2",
      "stack_out": []
    },
    "2372": {
      "op": "bytec 9 // \"bestEfficiency\"",
      "stack_out": [
        "\"bestEfficiency\""
      ]
    },
    "2374": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"bestEfficiency\"",
        "efficiency#0 (copy)"
      ]
    },
    "2376": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2377": {
      "block": "updateGlobalStats_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2378": {
      "op": "bytec 8 // \"averageEfficiency\"",
      "defined_out": [
        "\"averageEfficiency\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"averageEfficiency\""
      ]
    },
    "2380": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentAvg#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "currentAvg#0",
        "maybe_exists%3#0"
      ]
    },
    "2381": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentAvg#0"
      ]
    },
    "2382": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentAvg#0",
        "0"
      ]
    },
    "2383": {
      "op": "bytec 5 // \"totalCompounds\"",
      "defined_out": [
        "\"totalCompounds\"",
        "0",
        "currentAvg#0"
      ],
      "stack_out": [
        "currentAvg#0",
        "0",
        "\"totalCompounds\""
      ]
    },
    "2385": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentAvg#0",
        "maybe_exists%4#0",
        "totalCount#0"
      ],
      "stack_out": [
        "currentAvg#0",
        "totalCount#0",
        "maybe_exists%4#0"
      ]
    },
    "2386": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentAvg#0",
        "totalCount#0"
      ]
    },
    "2387": {
      "op": "dup",
      "defined_out": [
        "currentAvg#0",
        "totalCount#0",
        "totalCount#0 (copy)"
      ],
      "stack_out": [
        "currentAvg#0",
        "totalCount#0",
        "totalCount#0 (copy)"
      ]
    },
    "2388": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "currentAvg#0",
        "totalCount#0",
        "totalCount#0 (copy)"
      ],
      "stack_out": [
        "currentAvg#0",
        "totalCount#0",
        "totalCount#0 (copy)",
        "1"
      ]
    },
    "2389": {
      "op": "-",
      "defined_out": [
        "currentAvg#0",
        "tmp%1#0",
        "totalCount#0"
      ],
      "stack_out": [
        "currentAvg#0",
        "totalCount#0",
        "tmp%1#0"
      ]
    },
    "2390": {
      "op": "uncover 2",
      "stack_out": [
        "totalCount#0",
        "tmp%1#0",
        "currentAvg#0"
      ]
    },
    "2392": {
      "op": "*",
      "defined_out": [
        "tmp%2#0",
        "totalCount#0"
      ],
      "stack_out": [
        "totalCount#0",
        "tmp%2#0"
      ]
    },
    "2393": {
      "op": "frame_dig -1",
      "defined_out": [
        "efficiency#0 (copy)",
        "tmp%2#0",
        "totalCount#0"
      ],
      "stack_out": [
        "totalCount#0",
        "tmp%2#0",
        "efficiency#0 (copy)"
      ]
    },
    "2395": {
      "op": "+",
      "defined_out": [
        "tmp%3#0",
        "totalCount#0"
      ],
      "stack_out": [
        "totalCount#0",
        "tmp%3#0"
      ]
    },
    "2396": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "totalCount#0"
      ]
    },
    "2397": {
      "op": "/",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0"
      ]
    },
    "2398": {
      "op": "bytec 8 // \"averageEfficiency\"",
      "stack_out": [
        "new_state_value%3#0",
        "\"averageEfficiency\""
      ]
    },
    "2400": {
      "op": "swap",
      "stack_out": [
        "\"averageEfficiency\"",
        "new_state_value%3#0"
      ]
    },
    "2401": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2402": {
      "retsub": true,
      "op": "retsub"
    },
    "2403": {
      "subroutine": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.updateCompoundFee",
      "params": {
        "newFeeRate#0": "uint64"
      },
      "block": "updateCompoundFee",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2406": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2408": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2409": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "2411": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2412": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2413": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2414": {
      "op": "assert",
      "stack_out": []
    },
    "2415": {
      "op": "frame_dig -1",
      "defined_out": [
        "newFeeRate#0 (copy)"
      ],
      "stack_out": [
        "newFeeRate#0 (copy)"
      ]
    },
    "2417": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "newFeeRate#0 (copy)"
      ],
      "stack_out": [
        "newFeeRate#0 (copy)",
        "1000"
      ]
    },
    "2420": {
      "op": "<=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "2421": {
      "op": "assert",
      "stack_out": []
    },
    "2422": {
      "op": "bytec_3 // \"compoundFeeRate\"",
      "defined_out": [
        "\"compoundFeeRate\""
      ],
      "stack_out": [
        "\"compoundFeeRate\""
      ]
    },
    "2423": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"compoundFeeRate\"",
        "newFeeRate#0 (copy)"
      ]
    },
    "2425": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2426": {
      "retsub": true,
      "op": "retsub"
    },
    "2427": {
      "subroutine": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.updateFeeCollector",
      "params": {
        "newCollector#0": "bytes"
      },
      "block": "updateFeeCollector",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "2430": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2432": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2433": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "2435": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2436": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2437": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2438": {
      "op": "assert",
      "stack_out": []
    },
    "2439": {
      "op": "bytec 15 // \"feeCollector\"",
      "defined_out": [
        "\"feeCollector\""
      ],
      "stack_out": [
        "\"feeCollector\""
      ]
    },
    "2441": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"feeCollector\"",
        "newCollector#0 (copy)"
      ],
      "stack_out": [
        "\"feeCollector\"",
        "newCollector#0 (copy)"
      ]
    },
    "2443": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2444": {
      "retsub": true,
      "op": "retsub"
    },
    "2445": {
      "subroutine": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.pauseCompounds",
      "params": {},
      "block": "pauseCompounds",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2447": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2448": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "2450": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2451": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2452": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2453": {
      "op": "assert",
      "stack_out": []
    },
    "2454": {
      "op": "bytec_1 // \"compoundsActive\"",
      "defined_out": [
        "\"compoundsActive\""
      ],
      "stack_out": [
        "\"compoundsActive\""
      ]
    },
    "2455": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"compoundsActive\"",
        "0"
      ]
    },
    "2456": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2457": {
      "retsub": true,
      "op": "retsub"
    },
    "2458": {
      "subroutine": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.resumeCompounds",
      "params": {},
      "block": "resumeCompounds",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "2460": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "2461": {
      "op": "bytec 4 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "2463": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2464": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "2465": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "2466": {
      "op": "assert",
      "stack_out": []
    },
    "2467": {
      "op": "bytec_1 // \"compoundsActive\"",
      "defined_out": [
        "\"compoundsActive\""
      ],
      "stack_out": [
        "\"compoundsActive\""
      ]
    },
    "2468": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"compoundsActive\"",
        "1"
      ],
      "stack_out": [
        "\"compoundsActive\"",
        "1"
      ]
    },
    "2469": {
      "op": "app_global_put",
      "stack_out": []
    },
    "2470": {
      "retsub": true,
      "op": "retsub"
    },
    "2471": {
      "subroutine": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.isEligibleForCompound",
      "params": {
        "user#0": "bytes"
      },
      "block": "isEligibleForCompound",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2474": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lastCompoundKey#0"
      ]
    },
    "2475": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0"
      ]
    },
    "2477": {
      "op": "dupn 2",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0"
      ]
    },
    "2479": {
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "user#0 (copy)"
      ]
    },
    "2481": {
      "op": "bytec 6 // \"_enabled\"",
      "defined_out": [
        "\"_enabled\"",
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "user#0 (copy)",
        "\"_enabled\""
      ]
    },
    "2483": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0"
      ]
    },
    "2484": {
      "op": "dup",
      "defined_out": [
        "enabledKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "enabledKey#0"
      ]
    },
    "2485": {
      "op": "frame_dig -1",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "enabledKey#0",
        "user#0 (copy)"
      ]
    },
    "2487": {
      "op": "bytec 10 // \"_frequency\"",
      "defined_out": [
        "\"_frequency\"",
        "enabledKey#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "enabledKey#0",
        "user#0 (copy)",
        "\"_frequency\""
      ]
    },
    "2489": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "enabledKey#0",
        "frequencyKey#0"
      ]
    },
    "2490": {
      "op": "swap",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "enabledKey#0"
      ]
    },
    "2491": {
      "op": "frame_dig -1",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "enabledKey#0",
        "user#0 (copy)"
      ]
    },
    "2493": {
      "op": "bytec 11 // \"_threshold\"",
      "defined_out": [
        "\"_threshold\"",
        "enabledKey#0",
        "frequencyKey#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "enabledKey#0",
        "user#0 (copy)",
        "\"_threshold\""
      ]
    },
    "2495": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "enabledKey#0",
        "thresholdKey#0"
      ]
    },
    "2496": {
      "op": "swap",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "enabledKey#0"
      ]
    },
    "2497": {
      "op": "frame_dig -1",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "enabledKey#0",
        "user#0 (copy)"
      ]
    },
    "2499": {
      "op": "bytec 12 // \"_maxGasFee\"",
      "defined_out": [
        "\"_maxGasFee\"",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "enabledKey#0",
        "user#0 (copy)",
        "\"_maxGasFee\""
      ]
    },
    "2501": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "enabledKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "2502": {
      "op": "swap",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "enabledKey#0"
      ]
    },
    "2503": {
      "op": "box_len",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2504": {
      "op": "bury 1",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%0#0"
      ]
    },
    "2506": {
      "op": "bz isEligibleForCompound_if_body@2",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "2509": {
      "op": "frame_dig 4",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "enabledKey#0"
      ]
    },
    "2511": {
      "op": "box_get",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2512": {
      "op": "swap",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "2513": {
      "op": "btoi",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "2514": {
      "op": "swap",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "2515": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value_converted%0#0"
      ]
    },
    "2516": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "maybe_value_converted%0#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value_converted%0#0",
        "1"
      ]
    },
    "2517": {
      "op": "!=",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "thresholdKey#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "tmp%0#0"
      ]
    },
    "2518": {
      "op": "bz isEligibleForCompound_after_if_else@3",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "2521": {
      "block": "isEligibleForCompound_if_body@2",
      "stack_in": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "0"
      ]
    },
    "2522": {
      "op": "frame_bury 0"
    },
    "2524": {
      "retsub": true,
      "op": "retsub"
    },
    "2525": {
      "block": "isEligibleForCompound_after_if_else@3",
      "stack_in": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "frequencyKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "frequencyKey#0"
      ]
    },
    "2527": {
      "op": "box_get",
      "defined_out": [
        "frequencyKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2528": {
      "op": "swap",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "2529": {
      "op": "btoi",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%2#0",
        "frequency#0"
      ]
    },
    "2530": {
      "op": "frame_bury 1",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%2#0"
      ]
    },
    "2532": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "2533": {
      "op": "frame_dig 6",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "thresholdKey#0"
      ]
    },
    "2535": {
      "op": "box_get",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2536": {
      "op": "swap",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "2537": {
      "op": "btoi",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maybe_exists%3#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%3#0",
        "threshold#0"
      ]
    },
    "2538": {
      "op": "frame_bury 3",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maybe_exists%3#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%3#0"
      ]
    },
    "2540": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "2541": {
      "op": "frame_dig 7",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "2543": {
      "op": "box_get",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2544": {
      "op": "swap",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ]
    },
    "2545": {
      "op": "btoi",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "maybe_exists%4#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%4#0",
        "maxGasFee#0"
      ]
    },
    "2546": {
      "op": "frame_bury 2",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "maybe_exists%4#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%4#0"
      ]
    },
    "2548": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "2549": {
      "op": "frame_dig -1",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "threshold#0",
        "thresholdKey#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "user#0 (copy)"
      ]
    },
    "2551": {
      "op": "bytec 13 // \"_lastCompound\"",
      "defined_out": [
        "\"_lastCompound\"",
        "frequency#0",
        "frequencyKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "threshold#0",
        "thresholdKey#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "user#0 (copy)",
        "\"_lastCompound\""
      ]
    },
    "2553": {
      "op": "concat",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "lastCompoundKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "lastCompoundKey#0"
      ]
    },
    "2554": {
      "op": "dup",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "lastCompoundKey#0",
        "lastCompoundKey#0"
      ]
    },
    "2555": {
      "op": "frame_bury 0",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "lastCompoundKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "lastCompoundKey#0"
      ]
    },
    "2557": {
      "op": "box_len",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "lastCompoundKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2558": {
      "op": "bury 1",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%5#0"
      ]
    },
    "2560": {
      "op": "bz isEligibleForCompound_ternary_false@5",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "2563": {
      "op": "frame_dig 0",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "lastCompoundKey#0"
      ]
    },
    "2565": {
      "op": "box_get",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "lastCompoundKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2566": {
      "op": "swap",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ]
    },
    "2567": {
      "op": "btoi",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "lastCompoundKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "maybe_exists%6#0",
        "maybe_value_converted%4#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%6#0",
        "maybe_value_converted%4#0"
      ]
    },
    "2568": {
      "op": "swap",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "maybe_value_converted%4#0",
        "maybe_exists%6#0"
      ]
    },
    "2569": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0",
        "lastCompound#0",
        "lastCompoundKey#0",
        "maxGasFee#0",
        "maxGasFeeKey#0",
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "lastCompound#0"
      ]
    },
    "2570": {
      "block": "isEligibleForCompound_ternary_merge@6",
      "stack_in": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "lastCompound#0"
      ],
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "lastCompound#0",
        "tmp%1#0"
      ]
    },
    "2572": {
      "op": "swap",
      "defined_out": [
        "lastCompound#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "tmp%1#0",
        "lastCompound#0"
      ]
    },
    "2573": {
      "op": "frame_dig 1",
      "defined_out": [
        "frequency#0",
        "lastCompound#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "tmp%1#0",
        "lastCompound#0",
        "frequency#0"
      ]
    },
    "2575": {
      "op": "+",
      "defined_out": [
        "frequency#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "2576": {
      "op": "<",
      "defined_out": [
        "frequency#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "tmp%3#0"
      ]
    },
    "2577": {
      "op": "bz isEligibleForCompound_after_if_else@8",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "2580": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "frequency#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "0"
      ]
    },
    "2581": {
      "op": "frame_bury 0"
    },
    "2583": {
      "retsub": true,
      "op": "retsub"
    },
    "2584": {
      "block": "isEligibleForCompound_after_if_else@8",
      "stack_in": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "threshold#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "threshold#0"
      ]
    },
    "2586": {
      "op": "bz isEligibleForCompound_after_if_else@10",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "2589": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "threshold#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "0"
      ]
    },
    "2590": {
      "op": "frame_bury 0"
    },
    "2592": {
      "retsub": true,
      "op": "retsub"
    },
    "2593": {
      "block": "isEligibleForCompound_after_if_else@10",
      "stack_in": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ],
      "op": "intc_3 // 3000",
      "defined_out": [
        "3000"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "3000"
      ]
    },
    "2594": {
      "op": "frame_dig 2",
      "defined_out": [
        "3000",
        "maxGasFee#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "3000",
        "maxGasFee#0"
      ]
    },
    "2596": {
      "op": ">",
      "defined_out": [
        "maxGasFee#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "tmp%5#0"
      ]
    },
    "2597": {
      "op": "bz isEligibleForCompound_after_if_else@12",
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "2600": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "maxGasFee#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "0"
      ]
    },
    "2601": {
      "op": "frame_bury 0"
    },
    "2603": {
      "retsub": true,
      "op": "retsub"
    },
    "2604": {
      "block": "isEligibleForCompound_after_if_else@12",
      "stack_in": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "1"
      ]
    },
    "2605": {
      "op": "frame_bury 0"
    },
    "2607": {
      "retsub": true,
      "op": "retsub"
    },
    "2608": {
      "block": "isEligibleForCompound_ternary_false@5",
      "stack_in": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "lastCompound#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "lastCompound#0"
      ]
    },
    "2609": {
      "op": "b isEligibleForCompound_ternary_merge@6"
    },
    "2612": {
      "subroutine": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.getUserSettings",
      "params": {
        "user#0": "bytes"
      },
      "block": "getUserSettings",
      "stack_in": [],
      "op": "proto 1 5"
    },
    "2615": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "enabled#0"
      ]
    },
    "2617": {
      "op": "dupn 3",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0"
      ]
    },
    "2619": {
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "user#0 (copy)"
      ]
    },
    "2621": {
      "op": "bytec 6 // \"_enabled\"",
      "defined_out": [
        "\"_enabled\"",
        "user#0 (copy)"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "user#0 (copy)",
        "\"_enabled\""
      ]
    },
    "2623": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0"
      ]
    },
    "2624": {
      "op": "dup",
      "defined_out": [
        "enabledKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "enabledKey#0"
      ]
    },
    "2625": {
      "op": "frame_dig -1",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "enabledKey#0",
        "user#0 (copy)"
      ]
    },
    "2627": {
      "op": "bytec 10 // \"_frequency\"",
      "defined_out": [
        "\"_frequency\"",
        "enabledKey#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "enabledKey#0",
        "user#0 (copy)",
        "\"_frequency\""
      ]
    },
    "2629": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "enabledKey#0",
        "frequencyKey#0"
      ]
    },
    "2630": {
      "op": "swap",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "enabledKey#0"
      ]
    },
    "2631": {
      "op": "frame_dig -1",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "enabledKey#0",
        "user#0 (copy)"
      ]
    },
    "2633": {
      "op": "bytec 11 // \"_threshold\"",
      "defined_out": [
        "\"_threshold\"",
        "enabledKey#0",
        "frequencyKey#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "enabledKey#0",
        "user#0 (copy)",
        "\"_threshold\""
      ]
    },
    "2635": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "enabledKey#0",
        "thresholdKey#0"
      ]
    },
    "2636": {
      "op": "swap",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "enabledKey#0"
      ]
    },
    "2637": {
      "op": "frame_dig -1",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "enabledKey#0",
        "user#0 (copy)"
      ]
    },
    "2639": {
      "op": "bytec 12 // \"_maxGasFee\"",
      "defined_out": [
        "\"_maxGasFee\"",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "enabledKey#0",
        "user#0 (copy)",
        "\"_maxGasFee\""
      ]
    },
    "2641": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "enabledKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "2642": {
      "op": "swap",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "enabledKey#0"
      ]
    },
    "2643": {
      "op": "frame_dig -1",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "enabledKey#0",
        "user#0 (copy)"
      ]
    },
    "2645": {
      "op": "bytec 17 // \"_slippageTolerance\"",
      "defined_out": [
        "\"_slippageTolerance\"",
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "thresholdKey#0",
        "user#0 (copy)"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "enabledKey#0",
        "user#0 (copy)",
        "\"_slippageTolerance\""
      ]
    },
    "2647": {
      "op": "concat",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "enabledKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "2648": {
      "op": "swap",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "enabledKey#0"
      ]
    },
    "2649": {
      "op": "box_len",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2650": {
      "op": "bury 1",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_exists%0#0"
      ]
    },
    "2652": {
      "op": "bz getUserSettings_ternary_false@2",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "2655": {
      "op": "frame_dig 4",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "enabledKey#0"
      ]
    },
    "2657": {
      "op": "box_get",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2658": {
      "op": "swap",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "2659": {
      "op": "btoi",
      "defined_out": [
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "2660": {
      "op": "swap",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "2661": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "defined_out": [
        "enabled#0",
        "enabledKey#0",
        "frequencyKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "enabled#0"
      ]
    },
    "2662": {
      "op": "frame_bury 0",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "2664": {
      "block": "getUserSettings_ternary_merge@3",
      "stack_in": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "frequencyKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "frequencyKey#0"
      ]
    },
    "2666": {
      "op": "box_len",
      "defined_out": [
        "frequencyKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2667": {
      "op": "bury 1",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_exists%2#0"
      ]
    },
    "2669": {
      "op": "bz getUserSettings_ternary_false@5",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "2672": {
      "op": "frame_dig 5",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "frequencyKey#0"
      ]
    },
    "2674": {
      "op": "box_get",
      "defined_out": [
        "frequencyKey#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2675": {
      "op": "swap",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "2676": {
      "op": "btoi",
      "defined_out": [
        "frequencyKey#0",
        "maybe_exists%3#0",
        "maybe_value_converted%1#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_exists%3#0",
        "maybe_value_converted%1#0"
      ]
    },
    "2677": {
      "op": "swap",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value_converted%1#0",
        "maybe_exists%3#0"
      ]
    },
    "2678": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "frequency#0"
      ]
    },
    "2679": {
      "op": "frame_bury 1",
      "defined_out": [
        "frequency#0",
        "frequencyKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "2681": {
      "block": "getUserSettings_ternary_merge@6",
      "stack_in": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ]
    },
    "2683": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2684": {
      "op": "bury 1",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_exists%4#0"
      ]
    },
    "2686": {
      "op": "bz getUserSettings_ternary_false@8",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "2689": {
      "op": "frame_dig 6",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "thresholdKey#0"
      ]
    },
    "2691": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2692": {
      "op": "swap",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ]
    },
    "2693": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value_converted%2#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_exists%5#0",
        "maybe_value_converted%2#0"
      ]
    },
    "2694": {
      "op": "swap",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value_converted%2#0",
        "maybe_exists%5#0"
      ]
    },
    "2695": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "defined_out": [
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "threshold#0"
      ]
    },
    "2696": {
      "op": "frame_bury 3",
      "defined_out": [
        "threshold#0",
        "thresholdKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "2698": {
      "block": "getUserSettings_ternary_merge@9",
      "stack_in": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "maxGasFeeKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "2700": {
      "op": "box_len",
      "defined_out": [
        "maxGasFeeKey#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2701": {
      "op": "bury 1",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_exists%6#0"
      ]
    },
    "2703": {
      "op": "bz getUserSettings_ternary_false@11",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "2706": {
      "op": "frame_dig 7",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maxGasFeeKey#0"
      ]
    },
    "2708": {
      "op": "box_get",
      "defined_out": [
        "maxGasFeeKey#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "2709": {
      "op": "swap",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ]
    },
    "2710": {
      "op": "btoi",
      "defined_out": [
        "maxGasFeeKey#0",
        "maybe_exists%7#0",
        "maybe_value_converted%3#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_exists%7#0",
        "maybe_value_converted%3#0"
      ]
    },
    "2711": {
      "op": "swap",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value_converted%3#0",
        "maybe_exists%7#0"
      ]
    },
    "2712": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "defined_out": [
        "maxGasFee#0",
        "maxGasFeeKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maxGasFee#0"
      ]
    },
    "2713": {
      "op": "frame_bury 2",
      "defined_out": [
        "maxGasFee#0",
        "maxGasFeeKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "2715": {
      "block": "getUserSettings_ternary_merge@12",
      "stack_in": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ],
      "op": "frame_dig 8",
      "defined_out": [
        "slippageToleranceKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "2717": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "slippageToleranceKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "2718": {
      "op": "bury 1",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_exists%8#0"
      ]
    },
    "2720": {
      "op": "bz getUserSettings_ternary_false@14",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "2723": {
      "op": "frame_dig 8",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "2725": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "slippageToleranceKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "2726": {
      "op": "swap",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ]
    },
    "2727": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value_converted%4#0",
        "slippageToleranceKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_exists%9#0",
        "maybe_value_converted%4#0"
      ]
    },
    "2728": {
      "op": "swap",
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maybe_value_converted%4#0",
        "maybe_exists%9#0"
      ]
    },
    "2729": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "defined_out": [
        "slippageTolerance#0",
        "slippageToleranceKey#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "slippageTolerance#0"
      ]
    },
    "2730": {
      "block": "getUserSettings_ternary_merge@15",
      "stack_in": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "slippageTolerance#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "enabled#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "slippageTolerance#0",
        "enabled#0"
      ]
    },
    "2732": {
      "op": "frame_dig 1",
      "defined_out": [
        "enabled#0",
        "frequency#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "slippageTolerance#0",
        "enabled#0",
        "frequency#0"
      ]
    },
    "2734": {
      "op": "frame_dig 3",
      "defined_out": [
        "enabled#0",
        "frequency#0",
        "threshold#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "slippageTolerance#0",
        "enabled#0",
        "frequency#0",
        "threshold#0"
      ]
    },
    "2736": {
      "op": "frame_dig 2",
      "defined_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "slippageTolerance#0",
        "enabled#0",
        "frequency#0",
        "threshold#0",
        "maxGasFee#0"
      ]
    },
    "2738": {
      "op": "uncover 4",
      "defined_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "slippageTolerance#0",
        "threshold#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "enabled#0",
        "frequency#0",
        "threshold#0",
        "maxGasFee#0",
        "slippageTolerance#0"
      ]
    },
    "2740": {
      "op": "frame_bury 4"
    },
    "2742": {
      "op": "frame_bury 3"
    },
    "2744": {
      "op": "frame_bury 2"
    },
    "2746": {
      "op": "frame_bury 1"
    },
    "2748": {
      "op": "frame_bury 0"
    },
    "2750": {
      "retsub": true,
      "op": "retsub"
    },
    "2751": {
      "block": "getUserSettings_ternary_false@14",
      "stack_in": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "slippageTolerance#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "slippageTolerance#0"
      ]
    },
    "2752": {
      "op": "b getUserSettings_ternary_merge@15"
    },
    "2755": {
      "block": "getUserSettings_ternary_false@11",
      "stack_in": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "maxGasFee#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "maxGasFee#0"
      ]
    },
    "2756": {
      "op": "frame_bury 2",
      "defined_out": [
        "maxGasFee#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "2758": {
      "op": "b getUserSettings_ternary_merge@12"
    },
    "2761": {
      "block": "getUserSettings_ternary_false@8",
      "stack_in": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "threshold#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "threshold#0"
      ]
    },
    "2762": {
      "op": "frame_bury 3",
      "defined_out": [
        "threshold#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "2764": {
      "op": "b getUserSettings_ternary_merge@9"
    },
    "2767": {
      "block": "getUserSettings_ternary_false@5",
      "stack_in": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "frequency#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "frequency#0"
      ]
    },
    "2768": {
      "op": "frame_bury 1",
      "defined_out": [
        "frequency#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "2770": {
      "op": "b getUserSettings_ternary_merge@6"
    },
    "2773": {
      "block": "getUserSettings_ternary_false@2",
      "stack_in": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "enabled#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0",
        "enabled#0"
      ]
    },
    "2774": {
      "op": "frame_bury 0",
      "defined_out": [
        "enabled#0"
      ],
      "stack_out": [
        "enabled#0",
        "frequency#0",
        "maxGasFee#0",
        "threshold#0",
        "enabledKey#0",
        "frequencyKey#0",
        "thresholdKey#0",
        "maxGasFeeKey#0",
        "slippageToleranceKey#0"
      ]
    },
    "2776": {
      "op": "b getUserSettings_ternary_merge@3"
    },
    "2779": {
      "subroutine": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.getCompoundStats",
      "params": {},
      "block": "getCompoundStats",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2780": {
      "op": "bytec_2 // \"totalUsersEnabled\"",
      "defined_out": [
        "\"totalUsersEnabled\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalUsersEnabled\""
      ]
    },
    "2781": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2782": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2783": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "2784": {
      "op": "bytec 5 // \"totalCompounds\"",
      "defined_out": [
        "\"totalCompounds\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"totalCompounds\""
      ]
    },
    "2786": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2787": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "2788": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "2789": {
      "op": "bytec 7 // \"totalRewardsCompounded\"",
      "defined_out": [
        "\"totalRewardsCompounded\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"totalRewardsCompounded\""
      ]
    },
    "2791": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2792": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "2793": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "2794": {
      "op": "bytec 8 // \"averageEfficiency\"",
      "defined_out": [
        "\"averageEfficiency\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"averageEfficiency\""
      ]
    },
    "2796": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2797": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "2798": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "2799": {
      "op": "bytec 9 // \"bestEfficiency\"",
      "defined_out": [
        "\"bestEfficiency\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"bestEfficiency\""
      ]
    },
    "2801": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2802": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "2803": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "2804": {
      "op": "bytec_3 // \"compoundFeeRate\"",
      "defined_out": [
        "\"compoundFeeRate\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0",
        "\"compoundFeeRate\""
      ]
    },
    "2805": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2806": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "2807": {
      "retsub": true,
      "op": "retsub"
    },
    "2808": {
      "subroutine": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.calculateOptimalCompoundTime",
      "params": {
        "user#0": "bytes"
      },
      "block": "calculateOptimalCompoundTime",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2811": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lastCompoundKey#0"
      ]
    },
    "2812": {
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "user#0 (copy)"
      ]
    },
    "2814": {
      "callsub": "smart_contracts/vault/auto_compounder.algo.ts::AutoCompounder.getUserSettings",
      "op": "callsub getUserSettings",
      "defined_out": [
        "settings.0#0",
        "settings.1#0",
        "settings.2#0",
        "settings.3#0",
        "settings.4#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "settings.0#0",
        "settings.1#0",
        "settings.2#0",
        "settings.3#0",
        "settings.4#0"
      ]
    },
    "2817": {
      "op": "popn 3",
      "stack_out": [
        "lastCompoundKey#0",
        "settings.0#0",
        "settings.1#0"
      ]
    },
    "2819": {
      "op": "swap",
      "defined_out": [
        "settings.0#0",
        "settings.1#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "settings.0#0"
      ]
    },
    "2820": {
      "op": "intc_1 // 1",
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "settings.0#0",
        "1"
      ]
    },
    "2821": {
      "op": "!=",
      "defined_out": [
        "settings.1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "tmp%0#0"
      ]
    },
    "2822": {
      "op": "bz calculateOptimalCompoundTime_after_if_else@2",
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0"
      ]
    },
    "2825": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "0"
      ]
    },
    "2826": {
      "op": "frame_bury 0"
    },
    "2828": {
      "retsub": true,
      "op": "retsub"
    },
    "2829": {
      "block": "calculateOptimalCompoundTime_after_if_else@2",
      "stack_in": [
        "lastCompoundKey#0",
        "settings.1#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "user#0 (copy)"
      ]
    },
    "2831": {
      "op": "bytec 13 // \"_lastCompound\"",
      "defined_out": [
        "\"_lastCompound\"",
        "user#0 (copy)"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "user#0 (copy)",
        "\"_lastCompound\""
      ]
    },
    "2833": {
      "op": "concat",
      "defined_out": [
        "lastCompoundKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "lastCompoundKey#0"
      ]
    },
    "2834": {
      "op": "dup",
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "lastCompoundKey#0",
        "lastCompoundKey#0"
      ]
    },
    "2835": {
      "op": "frame_bury 0",
      "defined_out": [
        "lastCompoundKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "lastCompoundKey#0"
      ]
    },
    "2837": {
      "op": "box_len",
      "defined_out": [
        "lastCompoundKey#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2838": {
      "op": "bury 1",
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "maybe_exists%0#0"
      ]
    },
    "2840": {
      "op": "bz calculateOptimalCompoundTime_ternary_false@4",
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0"
      ]
    },
    "2843": {
      "op": "frame_dig 0",
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "lastCompoundKey#0"
      ]
    },
    "2845": {
      "op": "box_get",
      "defined_out": [
        "lastCompoundKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2846": {
      "op": "swap",
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "2847": {
      "op": "btoi",
      "defined_out": [
        "lastCompoundKey#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "2848": {
      "op": "swap",
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "2849": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "defined_out": [
        "lastCompound#0",
        "lastCompoundKey#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "lastCompound#0"
      ]
    },
    "2850": {
      "block": "calculateOptimalCompoundTime_ternary_merge@5",
      "stack_in": [
        "lastCompoundKey#0",
        "settings.1#0",
        "lastCompound#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "lastCompound#0",
        "settings.1#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "lastCompound#0",
        "settings.1#0"
      ]
    },
    "2852": {
      "op": "+",
      "defined_out": [
        "settings.1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "tmp%1#0"
      ]
    },
    "2853": {
      "op": "frame_bury 0"
    },
    "2855": {
      "retsub": true,
      "op": "retsub"
    },
    "2856": {
      "block": "calculateOptimalCompoundTime_ternary_false@4",
      "stack_in": [
        "lastCompoundKey#0",
        "settings.1#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "lastCompound#0"
      ],
      "stack_out": [
        "lastCompoundKey#0",
        "settings.1#0",
        "lastCompound#0"
      ]
    },
    "2857": {
      "op": "b calculateOptimalCompoundTime_ternary_merge@5"
    }
  }
}