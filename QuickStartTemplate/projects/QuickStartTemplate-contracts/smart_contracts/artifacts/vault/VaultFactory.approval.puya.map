{
  "version": 3,
  "sources": [
    "/Users/arhansubasi/Algorand-dApp-Quick-Start-Template-TypeScript/QuickStartTemplate/projects/QuickStartTemplate-contracts/smart_contracts/vault/vault_factory.algo.ts"
  ],
  "mappingsuOG;;AAAA;AAAA;AAAA;;AAAA;AAvOH;;;AAAA;AAuOG;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AA/MH;;;AAAA;AA+MG;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAvMH;;;AAAA;;;AAuMG;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AA1KH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA0KG;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAlKH;;;AAAA;AAkKG;;;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AA3IH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA2IG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAhIH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAgIG;;;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AA9GH;;;AAAA;AAAA;;;AAAA;AA8GG;;;AAAA;;AA/DA;;AAAA;AAAA;AAAA;;AAAA;AA/CH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA+CG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AAxBH;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAwBG;;;AAAA;;AAxBH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAwBE;;;AAVA;AAAA;;AAAA;AAAA;AAkBS;AAAP;AA9BF;;AA+ByB;AAAvB;AA9BF;AA+BwB;AAAtB;AA9BF;AA+BgC;;AAA9B;AA5BF;;AA6BE;;AAAA;AA5BF;;AA6BE;;AAAA;AA5BF;;;;;;;;;;;;;;AA6BE;;AAAA;AA1BF;;AA2BE;;AAAA;AA1BF;;AA2BE;;AAAA;AA1BF;;AA2B6B;AAA3B;AApBF;;AAqB8B;AAA5B;AAzBF;;AA0B6B;AAA3B;AAzBF;;AA0B+B;AAA7B;;AAGF;;;AAjCA;AAAA;;AAAA;AAAA;AA4CE;AArCF;AAAA;;AAAA;AAAA;AAsCS;AAAP;AA9CF;AAAA;;AAAA;AAAA;AAgDS;;AAAA;AAAP;AAC4C;;AAAtC;AACiC;AAAA;;AAAb;;;AAAmC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAnD/D;AAAA;;AAAA;AAAA;AAoDS;;AAAA;AAAP;AA9DF;AAAA;;AAAA;AAAA;AA+DgD;AAAvB;AA/DzB;;AAgEE;;AAAA;AAmB4B;;AACE;;AA3HzB;;AAAA;AALA;AAmIkD;;AAnIlD;AAmIL;;AAAA;AAAA;AAnIK;AAoIiD;;AApIjD;AAoIL;AAAA;;AAAA;;AAAA;AApIK;AAqIiD;;AArIjD;AAqIL;AAAA;;AAAA;;AAAA;AArIK;AAsIiD;;AAtIjD;AAsIL;AAAA;;AAAA;;AAAA;AAtIK;AAuIiD;;AAvIjD;AAuIL;AAAA;;AAAA;;AAAA;AAvIK;AAwIiD;;AAxIjD;AAwI6E;;AAAlF;;AAAA;;AAAA;AAxIK;AAyIkD;;AAzIlD;AAyImF;;AAAxF;AAAA;AAzIK;AA0IkD;;AA1IlD;AAS0B;AAiI/B;AAAA;AAAA;;AAAA;AA1IK;;AA2IkD;AA3IlD;AA2IL;;AAAA;AA3IK;;AA4IkD;;AA5IlD;AA4IL;;AAAA;AAAA;AA5IK;;AA6IkD;;AA7IlD;AA6IL;;AAAA;AA7IK;;AA8IkD;;AA9IlD;AA8IL;AAAA;AA9IK;AA+IkD;;AA/IlD;AA+IL;;AAAA;AAAA;AA/IK;AAgJkD;;AAhJlD;AAgJL;;AAAA;AAAA;AAhJK;AAiJkD;;AAjJlD;AAiJL;;AAAA;AAAA;AACuD;;AAlJlD;AAkJL;;AAAA;AAAA;AACqB;AAAY;AAAZ;AAArB;AAAA;;AAAA;AAAA;AAtGF;AAAA;AAAA;AAAA;AAuGwB;;AAAA;AAvGxB;AAuGE;AAAA;AACA;AAAA;AA5CqE;;;;AA+CvE;;;AAnJO;;AAAA;AAAA;AAsJiD;;AA3JjD;AA4J6C;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAClD;;AAAA;AAAA;;AAAA;AAAA;AAEI;;;AAAuC;;AArJZ;AAqJY;AAAA;;;AAAoC;;AApJ5C;;AAoJ4C;AAApC;;;AA/JtC;;AAgKmE;AAhKnE;AAgKuF;AAAA;AAAA;AAAA;AAAA;AAnH9F;AAAA;AAAA;AAAA;AAoH0B;AAAA;AApH1B;AAoHI;AAAA;AAGE;;AAAA;;;AAAA;;AAAA;;;AApKC;;AAqKmE;AArKnE;AAqKuF;AAAA;AAAA;AAAA;AAAA;AAxH9F;AAAA;AAAA;AAAA;AAyH0B;AAzH1B;AAyHI;AAAA;;AAIJ;;;AArKO;;AAAA;AALA;AA6KoE;AA7KpE;AA6KwF;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7F;;AAAA;AAAA;;AAAA;AAAA;AA9KK;;AA+KkD;;AA/KlD;AA+KL;;AAAA;AAAA;AA/KK;;AAgLkD;;AAhLlD;AAgLL;;AAAA;AAAA;AAhLK;AAiLkD;;AAjLlD;AAiLL;;AAAA;AAAA;AApIF;AAAA;AAAA;AAAA;AAqIwB;AAAA;AAAA;;AAAA;AArIxB;AAqIE;AAAA;;AAGF;;;AAQa;;AA/Ib;AAAA;AAAA;AAAA;AA+IS;AAAP;AAlIF;AAAA;;AAAA;AAAA;AAmIwD;AAA3B;AAArB;AAnIR;;AAoIE;;AAAA;AA1LK;AAAA;AALA;AAiMqD;;AAjMrD;AAiML;AAAA;;AAAA;;AAAA;AAjMK;AAkMqD;;AAlMrD;AAkML;AAAA;;AAAA;;AAAA;AAlMK;AAmMqD;;AAnMrD;AAmML;AAAA;;AAAA;;AAAA;AAnMK;AAoMqD;;AApMrD;AAoML;AAAA;;AAAA;;AAAA;AAC0D;;AArMrD;AAqML;AAAA;;AAAA;;AAAA;AACmB;AAAf;AAAJ;;;AA1IF;;AA2II;;AAAA;AAEF;;AAAA;AAAA;AAGF;;;AAEa;;AAhKb;AAAA;AAAA;AAAA;AAgKS;AAAP;AAzMK;;AAAA;AA2M4D;;AAhN5D;AAgNyE;AAAA;;AAA9E;AApJF;;AAqJE;;AAAA;;AAGF;;;AAOa;;AA7Kb;AAAA;AAAA;AAAA;AA6KS;AAAP;AA1KF;;AA4KE;;AAAA;AA3KF;;AA4KE;;AAAA;AAxKF;;AAyKE;;AAAA;AAxKF;;AAyKE;;AAAA;;AAKW;;AAvLb;AAAA;AAAA;AAAA;AAuLS;AAAP;AAtKF;;AAwK8B;AAA5B;;AAKW;;AA9Lb;AAAA;AAAA;AAAA;AA8LS;AAAP;AA7KF;;AA+K8B;AAA5B;;AAGF;;;AAEa;;AArMb;AAAA;AAAA;AAAA;AAqMS;AAAP;AAnLF;;;;;;;;;;;;;;;;;;;;AAqLE;;AAAA;;AAIF;;;AApPO;;AAAA;AALA;AA8PoD;;AA9PpD;AA8PoE;AAAA;AAAA;AAAA;AAAA;AA9PpE;;AA+PmD;;AA/PnD;AA+P2E;AAAA;AA/P3E;;AAgQmD;;AAhQnD;AAgQ6E;AAAA;AAhQ7E;;AAiQmD;;AAjQnD;AAiQ0E;AAAA;AAjQ1E;;AAkQmD;;AAlQnD;AAkQ2E;AAAA;AAlQ3E;;AAmQmD;;AAnQnD;AAmQmE;AAAA;AAnQnE;;AAoQoD;;AApQpD;AAoQsE;AAAA;AAAA;AAAA;AAAA;AApQtE;;AAqQoD;;AArQpD;AAqQmE;AAAA;AAAA;AAAA;AAAA;AArQnE;;AAsQoD;AAtQpD;AAsQwE;AAAA;AAAA;AAAA;AAAA;AAtQxE;;AAuQoD;;AAvQpD;AAuQyE;AAAA;AAAA;AAAA;AAAA;AAvQzE;;AAwQoD;;AAxQpD;AAwQ6E;AAAA;AAAA;AAAA;AAAA;AAxQ7E;;AAyQoD;;AAzQpD;AAyQgE;AAAA;AAAA;AAAA;AAAA;AAzQhE;;AA0QoD;;AA1QpD;AA0QyE;AAAA;AAAA;AAAA;AAAA;AA1QzE;;AA2QoD;;AA3QpD;AA2Q4E;AAAA;AAAA;AAAA;AAAA;AA3Q5E;;AA4QoD;;AA5QpD;AA4QyE;AAAA;AAAA;AAAA;AAAA;AA5QzE;;AA6QoD;;AA7QpD;AA6QiF;AAAA;AAAA;AAAA;AAAA;AAjBtF;;AAAA;;AAAA;AAqBF;;;AA5QO;;AAAA;AALA;AAqRuD;;AArRvD;AAqRoE;AAAA;AArRpE;;AAsRuD;;AAtRvD;AAsRuF;AAAA;AAtRvF;;AAuRuD;;AAvRvD;AAuRyF;AAAA;AAvRzF;;AAwRuD;;AAxRvD;AAwRsF;AAAA;AAxRtF;;AAyRuD;;AAzRvD;AAyRiF;AAAA;AALtF",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"totalTVL\" \"factoryOwner\" \"_totalStaked\" 0x151f7c75 \"emergencyPause\" \"factoryActive\" \"poolCount\" \"maxPoolsPerUser\" \"minimumInitialStake\" \"templateCount\" \"defaultTemplate\" \"_status\" \"_totalRewards\" \"_participantCount\" \"_apy\" \"_name\" \"poolCreationFee\" \"factoryFeeRate\" \"_assetId\" \"_stakingContract\" \"_rewardDistributor\" \"_autoCompounder\" \"_governanceVault\" \"_creator\" \"_createdAt\" \"_minimumStake\" \"_maxStakePerUser\" \"_lockupPeriod\" \"_earlyWithdrawPenalty\" \"_stakingContractTemplate\" \"_rewardDistributorTemplate\" \"_autoCompounderTemplate\" \"_defaultParameters\""
    },
    "494": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "496": {
      "op": "bz main_bare_routing@17",
      "stack_out": []
    },
    "499": {
      "op": "pushbytess 0xa2c81b0d 0x8cd6c250 0xc199de0d 0x246171f6 0x863cc7e1 0x24348827 0xa84c81af 0x5432cca6 0x13e3ccd8 0x06633e4a 0x9b7d94f5 0x8ed1c0ed // method \"initialize(uint64,uint64,byte[],uint64,uint64)void\", method \"createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64\", method \"updatePoolStatus(uint64,uint64)void\", method \"updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void\", method \"addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64\", method \"setDefaultTemplate(uint64)void\", method \"updateFactorySettings(uint64,uint64,uint64,uint64)void\", method \"emergencyPauseFactory()void\", method \"resumeFactory()void\", method \"setGovernanceContract(byte[])void\", method \"getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)\", method \"getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])\"",
      "defined_out": [
        "Method(addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64)",
        "Method(createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(emergencyPauseFactory()void)",
        "Method(getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[]))",
        "Method(initialize(uint64,uint64,byte[],uint64,uint64)void)",
        "Method(resumeFactory()void)",
        "Method(setDefaultTemplate(uint64)void)",
        "Method(setGovernanceContract(byte[])void)",
        "Method(updateFactorySettings(uint64,uint64,uint64,uint64)void)",
        "Method(updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void)",
        "Method(updatePoolStatus(uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(initialize(uint64,uint64,byte[],uint64,uint64)void)",
        "Method(createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(updatePoolStatus(uint64,uint64)void)",
        "Method(updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void)",
        "Method(addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64)",
        "Method(setDefaultTemplate(uint64)void)",
        "Method(updateFactorySettings(uint64,uint64,uint64,uint64)void)",
        "Method(emergencyPauseFactory()void)",
        "Method(resumeFactory()void)",
        "Method(setGovernanceContract(byte[])void)",
        "Method(getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[]))"
      ]
    },
    "561": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64)",
        "Method(createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(emergencyPauseFactory()void)",
        "Method(getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[]))",
        "Method(initialize(uint64,uint64,byte[],uint64,uint64)void)",
        "Method(resumeFactory()void)",
        "Method(setDefaultTemplate(uint64)void)",
        "Method(setGovernanceContract(byte[])void)",
        "Method(updateFactorySettings(uint64,uint64,uint64,uint64)void)",
        "Method(updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void)",
        "Method(updatePoolStatus(uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(initialize(uint64,uint64,byte[],uint64,uint64)void)",
        "Method(createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64)",
        "Method(updatePoolStatus(uint64,uint64)void)",
        "Method(updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void)",
        "Method(addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64)",
        "Method(setDefaultTemplate(uint64)void)",
        "Method(updateFactorySettings(uint64,uint64,uint64,uint64)void)",
        "Method(emergencyPauseFactory()void)",
        "Method(resumeFactory()void)",
        "Method(setGovernanceContract(byte[])void)",
        "Method(getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))",
        "Method(getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[]))",
        "tmp%2#0"
      ]
    },
    "564": {
      "op": "match main_initialize_route@3 main_createPool_route@4 main_updatePoolStatus_route@5 main_updatePoolMetrics_route@6 main_addPoolTemplate_route@7 main_setDefaultTemplate_route@8 main_updateFactorySettings_route@9 main_emergencyPauseFactory_route@10 main_resumeFactory_route@11 main_setGovernanceContract_route@12 main_getPoolInfo_route@13 main_getTemplate_route@14",
      "stack_out": []
    },
    "590": {
      "block": "main_after_if_else@21",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "591": {
      "op": "return",
      "stack_out": []
    },
    "592": {
      "block": "main_getTemplate_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "594": {
      "op": "!",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "595": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "596": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "598": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "599": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%25#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%25#0"
      ]
    },
    "602": {
      "op": "btoi",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "603": {
      "callsub": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.getTemplate",
      "op": "callsub getTemplate",
      "defined_out": [
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0"
      ],
      "stack_out": [
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0"
      ]
    },
    "606": {
      "op": "dig 4",
      "defined_out": [
        "elements_to_encode%17#0",
        "elements_to_encode%17#0 (copy)",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0"
      ],
      "stack_out": [
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "elements_to_encode%17#0 (copy)"
      ]
    },
    "608": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "length%5#0"
      ],
      "stack_out": [
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "length%5#0"
      ]
    },
    "609": {
      "op": "itob",
      "defined_out": [
        "as_bytes%10#0",
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0"
      ],
      "stack_out": [
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "as_bytes%10#0"
      ]
    },
    "610": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "length_uint16%5#0"
      ],
      "stack_out": [
        "elements_to_encode%17#0",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "length_uint16%5#0"
      ]
    },
    "613": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "length_uint16%5#0",
        "elements_to_encode%17#0"
      ]
    },
    "615": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0"
      ]
    },
    "616": {
      "op": "dig 4",
      "defined_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%18#0 (copy)",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "elements_to_encode%18#0 (copy)"
      ]
    },
    "618": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "length%6#0"
      ],
      "stack_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "length%6#0"
      ]
    },
    "619": {
      "op": "itob",
      "defined_out": [
        "as_bytes%11#0",
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0"
      ],
      "stack_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "as_bytes%11#0"
      ]
    },
    "620": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "length_uint16%6#0"
      ],
      "stack_out": [
        "elements_to_encode%18#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "length_uint16%6#0"
      ]
    },
    "623": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "length_uint16%6#0",
        "elements_to_encode%18#0"
      ]
    },
    "625": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0"
      ],
      "stack_out": [
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0"
      ]
    },
    "626": {
      "op": "dig 4",
      "defined_out": [
        "elements_to_encode%19#0",
        "elements_to_encode%19#0 (copy)",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0"
      ],
      "stack_out": [
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "elements_to_encode%19#0 (copy)"
      ]
    },
    "628": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "length%7#0"
      ],
      "stack_out": [
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "length%7#0"
      ]
    },
    "629": {
      "op": "itob",
      "defined_out": [
        "as_bytes%12#0",
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0"
      ],
      "stack_out": [
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "as_bytes%12#0"
      ]
    },
    "630": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "length_uint16%7#0"
      ],
      "stack_out": [
        "elements_to_encode%19#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "length_uint16%7#0"
      ]
    },
    "633": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "length_uint16%7#0",
        "elements_to_encode%19#0"
      ]
    },
    "635": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0"
      ]
    },
    "636": {
      "op": "dig 4",
      "defined_out": [
        "elements_to_encode%20#0",
        "elements_to_encode%20#0 (copy)",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "elements_to_encode%20#0 (copy)"
      ]
    },
    "638": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "length%8#0"
      ],
      "stack_out": [
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "length%8#0"
      ]
    },
    "639": {
      "op": "itob",
      "defined_out": [
        "as_bytes%13#0",
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0"
      ],
      "stack_out": [
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "as_bytes%13#0"
      ]
    },
    "640": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "length_uint16%8#0"
      ],
      "stack_out": [
        "elements_to_encode%20#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "length_uint16%8#0"
      ]
    },
    "643": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "length_uint16%8#0",
        "elements_to_encode%20#0"
      ]
    },
    "645": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0"
      ],
      "stack_out": [
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0"
      ]
    },
    "646": {
      "op": "dig 4",
      "defined_out": [
        "elements_to_encode%21#0",
        "elements_to_encode%21#0 (copy)",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0"
      ],
      "stack_out": [
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "elements_to_encode%21#0 (copy)"
      ]
    },
    "648": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "length%9#0"
      ],
      "stack_out": [
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "length%9#0"
      ]
    },
    "649": {
      "op": "itob",
      "defined_out": [
        "as_bytes%14#0",
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0"
      ],
      "stack_out": [
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "as_bytes%14#0"
      ]
    },
    "650": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "length_uint16%9#0"
      ],
      "stack_out": [
        "elements_to_encode%21#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "length_uint16%9#0"
      ]
    },
    "653": {
      "op": "uncover 5",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "length_uint16%9#0",
        "elements_to_encode%21#0"
      ]
    },
    "655": {
      "op": "concat",
      "defined_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ]
    },
    "656": {
      "op": "dig 4",
      "defined_out": [
        "encoded_value%5#0",
        "encoded_value%5#0 (copy)",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_value%5#0 (copy)"
      ]
    },
    "658": {
      "op": "len",
      "defined_out": [
        "data_length%5#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "data_length%5#0"
      ]
    },
    "659": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "data_length%5#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "data_length%5#0",
        "10"
      ]
    },
    "661": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%7#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%7#0"
      ]
    },
    "662": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%7#0",
        "current_tail_offset%7#0 (copy)",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%7#0",
        "current_tail_offset%7#0 (copy)"
      ]
    },
    "663": {
      "op": "itob",
      "defined_out": [
        "as_bytes%16#0",
        "current_tail_offset%7#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%7#0",
        "as_bytes%16#0"
      ]
    },
    "664": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%7#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "offset_as_uint16%6#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%7#0",
        "offset_as_uint16%6#0"
      ]
    },
    "667": {
      "op": "pushbytes 0x000a",
      "defined_out": [
        "0x000a",
        "current_tail_offset%7#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "offset_as_uint16%6#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%7#0",
        "offset_as_uint16%6#0",
        "0x000a"
      ]
    },
    "671": {
      "op": "swap",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%7#0",
        "0x000a",
        "offset_as_uint16%6#0"
      ]
    },
    "672": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%25#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%25#0"
      ]
    },
    "673": {
      "op": "dig 5",
      "defined_out": [
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%25#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%6#0 (copy)",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%25#0",
        "encoded_value%6#0 (copy)"
      ]
    },
    "675": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%7#0",
        "data_length%6#0",
        "encoded_tuple_buffer%25#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%7#0",
        "encoded_tuple_buffer%25#0",
        "data_length%6#0"
      ]
    },
    "676": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%25#0",
        "data_length%6#0",
        "current_tail_offset%7#0"
      ]
    },
    "678": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%8#0",
        "encoded_tuple_buffer%25#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%25#0",
        "current_tail_offset%8#0"
      ]
    },
    "679": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%8#0",
        "current_tail_offset%8#0 (copy)",
        "encoded_tuple_buffer%25#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%25#0",
        "current_tail_offset%8#0",
        "current_tail_offset%8#0 (copy)"
      ]
    },
    "680": {
      "op": "itob",
      "defined_out": [
        "as_bytes%17#0",
        "current_tail_offset%8#0",
        "encoded_tuple_buffer%25#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%25#0",
        "current_tail_offset%8#0",
        "as_bytes%17#0"
      ]
    },
    "681": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%8#0",
        "encoded_tuple_buffer%25#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "offset_as_uint16%7#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%25#0",
        "current_tail_offset%8#0",
        "offset_as_uint16%7#0"
      ]
    },
    "684": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%8#0",
        "offset_as_uint16%7#0",
        "encoded_tuple_buffer%25#0"
      ]
    },
    "686": {
      "op": "swap",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%8#0",
        "encoded_tuple_buffer%25#0",
        "offset_as_uint16%7#0"
      ]
    },
    "687": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%8#0",
        "encoded_tuple_buffer%26#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%8#0",
        "encoded_tuple_buffer%26#0"
      ]
    },
    "688": {
      "op": "dig 4",
      "defined_out": [
        "current_tail_offset%8#0",
        "encoded_tuple_buffer%26#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%7#0 (copy)",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%8#0",
        "encoded_tuple_buffer%26#0",
        "encoded_value%7#0 (copy)"
      ]
    },
    "690": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%8#0",
        "data_length%7#0",
        "encoded_tuple_buffer%26#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%8#0",
        "encoded_tuple_buffer%26#0",
        "data_length%7#0"
      ]
    },
    "691": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%26#0",
        "data_length%7#0",
        "current_tail_offset%8#0"
      ]
    },
    "693": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%9#0",
        "encoded_tuple_buffer%26#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%26#0",
        "current_tail_offset%9#0"
      ]
    },
    "694": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%9#0",
        "current_tail_offset%9#0 (copy)",
        "encoded_tuple_buffer%26#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%26#0",
        "current_tail_offset%9#0",
        "current_tail_offset%9#0 (copy)"
      ]
    },
    "695": {
      "op": "itob",
      "defined_out": [
        "as_bytes%18#0",
        "current_tail_offset%9#0",
        "encoded_tuple_buffer%26#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%26#0",
        "current_tail_offset%9#0",
        "as_bytes%18#0"
      ]
    },
    "696": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%9#0",
        "encoded_tuple_buffer%26#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "offset_as_uint16%8#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%26#0",
        "current_tail_offset%9#0",
        "offset_as_uint16%8#0"
      ]
    },
    "699": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%9#0",
        "offset_as_uint16%8#0",
        "encoded_tuple_buffer%26#0"
      ]
    },
    "701": {
      "op": "swap",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%9#0",
        "encoded_tuple_buffer%26#0",
        "offset_as_uint16%8#0"
      ]
    },
    "702": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%9#0",
        "encoded_tuple_buffer%27#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%9#0",
        "encoded_tuple_buffer%27#0"
      ]
    },
    "703": {
      "op": "dig 3",
      "defined_out": [
        "current_tail_offset%9#0",
        "encoded_tuple_buffer%27#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%8#0 (copy)",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%9#0",
        "encoded_tuple_buffer%27#0",
        "encoded_value%8#0 (copy)"
      ]
    },
    "705": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%9#0",
        "data_length%8#0",
        "encoded_tuple_buffer%27#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "current_tail_offset%9#0",
        "encoded_tuple_buffer%27#0",
        "data_length%8#0"
      ]
    },
    "706": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%27#0",
        "data_length%8#0",
        "current_tail_offset%9#0"
      ]
    },
    "708": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%10#0",
        "encoded_tuple_buffer%27#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%27#0",
        "current_tail_offset%10#0"
      ]
    },
    "709": {
      "op": "itob",
      "defined_out": [
        "as_bytes%19#0",
        "encoded_tuple_buffer%27#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%27#0",
        "as_bytes%19#0"
      ]
    },
    "710": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%27#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "offset_as_uint16%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%27#0",
        "offset_as_uint16%9#0"
      ]
    },
    "713": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%28#0",
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%5#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%28#0"
      ]
    },
    "714": {
      "op": "uncover 5",
      "stack_out": [
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%28#0",
        "encoded_value%5#0"
      ]
    },
    "716": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%29#0",
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%6#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%29#0"
      ]
    },
    "717": {
      "op": "uncover 4",
      "stack_out": [
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%29#0",
        "encoded_value%6#0"
      ]
    },
    "719": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%30#0",
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%7#0",
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%30#0"
      ]
    },
    "720": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%30#0",
        "encoded_value%7#0"
      ]
    },
    "722": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%31#0",
        "encoded_value%8#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%8#0",
        "encoded_value%9#0",
        "encoded_tuple_buffer%31#0"
      ]
    },
    "723": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%9#0",
        "encoded_tuple_buffer%31#0",
        "encoded_value%8#0"
      ]
    },
    "725": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%32#0",
        "encoded_value%9#0"
      ],
      "stack_out": [
        "encoded_value%9#0",
        "encoded_tuple_buffer%32#0"
      ]
    },
    "726": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%32#0",
        "encoded_value%9#0"
      ]
    },
    "727": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%33#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%33#0"
      ]
    },
    "728": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%33#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%33#0",
        "0x151f7c75"
      ]
    },
    "729": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%33#0"
      ]
    },
    "730": {
      "op": "concat",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "731": {
      "op": "log",
      "stack_out": []
    },
    "732": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "733": {
      "op": "return",
      "stack_out": []
    },
    "734": {
      "block": "main_getPoolInfo_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "736": {
      "op": "!",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "737": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "738": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "740": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "741": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%24#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%24#0"
      ]
    },
    "744": {
      "op": "btoi",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "745": {
      "callsub": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.getPoolInfo",
      "op": "callsub getPoolInfo",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0"
      ]
    },
    "748": {
      "op": "uncover 16",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%0#0"
      ]
    },
    "750": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0"
      ]
    },
    "751": {
      "op": "uncover 16",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "elements_to_encode%1#0"
      ]
    },
    "753": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "754": {
      "op": "dig 16",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%2#0",
        "elements_to_encode%2#0 (copy)",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "elements_to_encode%2#0 (copy)"
      ]
    },
    "756": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "length%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "length%0#0"
      ]
    },
    "757": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "as_bytes%0#0"
      ]
    },
    "758": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "length_uint16%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "length_uint16%0#0"
      ]
    },
    "761": {
      "op": "uncover 17",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "length_uint16%0#0",
        "elements_to_encode%2#0"
      ]
    },
    "763": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0"
      ]
    },
    "764": {
      "op": "dig 16",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%3#0",
        "elements_to_encode%3#0 (copy)",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "elements_to_encode%3#0 (copy)"
      ]
    },
    "766": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "length%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "767": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "768": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "771": {
      "op": "uncover 17",
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "elements_to_encode%3#0"
      ]
    },
    "773": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "774": {
      "op": "dig 16",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "elements_to_encode%4#0 (copy)"
      ]
    },
    "776": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length%2#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length%2#0"
      ]
    },
    "777": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "as_bytes%2#0"
      ]
    },
    "778": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length_uint16%2#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length_uint16%2#0"
      ]
    },
    "781": {
      "op": "uncover 17",
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length_uint16%2#0",
        "elements_to_encode%4#0"
      ]
    },
    "783": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0"
      ]
    },
    "784": {
      "op": "dig 16",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%5#0",
        "elements_to_encode%5#0 (copy)",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "elements_to_encode%5#0 (copy)"
      ]
    },
    "786": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "length%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "length%3#0"
      ]
    },
    "787": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "as_bytes%3#0"
      ]
    },
    "788": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "length_uint16%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%5#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "length_uint16%3#0"
      ]
    },
    "791": {
      "op": "uncover 17",
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "length_uint16%3#0",
        "elements_to_encode%5#0"
      ]
    },
    "793": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ]
    },
    "794": {
      "op": "dig 16",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%6#0",
        "elements_to_encode%6#0 (copy)",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "elements_to_encode%6#0 (copy)"
      ]
    },
    "796": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "length%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "length%4#0"
      ]
    },
    "797": {
      "op": "itob",
      "defined_out": [
        "as_bytes%4#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "as_bytes%4#0"
      ]
    },
    "798": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "length_uint16%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%6#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "length_uint16%4#0"
      ]
    },
    "801": {
      "op": "uncover 17",
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "length_uint16%4#0",
        "elements_to_encode%6#0"
      ]
    },
    "803": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%7#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0"
      ]
    },
    "804": {
      "op": "uncover 16",
      "stack_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "elements_to_encode%7#0"
      ]
    },
    "806": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "elements_to_encode%8#0",
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0"
      ]
    },
    "807": {
      "op": "uncover 16",
      "stack_out": [
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "elements_to_encode%8#0"
      ]
    },
    "809": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "elements_to_encode%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "elements_to_encode%9#0",
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "810": {
      "op": "uncover 16",
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "elements_to_encode%9#0"
      ]
    },
    "812": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "elements_to_encode%10#0",
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "813": {
      "op": "uncover 16",
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "elements_to_encode%10#0"
      ]
    },
    "815": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "elements_to_encode%11#0",
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "816": {
      "op": "uncover 16",
      "stack_out": [
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "elements_to_encode%11#0"
      ]
    },
    "818": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "elements_to_encode%12#0",
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "819": {
      "op": "uncover 16",
      "stack_out": [
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "elements_to_encode%12#0"
      ]
    },
    "821": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%13#0",
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ]
    },
    "822": {
      "op": "uncover 16",
      "stack_out": [
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "elements_to_encode%13#0"
      ]
    },
    "824": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%14#0",
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0"
      ]
    },
    "825": {
      "op": "uncover 16",
      "stack_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "elements_to_encode%14#0"
      ]
    },
    "827": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%15#0",
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0"
      ]
    },
    "828": {
      "op": "uncover 16",
      "stack_out": [
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "elements_to_encode%15#0"
      ]
    },
    "830": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%16#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "elements_to_encode%16#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0"
      ]
    },
    "831": {
      "op": "uncover 16",
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "elements_to_encode%16#0"
      ]
    },
    "833": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0"
      ]
    },
    "834": {
      "op": "uncover 16",
      "stack_out": [
        "val_as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0"
      ]
    },
    "836": {
      "op": "uncover 16",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "838": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "839": {
      "op": "pushbytes 0x006a",
      "defined_out": [
        "0x006a",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%2#0",
        "0x006a"
      ]
    },
    "843": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "844": {
      "op": "dig 15",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "846": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%3#0",
        "data_length%0#0"
      ]
    },
    "847": {
      "op": "pushint 106 // 106",
      "defined_out": [
        "106",
        "data_length%0#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%3#0",
        "data_length%0#0",
        "106"
      ]
    },
    "849": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%1#0"
      ]
    },
    "850": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)"
      ]
    },
    "851": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%1#0",
        "as_bytes%6#0"
      ]
    },
    "852": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0"
      ]
    },
    "855": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "857": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%3#0",
        "offset_as_uint16%1#0"
      ]
    },
    "858": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "859": {
      "op": "dig 15",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%1#0 (copy)",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%1#0 (copy)"
      ]
    },
    "861": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%1#0",
        "data_length%1#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%4#0",
        "data_length%1#0"
      ]
    },
    "862": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%4#0",
        "data_length%1#0",
        "current_tail_offset%1#0"
      ]
    },
    "864": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%4#0",
        "current_tail_offset%2#0"
      ]
    },
    "865": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%2#0",
        "current_tail_offset%2#0 (copy)",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%4#0",
        "current_tail_offset%2#0",
        "current_tail_offset%2#0 (copy)"
      ]
    },
    "866": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%4#0",
        "current_tail_offset%2#0",
        "as_bytes%7#0"
      ]
    },
    "867": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "offset_as_uint16%2#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%4#0",
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0"
      ]
    },
    "870": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "872": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%4#0",
        "offset_as_uint16%2#0"
      ]
    },
    "873": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "874": {
      "op": "dig 14",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%2#0 (copy)",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%2#0 (copy)"
      ]
    },
    "876": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%2#0",
        "data_length%2#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0",
        "data_length%2#0"
      ]
    },
    "877": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%5#0",
        "data_length%2#0",
        "current_tail_offset%2#0"
      ]
    },
    "879": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%5#0",
        "current_tail_offset%3#0"
      ]
    },
    "880": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%3#0",
        "current_tail_offset%3#0 (copy)",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%5#0",
        "current_tail_offset%3#0",
        "current_tail_offset%3#0 (copy)"
      ]
    },
    "881": {
      "op": "itob",
      "defined_out": [
        "as_bytes%8#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%5#0",
        "current_tail_offset%3#0",
        "as_bytes%8#0"
      ]
    },
    "882": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "offset_as_uint16%3#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%5#0",
        "current_tail_offset%3#0",
        "offset_as_uint16%3#0"
      ]
    },
    "885": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "current_tail_offset%3#0",
        "offset_as_uint16%3#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "887": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%5#0",
        "offset_as_uint16%3#0"
      ]
    },
    "888": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "889": {
      "op": "dig 13",
      "defined_out": [
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%3#0 (copy)",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%3#0 (copy)"
      ]
    },
    "891": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%3#0",
        "data_length%3#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%6#0",
        "data_length%3#0"
      ]
    },
    "892": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%6#0",
        "data_length%3#0",
        "current_tail_offset%3#0"
      ]
    },
    "894": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%4#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%6#0",
        "current_tail_offset%4#0"
      ]
    },
    "895": {
      "op": "itob",
      "defined_out": [
        "as_bytes%9#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%6#0",
        "as_bytes%9#0"
      ]
    },
    "896": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "offset_as_uint16%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%6#0",
        "offset_as_uint16%4#0"
      ]
    },
    "899": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "900": {
      "op": "uncover 10",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%7#0",
        "val_as_bytes%4#0"
      ]
    },
    "902": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "903": {
      "op": "uncover 9",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%5#0"
      ]
    },
    "905": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "906": {
      "op": "uncover 8",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%9#0",
        "val_as_bytes%6#0"
      ]
    },
    "908": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "909": {
      "op": "uncover 7",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%10#0",
        "val_as_bytes%7#0"
      ]
    },
    "911": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "912": {
      "op": "uncover 6",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%8#0"
      ]
    },
    "914": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%9#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "915": {
      "op": "uncover 5",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%12#0",
        "val_as_bytes%9#0"
      ]
    },
    "917": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%10#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "918": {
      "op": "uncover 4",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%13#0",
        "val_as_bytes%10#0"
      ]
    },
    "920": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%11#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "921": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%14#0",
        "val_as_bytes%11#0"
      ]
    },
    "923": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%15#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%12#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "924": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%15#0",
        "val_as_bytes%12#0"
      ]
    },
    "926": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%16#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%13#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "val_as_bytes%13#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "927": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%16#0",
        "val_as_bytes%13#0"
      ]
    },
    "928": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%17#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "929": {
      "op": "uncover 5",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%17#0",
        "encoded_value%0#0"
      ]
    },
    "931": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%18#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%18#0"
      ]
    },
    "932": {
      "op": "uncover 4",
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%18#0",
        "encoded_value%1#0"
      ]
    },
    "934": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%19#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "935": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%19#0",
        "encoded_value%2#0"
      ]
    },
    "937": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%20#0",
        "encoded_value%3#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_value%4#0",
        "encoded_tuple_buffer%20#0"
      ]
    },
    "938": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%20#0",
        "encoded_value%3#0"
      ]
    },
    "940": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%21#0",
        "encoded_value%4#0"
      ],
      "stack_out": [
        "encoded_value%4#0",
        "encoded_tuple_buffer%21#0"
      ]
    },
    "941": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%21#0",
        "encoded_value%4#0"
      ]
    },
    "942": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%22#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%22#0"
      ]
    },
    "943": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%22#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%22#0",
        "0x151f7c75"
      ]
    },
    "944": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%22#0"
      ]
    },
    "945": {
      "op": "concat",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "946": {
      "op": "log",
      "stack_out": []
    },
    "947": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "948": {
      "op": "return",
      "stack_out": []
    },
    "949": {
      "block": "main_setGovernanceContract_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "951": {
      "op": "!",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "952": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "953": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "955": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "956": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "959": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "962": {
      "callsub": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.setGovernanceContract",
      "op": "callsub setGovernanceContract",
      "stack_out": []
    },
    "965": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "966": {
      "op": "return",
      "stack_out": []
    },
    "967": {
      "block": "main_resumeFactory_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "969": {
      "op": "!",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "970": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "971": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "973": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "974": {
      "callsub": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.resumeFactory",
      "op": "callsub resumeFactory"
    },
    "977": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "978": {
      "op": "return",
      "stack_out": []
    },
    "979": {
      "block": "main_emergencyPauseFactory_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "981": {
      "op": "!",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "982": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "983": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "985": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "986": {
      "callsub": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.emergencyPauseFactory",
      "op": "callsub emergencyPauseFactory"
    },
    "989": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "990": {
      "op": "return",
      "stack_out": []
    },
    "991": {
      "block": "main_updateFactorySettings_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "993": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "994": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "995": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "997": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "998": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%20#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%20#0"
      ]
    },
    "1001": {
      "op": "btoi",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "1002": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%21#0",
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "reinterpret_bytes[8]%21#0"
      ]
    },
    "1005": {
      "op": "btoi",
      "defined_out": [
        "tmp%65#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%66#0"
      ]
    },
    "1006": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%22#0",
        "tmp%65#0",
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%66#0",
        "reinterpret_bytes[8]%22#0"
      ]
    },
    "1009": {
      "op": "btoi",
      "defined_out": [
        "tmp%65#0",
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%66#0",
        "tmp%67#0"
      ]
    },
    "1010": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%23#0",
        "tmp%65#0",
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%66#0",
        "tmp%67#0",
        "reinterpret_bytes[8]%23#0"
      ]
    },
    "1013": {
      "op": "btoi",
      "defined_out": [
        "tmp%65#0",
        "tmp%66#0",
        "tmp%67#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%65#0",
        "tmp%66#0",
        "tmp%67#0",
        "tmp%68#0"
      ]
    },
    "1014": {
      "callsub": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.updateFactorySettings",
      "op": "callsub updateFactorySettings",
      "stack_out": []
    },
    "1017": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1018": {
      "op": "return",
      "stack_out": []
    },
    "1019": {
      "block": "main_setDefaultTemplate_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "1021": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "1022": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1023": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "1025": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1026": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%19#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%19#0"
      ]
    },
    "1029": {
      "op": "btoi",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "1030": {
      "callsub": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.setDefaultTemplate",
      "op": "callsub setDefaultTemplate",
      "stack_out": []
    },
    "1033": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1034": {
      "op": "return",
      "stack_out": []
    },
    "1035": {
      "block": "main_addPoolTemplate_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "1037": {
      "op": "!",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "1038": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1039": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "1041": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1042": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "1045": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "1048": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%46#0",
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%47#0"
      ]
    },
    "1051": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%46#0",
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0"
      ]
    },
    "1054": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "tmp%49#0"
      ]
    },
    "1057": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%46#0",
        "tmp%48#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "tmp%50#0"
      ]
    },
    "1060": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%46#0",
        "tmp%48#0",
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "tmp%50#0",
        "tmp%51#0"
      ]
    },
    "1063": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%46#0",
        "tmp%48#0",
        "tmp%50#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "tmp%50#0",
        "tmp%52#0"
      ]
    },
    "1066": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%46#0",
        "tmp%48#0",
        "tmp%50#0",
        "tmp%52#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "tmp%50#0",
        "tmp%52#0",
        "tmp%53#0"
      ]
    },
    "1069": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%46#0",
        "tmp%48#0",
        "tmp%50#0",
        "tmp%52#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%46#0",
        "tmp%48#0",
        "tmp%50#0",
        "tmp%52#0",
        "tmp%54#0"
      ]
    },
    "1072": {
      "callsub": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.addPoolTemplate",
      "op": "callsub addPoolTemplate",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "1075": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "1076": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "1077": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "1078": {
      "op": "concat",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "1079": {
      "op": "log",
      "stack_out": []
    },
    "1080": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1081": {
      "op": "return",
      "stack_out": []
    },
    "1082": {
      "block": "main_updatePoolMetrics_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "1084": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "1085": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1086": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "1088": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1089": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%14#0"
      ]
    },
    "1092": {
      "op": "btoi",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "1093": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%15#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "reinterpret_bytes[8]%15#0"
      ]
    },
    "1096": {
      "op": "btoi",
      "defined_out": [
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "1097": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%16#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "reinterpret_bytes[8]%16#0"
      ]
    },
    "1100": {
      "op": "btoi",
      "defined_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "1101": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%17#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "reinterpret_bytes[8]%17#0"
      ]
    },
    "1104": {
      "op": "btoi",
      "defined_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "1105": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%18#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "reinterpret_bytes[8]%18#0"
      ]
    },
    "1108": {
      "op": "btoi",
      "defined_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "1109": {
      "callsub": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.updatePoolMetrics",
      "op": "callsub updatePoolMetrics",
      "stack_out": []
    },
    "1112": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1113": {
      "op": "return",
      "stack_out": []
    },
    "1114": {
      "block": "main_updatePoolStatus_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "1116": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "1117": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1118": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "1120": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1121": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%12#0"
      ]
    },
    "1124": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "1125": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%13#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "reinterpret_bytes[8]%13#0"
      ]
    },
    "1128": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "1129": {
      "callsub": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.updatePoolStatus",
      "op": "callsub updatePoolStatus",
      "stack_out": []
    },
    "1132": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1133": {
      "op": "return",
      "stack_out": []
    },
    "1134": {
      "block": "main_createPool_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1136": {
      "op": "!",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1137": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1138": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1140": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1141": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "1144": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1145": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "1148": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "1149": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%6#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "1152": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "1153": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "1156": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "1157": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%8#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "1160": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "1161": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%9#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "1164": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "1165": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%10#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "1168": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "1169": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[8]%11#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "reinterpret_bytes[8]%11#0"
      ]
    },
    "1172": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "1173": {
      "callsub": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.createPool",
      "op": "callsub createPool",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "1176": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1177": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "1178": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "1179": {
      "op": "concat",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "1180": {
      "op": "log",
      "stack_out": []
    },
    "1181": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1182": {
      "op": "return",
      "stack_out": []
    },
    "1183": {
      "block": "main_initialize_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1185": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1186": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "1187": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1189": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "1190": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "1193": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1194": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "1197": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1198": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "1201": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "1204": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%10#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%10#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "1207": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "1208": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "1211": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "1212": {
      "callsub": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.initialize",
      "op": "callsub initialize",
      "stack_out": []
    },
    "1215": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1216": {
      "op": "return",
      "stack_out": []
    },
    "1217": {
      "block": "main_bare_routing@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "1219": {
      "op": "bnz main_after_if_else@21",
      "stack_out": []
    },
    "1222": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "1224": {
      "op": "!",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "1225": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "1226": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1227": {
      "op": "return",
      "stack_out": []
    },
    "1228": {
      "subroutine": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.initialize",
      "params": {
        "poolCreationFee#0": "uint64",
        "factoryFeeRate#0": "uint64",
        "feeCollector#0": "bytes",
        "maxPoolsPerUser#0": "uint64",
        "minimumInitialStake#0": "uint64"
      },
      "block": "initialize",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "1231": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1232": {
      "op": "bytec 5 // \"factoryActive\"",
      "defined_out": [
        "\"factoryActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"factoryActive\""
      ]
    },
    "1234": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1235": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1236": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1237": {
      "op": "assert",
      "stack_out": []
    },
    "1238": {
      "op": "bytec 6 // \"poolCount\"",
      "defined_out": [
        "\"poolCount\""
      ],
      "stack_out": [
        "\"poolCount\""
      ]
    },
    "1240": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"poolCount\"",
        "0"
      ]
    },
    "1241": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1242": {
      "op": "bytec_0 // \"totalTVL\"",
      "defined_out": [
        "\"totalTVL\""
      ],
      "stack_out": [
        "\"totalTVL\""
      ]
    },
    "1243": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalTVL\"",
        "0"
      ]
    },
    "1244": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1245": {
      "op": "bytec_1 // \"factoryOwner\"",
      "defined_out": [
        "\"factoryOwner\""
      ],
      "stack_out": [
        "\"factoryOwner\""
      ]
    },
    "1246": {
      "op": "txn Sender",
      "defined_out": [
        "\"factoryOwner\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"factoryOwner\"",
        "new_state_value%0#0"
      ]
    },
    "1248": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1249": {
      "op": "bytec 16 // \"poolCreationFee\"",
      "defined_out": [
        "\"poolCreationFee\""
      ],
      "stack_out": [
        "\"poolCreationFee\""
      ]
    },
    "1251": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"poolCreationFee\"",
        "poolCreationFee#0 (copy)"
      ],
      "stack_out": [
        "\"poolCreationFee\"",
        "poolCreationFee#0 (copy)"
      ]
    },
    "1253": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1254": {
      "op": "bytec 17 // \"factoryFeeRate\"",
      "defined_out": [
        "\"factoryFeeRate\""
      ],
      "stack_out": [
        "\"factoryFeeRate\""
      ]
    },
    "1256": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"factoryFeeRate\"",
        "factoryFeeRate#0 (copy)"
      ],
      "stack_out": [
        "\"factoryFeeRate\"",
        "factoryFeeRate#0 (copy)"
      ]
    },
    "1258": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1259": {
      "op": "pushbytes \"feeCollector\"",
      "defined_out": [
        "\"feeCollector\""
      ],
      "stack_out": [
        "\"feeCollector\""
      ]
    },
    "1273": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"feeCollector\"",
        "feeCollector#0 (copy)"
      ],
      "stack_out": [
        "\"feeCollector\"",
        "feeCollector#0 (copy)"
      ]
    },
    "1275": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1276": {
      "op": "bytec 7 // \"maxPoolsPerUser\"",
      "defined_out": [
        "\"maxPoolsPerUser\""
      ],
      "stack_out": [
        "\"maxPoolsPerUser\""
      ]
    },
    "1278": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"maxPoolsPerUser\"",
        "maxPoolsPerUser#0 (copy)"
      ],
      "stack_out": [
        "\"maxPoolsPerUser\"",
        "maxPoolsPerUser#0 (copy)"
      ]
    },
    "1280": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1281": {
      "op": "bytec 8 // \"minimumInitialStake\"",
      "defined_out": [
        "\"minimumInitialStake\""
      ],
      "stack_out": [
        "\"minimumInitialStake\""
      ]
    },
    "1283": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"minimumInitialStake\"",
        "minimumInitialStake#0 (copy)"
      ],
      "stack_out": [
        "\"minimumInitialStake\"",
        "minimumInitialStake#0 (copy)"
      ]
    },
    "1285": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1286": {
      "op": "bytec 5 // \"factoryActive\"",
      "stack_out": [
        "\"factoryActive\""
      ]
    },
    "1288": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"factoryActive\"",
        "1"
      ],
      "stack_out": [
        "\"factoryActive\"",
        "1"
      ]
    },
    "1289": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1290": {
      "op": "bytec 4 // \"emergencyPause\"",
      "defined_out": [
        "\"emergencyPause\""
      ],
      "stack_out": [
        "\"emergencyPause\""
      ]
    },
    "1292": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"emergencyPause\"",
        "0"
      ]
    },
    "1293": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1294": {
      "op": "bytec 9 // \"templateCount\"",
      "defined_out": [
        "\"templateCount\""
      ],
      "stack_out": [
        "\"templateCount\""
      ]
    },
    "1296": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"templateCount\"",
        "0"
      ]
    },
    "1297": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1298": {
      "op": "bytec 10 // \"defaultTemplate\"",
      "defined_out": [
        "\"defaultTemplate\""
      ],
      "stack_out": [
        "\"defaultTemplate\""
      ]
    },
    "1300": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"defaultTemplate\"",
        "0"
      ]
    },
    "1301": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1302": {
      "retsub": true,
      "op": "retsub"
    },
    "1303": {
      "subroutine": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.createPool",
      "params": {
        "assetId#0": "uint64",
        "initialRewardPool#0": "uint64",
        "rewardRate#0": "uint64",
        "minimumStake#0": "uint64",
        "maxStakePerUser#0": "uint64",
        "lockupPeriod#0": "uint64",
        "earlyWithdrawPenalty#0": "uint64",
        "templateId#0": "uint64"
      },
      "block": "createPool",
      "stack_in": [],
      "op": "proto 8 1"
    },
    "1306": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1307": {
      "op": "bytec 5 // \"factoryActive\"",
      "defined_out": [
        "\"factoryActive\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"factoryActive\""
      ]
    },
    "1309": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1310": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1311": {
      "op": "assert",
      "stack_out": []
    },
    "1312": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1313": {
      "op": "bytec 4 // \"emergencyPause\"",
      "defined_out": [
        "\"emergencyPause\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"emergencyPause\""
      ]
    },
    "1315": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1316": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1317": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1318": {
      "op": "assert",
      "stack_out": []
    },
    "1319": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1320": {
      "op": "bytec 8 // \"minimumInitialStake\"",
      "defined_out": [
        "\"minimumInitialStake\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"minimumInitialStake\""
      ]
    },
    "1322": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1323": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1324": {
      "op": "frame_dig -7",
      "defined_out": [
        "initialRewardPool#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "initialRewardPool#0 (copy)"
      ]
    },
    "1326": {
      "op": "<=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1327": {
      "op": "assert",
      "stack_out": []
    },
    "1328": {
      "op": "txn Sender"
    },
    "1330": {
      "op": "dup",
      "defined_out": [
        "userPoolsKey#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPoolsKey#0"
      ]
    },
    "1331": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "userPoolsKey#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1332": {
      "op": "bury 1",
      "stack_out": [
        "userPoolsKey#0",
        "maybe_exists%3#0"
      ]
    },
    "1334": {
      "op": "bz createPool_ternary_false@2",
      "stack_out": [
        "userPoolsKey#0"
      ]
    },
    "1337": {
      "op": "frame_dig 0",
      "stack_out": [
        "userPoolsKey#0",
        "userPoolsKey#0"
      ]
    },
    "1339": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "userPoolsKey#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1340": {
      "op": "swap",
      "stack_out": [
        "userPoolsKey#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ]
    },
    "1341": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value_converted%0#0",
        "userPoolsKey#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "maybe_exists%4#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1342": {
      "op": "swap",
      "stack_out": [
        "userPoolsKey#0",
        "maybe_value_converted%0#0",
        "maybe_exists%4#0"
      ]
    },
    "1343": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "defined_out": [
        "userPools#0",
        "userPoolsKey#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0"
      ]
    },
    "1344": {
      "block": "createPool_ternary_merge@3",
      "stack_in": [
        "userPoolsKey#0",
        "userPools#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "0"
      ]
    },
    "1345": {
      "op": "bytec 7 // \"maxPoolsPerUser\"",
      "defined_out": [
        "\"maxPoolsPerUser\"",
        "0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "0",
        "\"maxPoolsPerUser\""
      ]
    },
    "1347": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1348": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "maybe_value%5#0"
      ]
    },
    "1349": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%5#0",
        "userPools#0",
        "userPools#0 (copy)"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "maybe_value%5#0",
        "userPools#0 (copy)"
      ]
    },
    "1351": {
      "op": ">",
      "defined_out": [
        "tmp%2#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "tmp%2#0"
      ]
    },
    "1352": {
      "op": "assert",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0"
      ]
    },
    "1353": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "0"
      ]
    },
    "1354": {
      "op": "bytec 6 // \"poolCount\"",
      "defined_out": [
        "\"poolCount\"",
        "0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "0",
        "\"poolCount\""
      ]
    },
    "1356": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1357": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "maybe_value%6#0"
      ]
    },
    "1358": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%6#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "maybe_value%6#0",
        "1"
      ]
    },
    "1359": {
      "op": "+",
      "defined_out": [
        "poolId#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0"
      ]
    },
    "1360": {
      "op": "bytec 6 // \"poolCount\"",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "\"poolCount\""
      ]
    },
    "1362": {
      "op": "dig 1",
      "defined_out": [
        "\"poolCount\"",
        "poolId#0",
        "poolId#0 (copy)",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "\"poolCount\"",
        "poolId#0 (copy)"
      ]
    },
    "1364": {
      "op": "app_global_put",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0"
      ]
    },
    "1365": {
      "op": "txn Sender",
      "defined_out": [
        "poolId#0",
        "stakingContract#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "stakingContract#0"
      ]
    },
    "1367": {
      "op": "dupn 3",
      "defined_out": [
        "autoCompounder#0",
        "governanceVault#0",
        "poolId#0",
        "rewardDistributor#0",
        "stakingContract#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "stakingContract#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0"
      ]
    },
    "1369": {
      "op": "dig 4",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "stakingContract#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "poolId#0 (copy)"
      ]
    },
    "1371": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "autoCompounder#0",
        "governanceVault#0",
        "poolId#0",
        "rewardDistributor#0",
        "stakingContract#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "stakingContract#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0"
      ]
    },
    "1372": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "autoCompounder#0",
        "governanceVault#0",
        "poolId#0",
        "rewardDistributor#0",
        "stakingContract#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "stakingContract#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1373": {
      "op": "bytec 18 // \"_assetId\"",
      "defined_out": [
        "\"_assetId\"",
        "a#0",
        "a#0 (copy)",
        "autoCompounder#0",
        "governanceVault#0",
        "poolId#0",
        "rewardDistributor#0",
        "stakingContract#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "stakingContract#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "a#0 (copy)",
        "\"_assetId\""
      ]
    },
    "1375": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "autoCompounder#0",
        "governanceVault#0",
        "poolId#0",
        "rewardDistributor#0",
        "stakingContract#0",
        "tmp%0#2",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "stakingContract#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1376": {
      "op": "frame_dig -8",
      "defined_out": [
        "a#0",
        "assetId#0 (copy)",
        "autoCompounder#0",
        "governanceVault#0",
        "poolId#0",
        "rewardDistributor#0",
        "stakingContract#0",
        "tmp%0#2",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "stakingContract#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2",
        "assetId#0 (copy)"
      ]
    },
    "1378": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "autoCompounder#0",
        "governanceVault#0",
        "new_box_value%0#0",
        "poolId#0",
        "rewardDistributor#0",
        "stakingContract#0",
        "tmp%0#2",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "stakingContract#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%0#0"
      ]
    },
    "1379": {
      "op": "box_put",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "stakingContract#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0"
      ]
    },
    "1380": {
      "op": "dup",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "stakingContract#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1381": {
      "op": "bytec 19 // \"_stakingContract\"",
      "defined_out": [
        "\"_stakingContract\"",
        "a#0",
        "a#0 (copy)",
        "autoCompounder#0",
        "governanceVault#0",
        "poolId#0",
        "rewardDistributor#0",
        "stakingContract#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "stakingContract#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "a#0 (copy)",
        "\"_stakingContract\""
      ]
    },
    "1383": {
      "op": "concat",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "stakingContract#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1384": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "autoCompounder#0",
        "governanceVault#0",
        "poolId#0",
        "rewardDistributor#0",
        "stakingContract#0",
        "tmp%0#2",
        "tmp%0#2 (copy)",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "stakingContract#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1385": {
      "op": "box_del",
      "defined_out": [
        "a#0",
        "autoCompounder#0",
        "governanceVault#0",
        "poolId#0",
        "rewardDistributor#0",
        "stakingContract#0",
        "tmp%0#2",
        "userPools#0",
        "{box_del}"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "stakingContract#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2",
        "{box_del}"
      ]
    },
    "1386": {
      "op": "pop",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "stakingContract#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1387": {
      "op": "uncover 5",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2",
        "stakingContract#0"
      ]
    },
    "1389": {
      "op": "box_put",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0"
      ]
    },
    "1390": {
      "op": "dup",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1391": {
      "op": "bytec 20 // \"_rewardDistributor\"",
      "defined_out": [
        "\"_rewardDistributor\"",
        "a#0",
        "a#0 (copy)",
        "autoCompounder#0",
        "governanceVault#0",
        "poolId#0",
        "rewardDistributor#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "a#0 (copy)",
        "\"_rewardDistributor\""
      ]
    },
    "1393": {
      "op": "concat",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1394": {
      "op": "dup",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1395": {
      "op": "box_del",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2",
        "{box_del}"
      ]
    },
    "1396": {
      "op": "pop",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "rewardDistributor#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1397": {
      "op": "uncover 4",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2",
        "rewardDistributor#0"
      ]
    },
    "1399": {
      "op": "box_put",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0"
      ]
    },
    "1400": {
      "op": "dup",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1401": {
      "op": "bytec 21 // \"_autoCompounder\"",
      "defined_out": [
        "\"_autoCompounder\"",
        "a#0",
        "a#0 (copy)",
        "autoCompounder#0",
        "governanceVault#0",
        "poolId#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "a#0 (copy)",
        "\"_autoCompounder\""
      ]
    },
    "1403": {
      "op": "concat",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1404": {
      "op": "dup",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1405": {
      "op": "box_del",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2",
        "{box_del}"
      ]
    },
    "1406": {
      "op": "pop",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "autoCompounder#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1407": {
      "op": "uncover 3",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2",
        "autoCompounder#0"
      ]
    },
    "1409": {
      "op": "box_put",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "governanceVault#0",
        "a#0"
      ]
    },
    "1410": {
      "op": "dup",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "governanceVault#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1411": {
      "op": "bytec 22 // \"_governanceVault\"",
      "defined_out": [
        "\"_governanceVault\"",
        "a#0",
        "a#0 (copy)",
        "governanceVault#0",
        "poolId#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "governanceVault#0",
        "a#0",
        "a#0 (copy)",
        "\"_governanceVault\""
      ]
    },
    "1413": {
      "op": "concat",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1414": {
      "op": "dup",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1415": {
      "op": "box_del",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2",
        "{box_del}"
      ]
    },
    "1416": {
      "op": "pop",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "governanceVault#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1417": {
      "op": "uncover 2",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2",
        "governanceVault#0"
      ]
    },
    "1419": {
      "op": "box_put",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0"
      ]
    },
    "1420": {
      "op": "dup",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1421": {
      "op": "bytec 23 // \"_creator\"",
      "defined_out": [
        "\"_creator\"",
        "a#0",
        "a#0 (copy)",
        "poolId#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "a#0 (copy)",
        "\"_creator\""
      ]
    },
    "1423": {
      "op": "concat",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1424": {
      "op": "txn Sender",
      "defined_out": [
        "a#0",
        "new_box_value%1#0",
        "poolId#0",
        "tmp%0#2",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%1#0"
      ]
    },
    "1426": {
      "op": "dig 1",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%1#0",
        "tmp%0#2 (copy)"
      ]
    },
    "1428": {
      "op": "box_del",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%1#0",
        "{box_del}"
      ]
    },
    "1429": {
      "op": "pop",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%1#0"
      ]
    },
    "1430": {
      "op": "box_put",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0"
      ]
    },
    "1431": {
      "op": "dup",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1432": {
      "op": "bytec 24 // \"_createdAt\"",
      "defined_out": [
        "\"_createdAt\"",
        "a#0",
        "a#0 (copy)",
        "poolId#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "a#0 (copy)",
        "\"_createdAt\""
      ]
    },
    "1434": {
      "op": "concat",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1435": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "a#0",
        "new_box_value%2#0",
        "poolId#0",
        "tmp%0#2",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%2#0"
      ]
    },
    "1437": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "new_box_value%3#0",
        "poolId#0",
        "tmp%0#2",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%3#0"
      ]
    },
    "1438": {
      "op": "box_put",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0"
      ]
    },
    "1439": {
      "op": "dup",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1440": {
      "op": "bytec 11 // \"_status\"",
      "defined_out": [
        "\"_status\"",
        "a#0",
        "a#0 (copy)",
        "poolId#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "a#0 (copy)",
        "\"_status\""
      ]
    },
    "1442": {
      "op": "concat",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1443": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2",
        "0"
      ]
    },
    "1444": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "new_box_value%4#0",
        "poolId#0",
        "tmp%0#2",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%4#0"
      ]
    },
    "1445": {
      "op": "swap",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0",
        "tmp%0#2"
      ]
    },
    "1446": {
      "op": "dig 1",
      "defined_out": [
        "a#0",
        "new_box_value%4#0",
        "new_box_value%4#0 (copy)",
        "poolId#0",
        "tmp%0#2",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0",
        "tmp%0#2",
        "new_box_value%4#0 (copy)"
      ]
    },
    "1448": {
      "op": "box_put",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0"
      ]
    },
    "1449": {
      "op": "dig 1",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0",
        "a#0 (copy)"
      ]
    },
    "1451": {
      "op": "bytec_2 // \"_totalStaked\"",
      "defined_out": [
        "\"_totalStaked\"",
        "a#0",
        "a#0 (copy)",
        "new_box_value%4#0",
        "poolId#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0",
        "a#0 (copy)",
        "\"_totalStaked\""
      ]
    },
    "1452": {
      "op": "concat",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0",
        "tmp%0#2"
      ]
    },
    "1453": {
      "op": "dig 1",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0",
        "tmp%0#2",
        "new_box_value%4#0 (copy)"
      ]
    },
    "1455": {
      "op": "box_put",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0"
      ]
    },
    "1456": {
      "op": "dig 1",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0",
        "a#0 (copy)"
      ]
    },
    "1458": {
      "op": "bytec 12 // \"_totalRewards\"",
      "defined_out": [
        "\"_totalRewards\"",
        "a#0",
        "a#0 (copy)",
        "new_box_value%4#0",
        "poolId#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0",
        "a#0 (copy)",
        "\"_totalRewards\""
      ]
    },
    "1460": {
      "op": "concat",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0",
        "tmp%0#2"
      ]
    },
    "1461": {
      "op": "frame_dig -7",
      "defined_out": [
        "a#0",
        "initialRewardPool#0 (copy)",
        "new_box_value%4#0",
        "poolId#0",
        "tmp%0#2",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0",
        "tmp%0#2",
        "initialRewardPool#0 (copy)"
      ]
    },
    "1463": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "new_box_value%4#0",
        "new_box_value%6#0",
        "poolId#0",
        "tmp%0#2",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0",
        "tmp%0#2",
        "new_box_value%6#0"
      ]
    },
    "1464": {
      "op": "box_put",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0"
      ]
    },
    "1465": {
      "op": "dig 1",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0",
        "a#0 (copy)"
      ]
    },
    "1467": {
      "op": "bytec 13 // \"_participantCount\"",
      "defined_out": [
        "\"_participantCount\"",
        "a#0",
        "a#0 (copy)",
        "new_box_value%4#0",
        "poolId#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0",
        "a#0 (copy)",
        "\"_participantCount\""
      ]
    },
    "1469": {
      "op": "concat",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0",
        "tmp%0#2"
      ]
    },
    "1470": {
      "op": "dig 1",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0",
        "tmp%0#2",
        "new_box_value%4#0 (copy)"
      ]
    },
    "1472": {
      "op": "box_put",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0"
      ]
    },
    "1473": {
      "op": "dig 1",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0",
        "a#0 (copy)"
      ]
    },
    "1475": {
      "op": "bytec 14 // \"_apy\"",
      "defined_out": [
        "\"_apy\"",
        "a#0",
        "a#0 (copy)",
        "new_box_value%4#0",
        "poolId#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0",
        "a#0 (copy)",
        "\"_apy\""
      ]
    },
    "1477": {
      "op": "concat",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "new_box_value%4#0",
        "tmp%0#2"
      ]
    },
    "1478": {
      "op": "swap",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%4#0"
      ]
    },
    "1479": {
      "op": "box_put",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0"
      ]
    },
    "1480": {
      "op": "dup",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1481": {
      "op": "bytec 25 // \"_minimumStake\"",
      "defined_out": [
        "\"_minimumStake\"",
        "a#0",
        "a#0 (copy)",
        "poolId#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "a#0 (copy)",
        "\"_minimumStake\""
      ]
    },
    "1483": {
      "op": "concat",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1484": {
      "op": "frame_dig -5",
      "defined_out": [
        "a#0",
        "minimumStake#0 (copy)",
        "poolId#0",
        "tmp%0#2",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2",
        "minimumStake#0 (copy)"
      ]
    },
    "1486": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "new_box_value%9#0",
        "poolId#0",
        "tmp%0#2",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%9#0"
      ]
    },
    "1487": {
      "op": "box_put",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0"
      ]
    },
    "1488": {
      "op": "dup",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1489": {
      "op": "bytec 26 // \"_maxStakePerUser\"",
      "defined_out": [
        "\"_maxStakePerUser\"",
        "a#0",
        "a#0 (copy)",
        "poolId#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "a#0 (copy)",
        "\"_maxStakePerUser\""
      ]
    },
    "1491": {
      "op": "concat",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1492": {
      "op": "frame_dig -4",
      "defined_out": [
        "a#0",
        "maxStakePerUser#0 (copy)",
        "poolId#0",
        "tmp%0#2",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2",
        "maxStakePerUser#0 (copy)"
      ]
    },
    "1494": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "new_box_value%10#0",
        "poolId#0",
        "tmp%0#2",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%10#0"
      ]
    },
    "1495": {
      "op": "box_put",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0"
      ]
    },
    "1496": {
      "op": "dup",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1497": {
      "op": "bytec 27 // \"_lockupPeriod\"",
      "defined_out": [
        "\"_lockupPeriod\"",
        "a#0",
        "a#0 (copy)",
        "poolId#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "a#0 (copy)",
        "\"_lockupPeriod\""
      ]
    },
    "1499": {
      "op": "concat",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1500": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0",
        "lockupPeriod#0 (copy)",
        "poolId#0",
        "tmp%0#2",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2",
        "lockupPeriod#0 (copy)"
      ]
    },
    "1502": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "new_box_value%11#0",
        "poolId#0",
        "tmp%0#2",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "tmp%0#2",
        "new_box_value%11#0"
      ]
    },
    "1503": {
      "op": "box_put",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0"
      ]
    },
    "1504": {
      "op": "bytec 28 // \"_earlyWithdrawPenalty\"",
      "defined_out": [
        "\"_earlyWithdrawPenalty\"",
        "a#0",
        "poolId#0",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "a#0",
        "\"_earlyWithdrawPenalty\""
      ]
    },
    "1506": {
      "op": "concat",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "tmp%0#2"
      ]
    },
    "1507": {
      "op": "frame_dig -2",
      "defined_out": [
        "earlyWithdrawPenalty#0 (copy)",
        "poolId#0",
        "tmp%0#2",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "tmp%0#2",
        "earlyWithdrawPenalty#0 (copy)"
      ]
    },
    "1509": {
      "op": "itob",
      "defined_out": [
        "new_box_value%12#0",
        "poolId#0",
        "tmp%0#2",
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0",
        "tmp%0#2",
        "new_box_value%12#0"
      ]
    },
    "1510": {
      "op": "box_put",
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0",
        "poolId#0"
      ]
    },
    "1511": {
      "op": "swap",
      "stack_out": [
        "userPoolsKey#0",
        "poolId#0",
        "userPools#0"
      ]
    },
    "1512": {
      "op": "intc_1 // 1",
      "stack_out": [
        "userPoolsKey#0",
        "poolId#0",
        "userPools#0",
        "1"
      ]
    },
    "1513": {
      "op": "+",
      "defined_out": [
        "new_box_value%13#0",
        "poolId#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "poolId#0",
        "new_box_value%13#0"
      ]
    },
    "1514": {
      "op": "itob",
      "defined_out": [
        "new_box_value%14#0",
        "poolId#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "poolId#0",
        "new_box_value%14#0"
      ]
    },
    "1515": {
      "op": "frame_dig 0",
      "defined_out": [
        "new_box_value%14#0",
        "poolId#0",
        "userPoolsKey#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "poolId#0",
        "new_box_value%14#0",
        "userPoolsKey#0"
      ]
    },
    "1517": {
      "op": "swap",
      "stack_out": [
        "userPoolsKey#0",
        "poolId#0",
        "userPoolsKey#0",
        "new_box_value%14#0"
      ]
    },
    "1518": {
      "op": "box_put",
      "stack_out": [
        "userPoolsKey#0",
        "poolId#0"
      ]
    },
    "1519": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userPoolsKey#0",
        "poolId#0",
        "0"
      ]
    },
    "1520": {
      "op": "bytec_0 // \"totalTVL\"",
      "defined_out": [
        "\"totalTVL\"",
        "0",
        "poolId#0",
        "userPoolsKey#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "poolId#0",
        "0",
        "\"totalTVL\""
      ]
    },
    "1521": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "poolId#0",
        "userPoolsKey#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "poolId#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1522": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userPoolsKey#0",
        "poolId#0",
        "maybe_value%7#0"
      ]
    },
    "1523": {
      "op": "frame_dig -7",
      "stack_out": [
        "userPoolsKey#0",
        "poolId#0",
        "maybe_value%7#0",
        "initialRewardPool#0 (copy)"
      ]
    },
    "1525": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "poolId#0",
        "userPoolsKey#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "poolId#0",
        "new_state_value%0#0"
      ]
    },
    "1526": {
      "op": "bytec_0 // \"totalTVL\"",
      "stack_out": [
        "userPoolsKey#0",
        "poolId#0",
        "new_state_value%0#0",
        "\"totalTVL\""
      ]
    },
    "1527": {
      "op": "swap",
      "stack_out": [
        "userPoolsKey#0",
        "poolId#0",
        "\"totalTVL\"",
        "new_state_value%0#0"
      ]
    },
    "1528": {
      "op": "app_global_put",
      "stack_out": [
        "userPoolsKey#0",
        "poolId#0"
      ]
    },
    "1529": {
      "op": "swap"
    },
    "1530": {
      "retsub": true,
      "op": "retsub"
    },
    "1531": {
      "block": "createPool_ternary_false@2",
      "stack_in": [
        "userPoolsKey#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "userPools#0"
      ],
      "stack_out": [
        "userPoolsKey#0",
        "userPools#0"
      ]
    },
    "1532": {
      "op": "b createPool_ternary_merge@3"
    },
    "1535": {
      "subroutine": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.updatePoolStatus",
      "params": {
        "poolId#0": "uint64",
        "newStatus#0": "uint64"
      },
      "block": "updatePoolStatus",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1538": {
      "op": "frame_dig -2",
      "defined_out": [
        "poolId#0 (copy)"
      ],
      "stack_out": [
        "poolId#0 (copy)"
      ]
    },
    "1540": {
      "op": "itob",
      "defined_out": [
        "a#2"
      ],
      "stack_out": [
        "a#2"
      ]
    },
    "1541": {
      "op": "dup",
      "defined_out": [
        "a#2"
      ],
      "stack_out": [
        "a#2",
        "a#2"
      ]
    },
    "1542": {
      "op": "bytec 11 // \"_status\"",
      "defined_out": [
        "\"_status\"",
        "a#2"
      ],
      "stack_out": [
        "a#2",
        "a#2",
        "\"_status\""
      ]
    },
    "1544": {
      "op": "concat",
      "defined_out": [
        "a#2",
        "statusKey#0"
      ],
      "stack_out": [
        "a#2",
        "statusKey#0"
      ]
    },
    "1545": {
      "op": "dup",
      "defined_out": [
        "a#2",
        "statusKey#0",
        "statusKey#0 (copy)"
      ],
      "stack_out": [
        "a#2",
        "statusKey#0",
        "statusKey#0 (copy)"
      ]
    },
    "1546": {
      "op": "box_get",
      "defined_out": [
        "a#2",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "statusKey#0"
      ],
      "stack_out": [
        "a#2",
        "statusKey#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1547": {
      "op": "swap",
      "stack_out": [
        "a#2",
        "statusKey#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1548": {
      "op": "btoi",
      "defined_out": [
        "a#2",
        "maybe_exists%0#0",
        "oldStatus#0",
        "statusKey#0"
      ],
      "stack_out": [
        "a#2",
        "statusKey#0",
        "maybe_exists%0#0",
        "oldStatus#0"
      ]
    },
    "1549": {
      "op": "dup",
      "stack_out": [
        "a#2",
        "statusKey#0",
        "maybe_exists%0#0",
        "oldStatus#0",
        "oldStatus#0 (copy)"
      ]
    },
    "1550": {
      "op": "cover 2",
      "stack_out": [
        "a#2",
        "statusKey#0",
        "oldStatus#0",
        "maybe_exists%0#0",
        "oldStatus#0"
      ]
    },
    "1552": {
      "op": "cover 3",
      "defined_out": [
        "a#2",
        "maybe_exists%0#0",
        "oldStatus#0",
        "statusKey#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "statusKey#0",
        "oldStatus#0",
        "maybe_exists%0#0"
      ]
    },
    "1554": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "statusKey#0",
        "oldStatus#0"
      ]
    },
    "1555": {
      "op": "frame_dig -1",
      "defined_out": [
        "a#2",
        "newStatus#0 (copy)",
        "oldStatus#0",
        "statusKey#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "statusKey#0",
        "oldStatus#0",
        "newStatus#0 (copy)"
      ]
    },
    "1557": {
      "op": "itob",
      "defined_out": [
        "a#2",
        "new_box_value%0#0",
        "oldStatus#0",
        "statusKey#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "statusKey#0",
        "oldStatus#0",
        "new_box_value%0#0"
      ]
    },
    "1558": {
      "op": "uncover 2",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "oldStatus#0",
        "new_box_value%0#0",
        "statusKey#0"
      ]
    },
    "1560": {
      "op": "swap",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "oldStatus#0",
        "statusKey#0",
        "new_box_value%0#0"
      ]
    },
    "1561": {
      "op": "box_put",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "oldStatus#0"
      ]
    },
    "1562": {
      "op": "bnz updatePoolStatus_after_if_else@4",
      "stack_out": [
        "a#2",
        "oldStatus#0"
      ]
    },
    "1565": {
      "op": "frame_dig -1",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "newStatus#0 (copy)"
      ]
    },
    "1567": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "a#2",
        "newStatus#0 (copy)",
        "oldStatus#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "newStatus#0 (copy)",
        "1"
      ]
    },
    "1568": {
      "op": "==",
      "defined_out": [
        "a#2",
        "oldStatus#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "tmp%2#0"
      ]
    },
    "1569": {
      "op": "bnz updatePoolStatus_if_body@3",
      "stack_out": [
        "a#2",
        "oldStatus#0"
      ]
    },
    "1572": {
      "op": "frame_dig -1",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "newStatus#0 (copy)"
      ]
    },
    "1574": {
      "op": "pushint 2 // 2",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "newStatus#0 (copy)",
        "2"
      ]
    },
    "1576": {
      "op": "==",
      "defined_out": [
        "a#2",
        "oldStatus#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "tmp%3#0"
      ]
    },
    "1577": {
      "op": "bz updatePoolStatus_after_if_else@4",
      "stack_out": [
        "a#2",
        "oldStatus#0"
      ]
    },
    "1580": {
      "block": "updatePoolStatus_if_body@3",
      "stack_in": [
        "a#2",
        "oldStatus#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "a#2"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "a#2"
      ]
    },
    "1582": {
      "op": "bytec_2 // \"_totalStaked\"",
      "defined_out": [
        "\"_totalStaked\"",
        "a#2"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "a#2",
        "\"_totalStaked\""
      ]
    },
    "1583": {
      "op": "concat",
      "defined_out": [
        "a#2",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "tmp%0#2"
      ]
    },
    "1584": {
      "op": "box_get",
      "defined_out": [
        "a#2",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1585": {
      "op": "swap",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "1586": {
      "op": "btoi",
      "defined_out": [
        "a#2",
        "maybe_exists%1#0",
        "staked#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "maybe_exists%1#0",
        "staked#0"
      ]
    },
    "1587": {
      "op": "swap",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "staked#0",
        "maybe_exists%1#0"
      ]
    },
    "1588": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "staked#0"
      ]
    },
    "1589": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "a#2",
        "staked#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "staked#0",
        "0"
      ]
    },
    "1590": {
      "op": "bytec_0 // \"totalTVL\"",
      "defined_out": [
        "\"totalTVL\"",
        "0",
        "a#2",
        "staked#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "staked#0",
        "0",
        "\"totalTVL\""
      ]
    },
    "1591": {
      "op": "app_global_get_ex",
      "defined_out": [
        "a#2",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "staked#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "staked#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1592": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "staked#0",
        "maybe_value%2#0"
      ]
    },
    "1593": {
      "op": "swap",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "maybe_value%2#0",
        "staked#0"
      ]
    },
    "1594": {
      "op": "-",
      "defined_out": [
        "a#2",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "new_state_value%0#0"
      ]
    },
    "1595": {
      "op": "bytec_0 // \"totalTVL\"",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "new_state_value%0#0",
        "\"totalTVL\""
      ]
    },
    "1596": {
      "op": "swap",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "\"totalTVL\"",
        "new_state_value%0#0"
      ]
    },
    "1597": {
      "op": "app_global_put",
      "stack_out": [
        "a#2",
        "oldStatus#0"
      ]
    },
    "1598": {
      "block": "updatePoolStatus_after_if_else@4",
      "stack_in": [
        "a#2",
        "oldStatus#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "oldStatus#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "oldStatus#0"
      ]
    },
    "1600": {
      "op": "bz updatePoolStatus_after_if_else@7",
      "stack_out": [
        "a#2",
        "oldStatus#0"
      ]
    },
    "1603": {
      "op": "frame_dig -1",
      "defined_out": [
        "newStatus#0 (copy)",
        "oldStatus#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "newStatus#0 (copy)"
      ]
    },
    "1605": {
      "op": "bnz updatePoolStatus_after_if_else@7",
      "stack_out": [
        "a#2",
        "oldStatus#0"
      ]
    },
    "1608": {
      "op": "frame_dig 0",
      "defined_out": [
        "a#2",
        "oldStatus#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "a#2"
      ]
    },
    "1610": {
      "op": "bytec_2 // \"_totalStaked\"",
      "defined_out": [
        "\"_totalStaked\"",
        "a#2",
        "oldStatus#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "a#2",
        "\"_totalStaked\""
      ]
    },
    "1611": {
      "op": "concat",
      "defined_out": [
        "a#2",
        "oldStatus#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "tmp%0#2"
      ]
    },
    "1612": {
      "op": "box_get",
      "defined_out": [
        "a#2",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "oldStatus#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1613": {
      "op": "swap",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "1614": {
      "op": "btoi",
      "defined_out": [
        "a#2",
        "maybe_exists%3#0",
        "oldStatus#0",
        "staked\u2081#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "maybe_exists%3#0",
        "staked\u2081#0"
      ]
    },
    "1615": {
      "op": "swap",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "staked\u2081#0",
        "maybe_exists%3#0"
      ]
    },
    "1616": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "staked\u2081#0"
      ]
    },
    "1617": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "a#2",
        "oldStatus#0",
        "staked\u2081#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "staked\u2081#0",
        "0"
      ]
    },
    "1618": {
      "op": "bytec_0 // \"totalTVL\"",
      "defined_out": [
        "\"totalTVL\"",
        "0",
        "a#2",
        "oldStatus#0",
        "staked\u2081#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "staked\u2081#0",
        "0",
        "\"totalTVL\""
      ]
    },
    "1619": {
      "op": "app_global_get_ex",
      "defined_out": [
        "a#2",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "oldStatus#0",
        "staked\u2081#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "staked\u2081#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1620": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "staked\u2081#0",
        "maybe_value%4#0"
      ]
    },
    "1621": {
      "op": "+",
      "defined_out": [
        "a#2",
        "new_state_value%1#0",
        "oldStatus#0"
      ],
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "new_state_value%1#0"
      ]
    },
    "1622": {
      "op": "bytec_0 // \"totalTVL\"",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "new_state_value%1#0",
        "\"totalTVL\""
      ]
    },
    "1623": {
      "op": "swap",
      "stack_out": [
        "a#2",
        "oldStatus#0",
        "\"totalTVL\"",
        "new_state_value%1#0"
      ]
    },
    "1624": {
      "op": "app_global_put",
      "stack_out": [
        "a#2",
        "oldStatus#0"
      ]
    },
    "1625": {
      "block": "updatePoolStatus_after_if_else@7",
      "stack_in": [
        "a#2",
        "oldStatus#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1626": {
      "subroutine": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.updatePoolMetrics",
      "params": {
        "poolId#0": "uint64",
        "totalStaked#0": "uint64",
        "totalRewards#0": "uint64",
        "participantCount#0": "uint64",
        "apy#0": "uint64"
      },
      "block": "updatePoolMetrics",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "1629": {
      "op": "frame_dig -5",
      "defined_out": [
        "poolId#0 (copy)"
      ],
      "stack_out": [
        "poolId#0 (copy)"
      ]
    },
    "1631": {
      "op": "itob",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "1632": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1633": {
      "op": "bytec_2 // \"_totalStaked\"",
      "defined_out": [
        "\"_totalStaked\"",
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)",
        "\"_totalStaked\""
      ]
    },
    "1634": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#0",
        "tmp%0#2"
      ]
    },
    "1635": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "a#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1636": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#0",
        "tmp%0#2",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1637": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "tmp%0#2",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1638": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%0#0",
        "oldStaked#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#0",
        "tmp%0#2",
        "maybe_exists%0#0",
        "oldStaked#0"
      ]
    },
    "1639": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "tmp%0#2",
        "oldStaked#0",
        "maybe_exists%0#0"
      ]
    },
    "1640": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "tmp%0#2",
        "oldStaked#0"
      ]
    },
    "1641": {
      "op": "frame_dig -4",
      "defined_out": [
        "a#0",
        "oldStaked#0",
        "tmp%0#2",
        "totalStaked#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "tmp%0#2",
        "oldStaked#0",
        "totalStaked#0 (copy)"
      ]
    },
    "1643": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "new_box_value%0#0",
        "oldStaked#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#0",
        "tmp%0#2",
        "oldStaked#0",
        "new_box_value%0#0"
      ]
    },
    "1644": {
      "op": "uncover 2",
      "stack_out": [
        "a#0",
        "oldStaked#0",
        "new_box_value%0#0",
        "tmp%0#2"
      ]
    },
    "1646": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "oldStaked#0",
        "tmp%0#2",
        "new_box_value%0#0"
      ]
    },
    "1647": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "oldStaked#0"
      ]
    },
    "1648": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "oldStaked#0",
        "a#0 (copy)"
      ]
    },
    "1650": {
      "op": "bytec 12 // \"_totalRewards\"",
      "defined_out": [
        "\"_totalRewards\"",
        "a#0",
        "a#0 (copy)",
        "oldStaked#0"
      ],
      "stack_out": [
        "a#0",
        "oldStaked#0",
        "a#0 (copy)",
        "\"_totalRewards\""
      ]
    },
    "1652": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "oldStaked#0",
        "tmp%0#2"
      ]
    },
    "1653": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0",
        "oldStaked#0",
        "tmp%0#2",
        "totalRewards#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "oldStaked#0",
        "tmp%0#2",
        "totalRewards#0 (copy)"
      ]
    },
    "1655": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "new_box_value%1#0",
        "oldStaked#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#0",
        "oldStaked#0",
        "tmp%0#2",
        "new_box_value%1#0"
      ]
    },
    "1656": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "oldStaked#0"
      ]
    },
    "1657": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "oldStaked#0",
        "a#0 (copy)"
      ]
    },
    "1659": {
      "op": "bytec 13 // \"_participantCount\"",
      "defined_out": [
        "\"_participantCount\"",
        "a#0",
        "a#0 (copy)",
        "oldStaked#0"
      ],
      "stack_out": [
        "a#0",
        "oldStaked#0",
        "a#0 (copy)",
        "\"_participantCount\""
      ]
    },
    "1661": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "oldStaked#0",
        "tmp%0#2"
      ]
    },
    "1662": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "oldStaked#0",
        "participantCount#0 (copy)",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#0",
        "oldStaked#0",
        "tmp%0#2",
        "participantCount#0 (copy)"
      ]
    },
    "1664": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "new_box_value%2#0",
        "oldStaked#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#0",
        "oldStaked#0",
        "tmp%0#2",
        "new_box_value%2#0"
      ]
    },
    "1665": {
      "op": "box_put",
      "stack_out": [
        "a#0",
        "oldStaked#0"
      ]
    },
    "1666": {
      "op": "swap",
      "stack_out": [
        "oldStaked#0",
        "a#0"
      ]
    },
    "1667": {
      "op": "bytec 14 // \"_apy\"",
      "defined_out": [
        "\"_apy\"",
        "a#0",
        "oldStaked#0"
      ],
      "stack_out": [
        "oldStaked#0",
        "a#0",
        "\"_apy\""
      ]
    },
    "1669": {
      "op": "concat",
      "stack_out": [
        "oldStaked#0",
        "tmp%0#2"
      ]
    },
    "1670": {
      "op": "frame_dig -1",
      "defined_out": [
        "apy#0 (copy)",
        "oldStaked#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "oldStaked#0",
        "tmp%0#2",
        "apy#0 (copy)"
      ]
    },
    "1672": {
      "op": "itob",
      "defined_out": [
        "new_box_value%3#0",
        "oldStaked#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "oldStaked#0",
        "tmp%0#2",
        "new_box_value%3#0"
      ]
    },
    "1673": {
      "op": "box_put",
      "stack_out": [
        "oldStaked#0"
      ]
    },
    "1674": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "oldStaked#0"
      ],
      "stack_out": [
        "oldStaked#0",
        "0"
      ]
    },
    "1675": {
      "op": "bytec_0 // \"totalTVL\"",
      "defined_out": [
        "\"totalTVL\"",
        "0",
        "oldStaked#0"
      ],
      "stack_out": [
        "oldStaked#0",
        "0",
        "\"totalTVL\""
      ]
    },
    "1676": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "oldStaked#0"
      ],
      "stack_out": [
        "oldStaked#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1677": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "oldStaked#0",
        "maybe_value%1#0"
      ]
    },
    "1678": {
      "op": "swap",
      "stack_out": [
        "maybe_value%1#0",
        "oldStaked#0"
      ]
    },
    "1679": {
      "op": "-",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1680": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%10#0",
        "totalStaked#0 (copy)"
      ]
    },
    "1682": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1683": {
      "op": "bytec_0 // \"totalTVL\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalTVL\""
      ]
    },
    "1684": {
      "op": "swap",
      "stack_out": [
        "\"totalTVL\"",
        "new_state_value%0#0"
      ]
    },
    "1685": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1686": {
      "retsub": true,
      "op": "retsub"
    },
    "1687": {
      "subroutine": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.addPoolTemplate",
      "params": {
        "name#0": "bytes",
        "stakingTemplate#0": "bytes",
        "distributorTemplate#0": "bytes",
        "compounderTemplate#0": "bytes",
        "defaultParams#0": "bytes"
      },
      "block": "addPoolTemplate",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "1690": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1692": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1693": {
      "op": "bytec_1 // \"factoryOwner\"",
      "defined_out": [
        "\"factoryOwner\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"factoryOwner\""
      ]
    },
    "1694": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1695": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1696": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1697": {
      "op": "assert",
      "stack_out": []
    },
    "1698": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1699": {
      "op": "bytec 9 // \"templateCount\"",
      "defined_out": [
        "\"templateCount\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"templateCount\""
      ]
    },
    "1701": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1702": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1703": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "1704": {
      "op": "+",
      "defined_out": [
        "templateId#0"
      ],
      "stack_out": [
        "templateId#0"
      ]
    },
    "1705": {
      "op": "dup",
      "defined_out": [
        "templateId#0"
      ],
      "stack_out": [
        "templateId#0",
        "templateId#0"
      ]
    },
    "1706": {
      "op": "bytec 9 // \"templateCount\"",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "\"templateCount\""
      ]
    },
    "1708": {
      "op": "dig 1",
      "defined_out": [
        "\"templateCount\"",
        "templateId#0",
        "templateId#0 (copy)"
      ],
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "\"templateCount\"",
        "templateId#0 (copy)"
      ]
    },
    "1710": {
      "op": "app_global_put",
      "stack_out": [
        "templateId#0",
        "templateId#0"
      ]
    },
    "1711": {
      "op": "dup",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "templateId#0 (copy)"
      ]
    },
    "1712": {
      "op": "itob",
      "defined_out": [
        "a#0",
        "templateId#0"
      ],
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0"
      ]
    },
    "1713": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)",
        "templateId#0"
      ],
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1714": {
      "op": "bytec 15 // \"_name\"",
      "defined_out": [
        "\"_name\"",
        "a#0",
        "a#0 (copy)",
        "templateId#0"
      ],
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "a#0 (copy)",
        "\"_name\""
      ]
    },
    "1716": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "templateId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1717": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "templateId#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ],
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1718": {
      "op": "box_del",
      "defined_out": [
        "a#0",
        "templateId#0",
        "tmp%0#2",
        "{box_del}"
      ],
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2",
        "{box_del}"
      ]
    },
    "1719": {
      "op": "pop",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1720": {
      "op": "frame_dig -5",
      "defined_out": [
        "a#0",
        "name#0 (copy)",
        "templateId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2",
        "name#0 (copy)"
      ]
    },
    "1722": {
      "op": "box_put",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0"
      ]
    },
    "1723": {
      "op": "dup",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1724": {
      "op": "bytec 29 // \"_stakingContractTemplate\"",
      "defined_out": [
        "\"_stakingContractTemplate\"",
        "a#0",
        "a#0 (copy)",
        "templateId#0"
      ],
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "a#0 (copy)",
        "\"_stakingContractTemplate\""
      ]
    },
    "1726": {
      "op": "concat",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1727": {
      "op": "dup",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1728": {
      "op": "box_del",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2",
        "{box_del}"
      ]
    },
    "1729": {
      "op": "pop",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1730": {
      "op": "frame_dig -4",
      "defined_out": [
        "a#0",
        "stakingTemplate#0 (copy)",
        "templateId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2",
        "stakingTemplate#0 (copy)"
      ]
    },
    "1732": {
      "op": "box_put",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0"
      ]
    },
    "1733": {
      "op": "dup",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1734": {
      "op": "bytec 30 // \"_rewardDistributorTemplate\"",
      "defined_out": [
        "\"_rewardDistributorTemplate\"",
        "a#0",
        "a#0 (copy)",
        "templateId#0"
      ],
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "a#0 (copy)",
        "\"_rewardDistributorTemplate\""
      ]
    },
    "1736": {
      "op": "concat",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1737": {
      "op": "dup",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1738": {
      "op": "box_del",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2",
        "{box_del}"
      ]
    },
    "1739": {
      "op": "pop",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1740": {
      "op": "frame_dig -3",
      "defined_out": [
        "a#0",
        "distributorTemplate#0 (copy)",
        "templateId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2",
        "distributorTemplate#0 (copy)"
      ]
    },
    "1742": {
      "op": "box_put",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0"
      ]
    },
    "1743": {
      "op": "dup",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1744": {
      "op": "bytec 31 // \"_autoCompounderTemplate\"",
      "defined_out": [
        "\"_autoCompounderTemplate\"",
        "a#0",
        "a#0 (copy)",
        "templateId#0"
      ],
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "a#0 (copy)",
        "\"_autoCompounderTemplate\""
      ]
    },
    "1746": {
      "op": "concat",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1747": {
      "op": "dup",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1748": {
      "op": "box_del",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2",
        "{box_del}"
      ]
    },
    "1749": {
      "op": "pop",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2"
      ]
    },
    "1750": {
      "op": "frame_dig -2",
      "defined_out": [
        "a#0",
        "compounderTemplate#0 (copy)",
        "templateId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "tmp%0#2",
        "compounderTemplate#0 (copy)"
      ]
    },
    "1752": {
      "op": "box_put",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0"
      ]
    },
    "1753": {
      "op": "bytec 32 // \"_defaultParameters\"",
      "defined_out": [
        "\"_defaultParameters\"",
        "a#0",
        "templateId#0"
      ],
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "a#0",
        "\"_defaultParameters\""
      ]
    },
    "1755": {
      "op": "concat",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "tmp%0#2"
      ]
    },
    "1756": {
      "op": "dup",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "tmp%0#2",
        "tmp%0#2 (copy)"
      ]
    },
    "1757": {
      "op": "box_del",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "tmp%0#2",
        "{box_del}"
      ]
    },
    "1758": {
      "op": "pop",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "tmp%0#2"
      ]
    },
    "1759": {
      "op": "frame_dig -1",
      "defined_out": [
        "defaultParams#0 (copy)",
        "templateId#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "tmp%0#2",
        "defaultParams#0 (copy)"
      ]
    },
    "1761": {
      "op": "box_put",
      "stack_out": [
        "templateId#0",
        "templateId#0"
      ]
    },
    "1762": {
      "op": "intc_1 // 1",
      "stack_out": [
        "templateId#0",
        "templateId#0",
        "1"
      ]
    },
    "1763": {
      "op": "==",
      "defined_out": [
        "templateId#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "templateId#0",
        "tmp%12#0"
      ]
    },
    "1764": {
      "op": "bz addPoolTemplate_after_if_else@2",
      "stack_out": [
        "templateId#0"
      ]
    },
    "1767": {
      "op": "bytec 10 // \"defaultTemplate\"",
      "defined_out": [
        "\"defaultTemplate\"",
        "templateId#0"
      ],
      "stack_out": [
        "templateId#0",
        "\"defaultTemplate\""
      ]
    },
    "1769": {
      "op": "frame_dig 0",
      "stack_out": [
        "templateId#0",
        "\"defaultTemplate\"",
        "templateId#0"
      ]
    },
    "1771": {
      "op": "app_global_put",
      "stack_out": [
        "templateId#0"
      ]
    },
    "1772": {
      "block": "addPoolTemplate_after_if_else@2",
      "stack_in": [
        "templateId#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "templateId#0"
      ],
      "stack_out": [
        "templateId#0",
        "templateId#0"
      ]
    },
    "1774": {
      "op": "swap"
    },
    "1775": {
      "retsub": true,
      "op": "retsub"
    },
    "1776": {
      "subroutine": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.setDefaultTemplate",
      "params": {
        "templateId#0": "uint64"
      },
      "block": "setDefaultTemplate",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1779": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1781": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1782": {
      "op": "bytec_1 // \"factoryOwner\"",
      "defined_out": [
        "\"factoryOwner\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"factoryOwner\""
      ]
    },
    "1783": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1784": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1785": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1786": {
      "op": "assert",
      "stack_out": []
    },
    "1787": {
      "op": "frame_dig -1",
      "defined_out": [
        "templateId#0 (copy)"
      ],
      "stack_out": [
        "templateId#0 (copy)"
      ]
    },
    "1789": {
      "op": "itob",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "1790": {
      "op": "bytec 15 // \"_name\"",
      "defined_out": [
        "\"_name\"",
        "a#0"
      ],
      "stack_out": [
        "a#0",
        "\"_name\""
      ]
    },
    "1792": {
      "op": "concat",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "1793": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1794": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "1796": {
      "op": "assert",
      "stack_out": []
    },
    "1797": {
      "op": "bytec 10 // \"defaultTemplate\"",
      "defined_out": [
        "\"defaultTemplate\""
      ],
      "stack_out": [
        "\"defaultTemplate\""
      ]
    },
    "1799": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"defaultTemplate\"",
        "templateId#0 (copy)"
      ]
    },
    "1801": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1802": {
      "retsub": true,
      "op": "retsub"
    },
    "1803": {
      "subroutine": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.updateFactorySettings",
      "params": {
        "newCreationFee#0": "uint64",
        "newFactoryFee#0": "uint64",
        "newMaxPools#0": "uint64",
        "newMinStake#0": "uint64"
      },
      "block": "updateFactorySettings",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "1806": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1808": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1809": {
      "op": "bytec_1 // \"factoryOwner\"",
      "defined_out": [
        "\"factoryOwner\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"factoryOwner\""
      ]
    },
    "1810": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1811": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1812": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1813": {
      "op": "assert",
      "stack_out": []
    },
    "1814": {
      "op": "bytec 16 // \"poolCreationFee\"",
      "defined_out": [
        "\"poolCreationFee\""
      ],
      "stack_out": [
        "\"poolCreationFee\""
      ]
    },
    "1816": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"poolCreationFee\"",
        "newCreationFee#0 (copy)"
      ],
      "stack_out": [
        "\"poolCreationFee\"",
        "newCreationFee#0 (copy)"
      ]
    },
    "1818": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1819": {
      "op": "bytec 17 // \"factoryFeeRate\"",
      "defined_out": [
        "\"factoryFeeRate\""
      ],
      "stack_out": [
        "\"factoryFeeRate\""
      ]
    },
    "1821": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"factoryFeeRate\"",
        "newFactoryFee#0 (copy)"
      ],
      "stack_out": [
        "\"factoryFeeRate\"",
        "newFactoryFee#0 (copy)"
      ]
    },
    "1823": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1824": {
      "op": "bytec 7 // \"maxPoolsPerUser\"",
      "defined_out": [
        "\"maxPoolsPerUser\""
      ],
      "stack_out": [
        "\"maxPoolsPerUser\""
      ]
    },
    "1826": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"maxPoolsPerUser\"",
        "newMaxPools#0 (copy)"
      ],
      "stack_out": [
        "\"maxPoolsPerUser\"",
        "newMaxPools#0 (copy)"
      ]
    },
    "1828": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1829": {
      "op": "bytec 8 // \"minimumInitialStake\"",
      "defined_out": [
        "\"minimumInitialStake\""
      ],
      "stack_out": [
        "\"minimumInitialStake\""
      ]
    },
    "1831": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"minimumInitialStake\"",
        "newMinStake#0 (copy)"
      ],
      "stack_out": [
        "\"minimumInitialStake\"",
        "newMinStake#0 (copy)"
      ]
    },
    "1833": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1834": {
      "retsub": true,
      "op": "retsub"
    },
    "1835": {
      "subroutine": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.emergencyPauseFactory",
      "params": {},
      "block": "emergencyPauseFactory",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1837": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1838": {
      "op": "bytec_1 // \"factoryOwner\"",
      "defined_out": [
        "\"factoryOwner\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"factoryOwner\""
      ]
    },
    "1839": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1840": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1841": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1842": {
      "op": "assert",
      "stack_out": []
    },
    "1843": {
      "op": "bytec 4 // \"emergencyPause\"",
      "defined_out": [
        "\"emergencyPause\""
      ],
      "stack_out": [
        "\"emergencyPause\""
      ]
    },
    "1845": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"emergencyPause\"",
        "1"
      ],
      "stack_out": [
        "\"emergencyPause\"",
        "1"
      ]
    },
    "1846": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1847": {
      "retsub": true,
      "op": "retsub"
    },
    "1848": {
      "subroutine": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.resumeFactory",
      "params": {},
      "block": "resumeFactory",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1850": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1851": {
      "op": "bytec_1 // \"factoryOwner\"",
      "defined_out": [
        "\"factoryOwner\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"factoryOwner\""
      ]
    },
    "1852": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1853": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1854": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1855": {
      "op": "assert",
      "stack_out": []
    },
    "1856": {
      "op": "bytec 4 // \"emergencyPause\"",
      "defined_out": [
        "\"emergencyPause\""
      ],
      "stack_out": [
        "\"emergencyPause\""
      ]
    },
    "1858": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"emergencyPause\"",
        "0"
      ]
    },
    "1859": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1860": {
      "retsub": true,
      "op": "retsub"
    },
    "1861": {
      "subroutine": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.setGovernanceContract",
      "params": {
        "governanceAddr#0": "bytes"
      },
      "block": "setGovernanceContract",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1864": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1866": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1867": {
      "op": "bytec_1 // \"factoryOwner\"",
      "defined_out": [
        "\"factoryOwner\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"factoryOwner\""
      ]
    },
    "1868": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1869": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1870": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1871": {
      "op": "assert",
      "stack_out": []
    },
    "1872": {
      "op": "pushbytes \"governanceContract\"",
      "defined_out": [
        "\"governanceContract\""
      ],
      "stack_out": [
        "\"governanceContract\""
      ]
    },
    "1892": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"governanceContract\"",
        "governanceAddr#0 (copy)"
      ],
      "stack_out": [
        "\"governanceContract\"",
        "governanceAddr#0 (copy)"
      ]
    },
    "1894": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1895": {
      "retsub": true,
      "op": "retsub"
    },
    "1896": {
      "subroutine": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.getPoolInfo",
      "params": {
        "poolId#0": "uint64"
      },
      "block": "getPoolInfo",
      "stack_in": [],
      "op": "proto 1 17"
    },
    "1899": {
      "op": "frame_dig -1",
      "defined_out": [
        "poolId#0 (copy)"
      ],
      "stack_out": [
        "poolId#0 (copy)"
      ]
    },
    "1901": {
      "op": "itob",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "1902": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "1903": {
      "op": "bytec 18 // \"_assetId\"",
      "defined_out": [
        "\"_assetId\"",
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)",
        "\"_assetId\""
      ]
    },
    "1905": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#0",
        "tmp%0#2"
      ]
    },
    "1906": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1907": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ]
    },
    "1908": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_exists%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1909": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1910": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1911": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "a#0 (copy)"
      ]
    },
    "1913": {
      "op": "bytec 19 // \"_stakingContract\"",
      "defined_out": [
        "\"_stakingContract\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "a#0 (copy)",
        "\"_stakingContract\""
      ]
    },
    "1915": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "tmp%0#2"
      ]
    },
    "1916": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1917": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0"
      ]
    },
    "1918": {
      "op": "dig 2",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "a#0 (copy)"
      ]
    },
    "1920": {
      "op": "bytec 20 // \"_rewardDistributor\"",
      "defined_out": [
        "\"_rewardDistributor\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "a#0 (copy)",
        "\"_rewardDistributor\""
      ]
    },
    "1922": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "tmp%0#2"
      ]
    },
    "1923": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1924": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1925": {
      "op": "dig 3",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "a#0 (copy)"
      ]
    },
    "1927": {
      "op": "bytec 21 // \"_autoCompounder\"",
      "defined_out": [
        "\"_autoCompounder\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "a#0 (copy)",
        "\"_autoCompounder\""
      ]
    },
    "1929": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%0#2"
      ]
    },
    "1930": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1931": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "1932": {
      "op": "dig 4",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "a#0 (copy)"
      ]
    },
    "1934": {
      "op": "bytec 22 // \"_governanceVault\"",
      "defined_out": [
        "\"_governanceVault\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "a#0 (copy)",
        "\"_governanceVault\""
      ]
    },
    "1936": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "tmp%0#2"
      ]
    },
    "1937": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%4#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1938": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "1939": {
      "op": "dig 5",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "a#0 (copy)"
      ]
    },
    "1941": {
      "op": "bytec 23 // \"_creator\"",
      "defined_out": [
        "\"_creator\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "a#0 (copy)",
        "\"_creator\""
      ]
    },
    "1943": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "tmp%0#2"
      ]
    },
    "1944": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%5#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1945": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "1946": {
      "op": "dig 6",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "a#0 (copy)"
      ]
    },
    "1948": {
      "op": "bytec 24 // \"_createdAt\"",
      "defined_out": [
        "\"_createdAt\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "a#0 (copy)",
        "\"_createdAt\""
      ]
    },
    "1950": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "tmp%0#2"
      ]
    },
    "1951": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%6#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1952": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ]
    },
    "1953": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%6#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%6#0",
        "maybe_value_converted%1#0"
      ]
    },
    "1954": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_exists%6#0"
      ]
    },
    "1955": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0"
      ]
    },
    "1956": {
      "op": "dig 7",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "a#0 (copy)"
      ]
    },
    "1958": {
      "op": "bytec 11 // \"_status\"",
      "defined_out": [
        "\"_status\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "a#0 (copy)",
        "\"_status\""
      ]
    },
    "1960": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "tmp%0#2"
      ]
    },
    "1961": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%7#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%7#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1962": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ]
    },
    "1963": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%7#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_exists%7#0",
        "maybe_value_converted%2#0"
      ]
    },
    "1964": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_exists%7#0"
      ]
    },
    "1965": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0"
      ]
    },
    "1966": {
      "op": "dig 8",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "a#0 (copy)"
      ]
    },
    "1968": {
      "op": "bytec_2 // \"_totalStaked\"",
      "defined_out": [
        "\"_totalStaked\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "a#0 (copy)",
        "\"_totalStaked\""
      ]
    },
    "1969": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "tmp%0#2"
      ]
    },
    "1970": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%8#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%8#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "1971": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ]
    },
    "1972": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%8#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_exists%8#0",
        "maybe_value_converted%3#0"
      ]
    },
    "1973": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_exists%8#0"
      ]
    },
    "1974": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0"
      ]
    },
    "1975": {
      "op": "dig 9",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "a#0 (copy)"
      ]
    },
    "1977": {
      "op": "bytec 12 // \"_totalRewards\"",
      "defined_out": [
        "\"_totalRewards\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "a#0 (copy)",
        "\"_totalRewards\""
      ]
    },
    "1979": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "tmp%0#2"
      ]
    },
    "1980": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%9#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%9#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "1981": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ]
    },
    "1982": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%9#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_exists%9#0",
        "maybe_value_converted%4#0"
      ]
    },
    "1983": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_exists%9#0"
      ]
    },
    "1984": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0"
      ]
    },
    "1985": {
      "op": "dig 10",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "a#0 (copy)"
      ]
    },
    "1987": {
      "op": "bytec 13 // \"_participantCount\"",
      "defined_out": [
        "\"_participantCount\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "a#0 (copy)",
        "\"_participantCount\""
      ]
    },
    "1989": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "tmp%0#2"
      ]
    },
    "1990": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%10#0",
        "maybe_value%1#0",
        "maybe_value%10#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "1991": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_exists%10#0",
        "maybe_value%10#0"
      ]
    },
    "1992": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%10#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_exists%10#0",
        "maybe_value_converted%5#0"
      ]
    },
    "1993": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_exists%10#0"
      ]
    },
    "1994": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0"
      ]
    },
    "1995": {
      "op": "dig 11",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "a#0 (copy)"
      ]
    },
    "1997": {
      "op": "bytec 14 // \"_apy\"",
      "defined_out": [
        "\"_apy\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "a#0 (copy)",
        "\"_apy\""
      ]
    },
    "1999": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "tmp%0#2"
      ]
    },
    "2000": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%11#0",
        "maybe_value%1#0",
        "maybe_value%11#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "2001": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_exists%11#0",
        "maybe_value%11#0"
      ]
    },
    "2002": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%11#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_exists%11#0",
        "maybe_value_converted%6#0"
      ]
    },
    "2003": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_exists%11#0"
      ]
    },
    "2004": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0"
      ]
    },
    "2005": {
      "op": "dig 12",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "a#0 (copy)"
      ]
    },
    "2007": {
      "op": "bytec 25 // \"_minimumStake\"",
      "defined_out": [
        "\"_minimumStake\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "a#0 (copy)",
        "\"_minimumStake\""
      ]
    },
    "2009": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "tmp%0#2"
      ]
    },
    "2010": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%12#0",
        "maybe_value%1#0",
        "maybe_value%12#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value%12#0",
        "maybe_exists%12#0"
      ]
    },
    "2011": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_exists%12#0",
        "maybe_value%12#0"
      ]
    },
    "2012": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%12#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_exists%12#0",
        "maybe_value_converted%7#0"
      ]
    },
    "2013": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_exists%12#0"
      ]
    },
    "2014": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0"
      ]
    },
    "2015": {
      "op": "dig 13",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "a#0 (copy)"
      ]
    },
    "2017": {
      "op": "bytec 26 // \"_maxStakePerUser\"",
      "defined_out": [
        "\"_maxStakePerUser\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "a#0 (copy)",
        "\"_maxStakePerUser\""
      ]
    },
    "2019": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "tmp%0#2"
      ]
    },
    "2020": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%13#0",
        "maybe_value%1#0",
        "maybe_value%13#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value%13#0",
        "maybe_exists%13#0"
      ]
    },
    "2021": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_exists%13#0",
        "maybe_value%13#0"
      ]
    },
    "2022": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%13#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_exists%13#0",
        "maybe_value_converted%8#0"
      ]
    },
    "2023": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_exists%13#0"
      ]
    },
    "2024": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0"
      ]
    },
    "2025": {
      "op": "dig 14",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "a#0 (copy)"
      ]
    },
    "2027": {
      "op": "bytec 27 // \"_lockupPeriod\"",
      "defined_out": [
        "\"_lockupPeriod\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "a#0 (copy)",
        "\"_lockupPeriod\""
      ]
    },
    "2029": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "tmp%0#2"
      ]
    },
    "2030": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%14#0",
        "maybe_value%1#0",
        "maybe_value%14#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_value%14#0",
        "maybe_exists%14#0"
      ]
    },
    "2031": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_exists%14#0",
        "maybe_value%14#0"
      ]
    },
    "2032": {
      "op": "btoi",
      "defined_out": [
        "a#0",
        "maybe_exists%14#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_value_converted%9#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_exists%14#0",
        "maybe_value_converted%9#0"
      ]
    },
    "2033": {
      "op": "swap",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_value_converted%9#0",
        "maybe_exists%14#0"
      ]
    },
    "2034": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_value_converted%9#0"
      ]
    },
    "2035": {
      "op": "uncover 15",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_value_converted%9#0",
        "a#0"
      ]
    },
    "2037": {
      "op": "bytec 28 // \"_earlyWithdrawPenalty\"",
      "defined_out": [
        "\"_earlyWithdrawPenalty\"",
        "a#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_value_converted%9#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_value_converted%9#0",
        "a#0",
        "\"_earlyWithdrawPenalty\""
      ]
    },
    "2039": {
      "op": "concat",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_value_converted%9#0",
        "tmp%0#2"
      ]
    },
    "2040": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%15#0",
        "maybe_value%1#0",
        "maybe_value%15#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_value_converted%9#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_value_converted%9#0",
        "maybe_value%15#0",
        "maybe_exists%15#0"
      ]
    },
    "2041": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_value_converted%9#0",
        "maybe_exists%15#0",
        "maybe_value%15#0"
      ]
    },
    "2042": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%15#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%0#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%10#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_value_converted%9#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_value_converted%9#0",
        "maybe_exists%15#0",
        "maybe_value_converted%10#0"
      ]
    },
    "2043": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_value_converted%9#0",
        "maybe_value_converted%10#0",
        "maybe_exists%15#0"
      ]
    },
    "2044": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_value_converted%9#0",
        "maybe_value_converted%10#0"
      ]
    },
    "2045": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_value_converted%9#0",
        "maybe_value_converted%10#0",
        "poolId#0 (copy)"
      ]
    },
    "2047": {
      "op": "cover 16",
      "stack_out": [
        "poolId#0 (copy)",
        "maybe_value_converted%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value_converted%1#0",
        "maybe_value_converted%2#0",
        "maybe_value_converted%3#0",
        "maybe_value_converted%4#0",
        "maybe_value_converted%5#0",
        "maybe_value_converted%6#0",
        "maybe_value_converted%7#0",
        "maybe_value_converted%8#0",
        "maybe_value_converted%9#0",
        "maybe_value_converted%10#0"
      ]
    },
    "2049": {
      "retsub": true,
      "op": "retsub"
    },
    "2050": {
      "subroutine": "smart_contracts/vault/vault_factory.algo.ts::VaultFactory.getTemplate",
      "params": {
        "templateId#0": "uint64"
      },
      "block": "getTemplate",
      "stack_in": [],
      "op": "proto 1 5"
    },
    "2053": {
      "op": "frame_dig -1",
      "defined_out": [
        "templateId#0 (copy)"
      ],
      "stack_out": [
        "templateId#0 (copy)"
      ]
    },
    "2055": {
      "op": "itob",
      "defined_out": [
        "a#0"
      ],
      "stack_out": [
        "a#0"
      ]
    },
    "2056": {
      "op": "dup",
      "defined_out": [
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)"
      ]
    },
    "2057": {
      "op": "bytec 15 // \"_name\"",
      "defined_out": [
        "\"_name\"",
        "a#0",
        "a#0 (copy)"
      ],
      "stack_out": [
        "a#0",
        "a#0 (copy)",
        "\"_name\""
      ]
    },
    "2059": {
      "op": "concat",
      "defined_out": [
        "a#0",
        "tmp%0#2"
      ],
      "stack_out": [
        "a#0",
        "tmp%0#2"
      ]
    },
    "2060": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2061": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value%0#0"
      ]
    },
    "2062": {
      "op": "dig 1",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "a#0 (copy)"
      ]
    },
    "2064": {
      "op": "bytec 29 // \"_stakingContractTemplate\"",
      "defined_out": [
        "\"_stakingContractTemplate\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "a#0 (copy)",
        "\"_stakingContractTemplate\""
      ]
    },
    "2066": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "tmp%0#2"
      ]
    },
    "2067": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2068": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "2069": {
      "op": "dig 2",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "a#0 (copy)"
      ]
    },
    "2071": {
      "op": "bytec 30 // \"_rewardDistributorTemplate\"",
      "defined_out": [
        "\"_rewardDistributorTemplate\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "a#0 (copy)",
        "\"_rewardDistributorTemplate\""
      ]
    },
    "2073": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "tmp%0#2"
      ]
    },
    "2074": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2075": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "2076": {
      "op": "dig 3",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "a#0 (copy)"
      ]
    },
    "2078": {
      "op": "bytec 31 // \"_autoCompounderTemplate\"",
      "defined_out": [
        "\"_autoCompounderTemplate\"",
        "a#0",
        "a#0 (copy)",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "a#0 (copy)",
        "\"_autoCompounderTemplate\""
      ]
    },
    "2080": {
      "op": "concat",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "tmp%0#2"
      ]
    },
    "2081": {
      "op": "box_get",
      "defined_out": [
        "a#0",
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2082": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "2083": {
      "op": "uncover 4",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "a#0"
      ]
    },
    "2085": {
      "op": "bytec 32 // \"_defaultParameters\"",
      "defined_out": [
        "\"_defaultParameters\"",
        "a#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "a#0",
        "\"_defaultParameters\""
      ]
    },
    "2087": {
      "op": "concat",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "tmp%0#2"
      ]
    },
    "2088": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2089": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "2090": {
      "retsub": true,
      "op": "retsub"
    }
  }
}