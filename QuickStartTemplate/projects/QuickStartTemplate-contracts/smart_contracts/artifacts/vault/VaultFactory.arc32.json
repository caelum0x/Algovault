{
    "hints": {
        "initialize(uint64,uint64,byte[],uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updatePoolStatus(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setDefaultTemplate(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateFactorySettings(uint64,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "emergencyPauseFactory()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "resumeFactory()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setGovernanceContract(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 10
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "defaultTemplate": {
                    "type": "uint64",
                    "key": "defaultTemplate"
                },
                "emergencyPause": {
                    "type": "uint64",
                    "key": "emergencyPause"
                },
                "factoryActive": {
                    "type": "uint64",
                    "key": "factoryActive"
                },
                "factoryFeeRate": {
                    "type": "uint64",
                    "key": "factoryFeeRate"
                },
                "factoryOwner": {
                    "type": "bytes",
                    "key": "factoryOwner"
                },
                "feeCollector": {
                    "type": "bytes",
                    "key": "feeCollector"
                },
                "governanceContract": {
                    "type": "bytes",
                    "key": "governanceContract"
                },
                "maxPoolsPerUser": {
                    "type": "uint64",
                    "key": "maxPoolsPerUser"
                },
                "minimumInitialStake": {
                    "type": "uint64",
                    "key": "minimumInitialStake"
                },
                "poolCount": {
                    "type": "uint64",
                    "key": "poolCount"
                },
                "poolCreationFee": {
                    "type": "uint64",
                    "key": "poolCreationFee"
                },
                "templateCount": {
                    "type": "uint64",
                    "key": "templateCount"
                },
                "totalTVL": {
                    "type": "uint64",
                    "key": "totalTVL"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "VaultFactory",
        "methods": [
            {
                "name": "initialize",
                "args": [
                    {
                        "type": "uint64",
                        "name": "poolCreationFee"
                    },
                    {
                        "type": "uint64",
                        "name": "factoryFeeRate"
                    },
                    {
                        "type": "byte[]",
                        "name": "feeCollector"
                    },
                    {
                        "type": "uint64",
                        "name": "maxPoolsPerUser"
                    },
                    {
                        "type": "uint64",
                        "name": "minimumInitialStake"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "createPool",
                "args": [
                    {
                        "type": "uint64",
                        "name": "assetId"
                    },
                    {
                        "type": "uint64",
                        "name": "initialRewardPool"
                    },
                    {
                        "type": "uint64",
                        "name": "rewardRate"
                    },
                    {
                        "type": "uint64",
                        "name": "minimumStake"
                    },
                    {
                        "type": "uint64",
                        "name": "maxStakePerUser"
                    },
                    {
                        "type": "uint64",
                        "name": "lockupPeriod"
                    },
                    {
                        "type": "uint64",
                        "name": "earlyWithdrawPenalty"
                    },
                    {
                        "type": "uint64",
                        "name": "templateId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "updatePoolStatus",
                "args": [
                    {
                        "type": "uint64",
                        "name": "poolId"
                    },
                    {
                        "type": "uint64",
                        "name": "newStatus"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updatePoolMetrics",
                "args": [
                    {
                        "type": "uint64",
                        "name": "poolId"
                    },
                    {
                        "type": "uint64",
                        "name": "totalStaked"
                    },
                    {
                        "type": "uint64",
                        "name": "totalRewards"
                    },
                    {
                        "type": "uint64",
                        "name": "participantCount"
                    },
                    {
                        "type": "uint64",
                        "name": "apy"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "addPoolTemplate",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "name"
                    },
                    {
                        "type": "byte[]",
                        "name": "stakingTemplate"
                    },
                    {
                        "type": "byte[]",
                        "name": "distributorTemplate"
                    },
                    {
                        "type": "byte[]",
                        "name": "compounderTemplate"
                    },
                    {
                        "type": "byte[]",
                        "name": "defaultParams"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "setDefaultTemplate",
                "args": [
                    {
                        "type": "uint64",
                        "name": "templateId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "updateFactorySettings",
                "args": [
                    {
                        "type": "uint64",
                        "name": "newCreationFee"
                    },
                    {
                        "type": "uint64",
                        "name": "newFactoryFee"
                    },
                    {
                        "type": "uint64",
                        "name": "newMaxPools"
                    },
                    {
                        "type": "uint64",
                        "name": "newMinStake"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "emergencyPauseFactory",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "resumeFactory",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setGovernanceContract",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "governanceAddr"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getPoolInfo",
                "args": [
                    {
                        "type": "uint64",
                        "name": "poolId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "getTemplate",
                "args": [
                    {
                        "type": "uint64",
                        "name": "templateId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(byte[],byte[],byte[],byte[],byte[])"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}