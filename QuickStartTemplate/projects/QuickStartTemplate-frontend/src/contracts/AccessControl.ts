/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AccessControl","structs":{"getAccessControlStatsResult":[{"name":"totalUsers","type":"uint64"},{"name":"totalAdmins","type":"uint64"},{"name":"totalOperators","type":"uint64"},{"name":"pendingRequests","type":"uint64"},{"name":"emergencyOverride","type":"bool"},{"name":"lastAudit","type":"uint64"}],"getPermissionRequestResult":[{"name":"requester","type":"byte[]"},{"name":"targetRole","type":"uint64"},{"name":"requestedPermissions","type":"uint64"},{"name":"reason","type":"byte[]"},{"name":"requestedAt","type":"uint64"},{"name":"approvals","type":"uint64"},{"name":"approvers","type":"byte[]"},{"name":"status","type":"uint64"}],"getUserRoleResult":[{"name":"role","type":"uint64"},{"name":"permissions","type":"uint64"},{"name":"assignedBy","type":"byte[]"},{"name":"assignedAt","type":"uint64"},{"name":"expiresAt","type":"uint64"},{"name":"revoked","type":"uint64"},{"name":"revokedAt","type":"uint64"},{"name":"revokedBy","type":"byte[]"}]},"methods":[{"name":"initialize","args":[{"type":"uint64","name":"maxAdmins"},{"type":"uint64","name":"maxOperators"},{"type":"uint64","name":"multiSigRequired"},{"type":"uint64","name":"defaultPermissions"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"assignRole","args":[{"type":"byte[]","name":"user"},{"type":"uint64","name":"role"},{"type":"uint64","name":"permissions"},{"type":"uint64","name":"expiresAt"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"revokeRole","args":[{"type":"byte[]","name":"user"},{"type":"string","name":"reason"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"requestPermission","args":[{"type":"uint64","name":"targetRole"},{"type":"uint64","name":"requestedPermissions"},{"type":"string","name":"reason"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"approvePermissionRequest","args":[{"type":"uint64","name":"requestId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"rejectPermissionRequest","args":[{"type":"uint64","name":"requestId"},{"type":"string","name":"reason"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"enableEmergencyOverride","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"disableEmergencyOverride","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"transferSuperAdmin","args":[{"type":"byte[]","name":"newSuperAdmin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"updateAccessControlSettings","args":[{"type":"uint64","name":"newMaxAdmins"},{"type":"uint64","name":"newMaxOperators"},{"type":"uint64","name":"newMultiSigRequired"},{"type":"uint64","name":"newDefaultPermissions"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"performSecurityAudit","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"checkExpiredRoles","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"cleanupOldRequests","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"logAccess","args":[{"type":"string","name":"action"},{"type":"byte[]","name":"targetUser"},{"type":"uint64","name":"role"},{"type":"byte[]","name":"actor"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"hasRole","args":[{"type":"byte[]","name":"user"},{"type":"uint64","name":"role"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"hasPermission","args":[{"type":"byte[]","name":"user"},{"type":"uint64","name":"permission"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"canExecuteFunction","args":[{"type":"byte[]","name":"user"},{"type":"string","name":"functionName"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"isSessionValid","args":[{"type":"byte[]","name":"user"},{"type":"uint64","name":"sessionStartTime"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getUserRole","args":[{"type":"byte[]","name":"user"}],"returns":{"type":"(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])","struct":"getUserRoleResult"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getPermissionRequest","args":[{"type":"uint64","name":"requestId"}],"returns":{"type":"(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)","struct":"getPermissionRequestResult"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getAccessControlStats","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64,bool,uint64)","struct":"getAccessControlStatsResult"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getAllUserRoles","args":[],"returns":{"type":"byte[][]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getPermissionRequestsByUser","args":[{"type":"byte[]","name":"user"}],"returns":{"type":"(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":14,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"totalUsers":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxVc2Vycw=="},"totalAdmins":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxBZG1pbnM="},"totalOperators":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxPcGVyYXRvcnM="},"superAdmin":{"keyType":"AVMString","valueType":"AVMBytes","key":"c3VwZXJBZG1pbg=="},"maxAdmins":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4QWRtaW5z"},"maxOperators":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4T3BlcmF0b3Jz"},"multiSigRequiredForAdmin":{"keyType":"AVMString","valueType":"AVMUint64","key":"bXVsdGlTaWdSZXF1aXJlZEZvckFkbWlu"},"permissionRequestCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"cGVybWlzc2lvblJlcXVlc3RDb3VudA=="},"defaultUserPermissions":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZGVmYXVsdFVzZXJQZXJtaXNzaW9ucw=="},"emergencyOverride":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZW1lcmdlbmN5T3ZlcnJpZGU="},"adminSessionDuration":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWRtaW5TZXNzaW9uRHVyYXRpb24="},"operatorSessionDuration":{"keyType":"AVMString","valueType":"AVMUint64","key":"b3BlcmF0b3JTZXNzaW9uRHVyYXRpb24="},"failedAccessAttempts":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZmFpbGVkQWNjZXNzQXR0ZW1wdHM="},"lastSecurityAudit":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdFNlY3VyaXR5QXVkaXQ="},"accessLogCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWNjZXNzTG9nQ291bnQ="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1692,1979,1986,2265,2273,2300,2307,2314,2322,2329,2386,2402,2408,2790,2797,2805,2930,2938,2972,3225,3232,3240,3387,3394,3398,3405,3412,3419,3426,3430,3536,3543,3550,3554,3561,3568,3572,3579,3625,3749,3763,3774,3784,3791,3801,3811,3818,3825],"errorMessage":"Box must have value"},{"pc":[617,639,657,710,825,925,957,991,1023,1055,1089,1098,1107,1119,1147,1165,1177,1189,1211,1227,1258,1282,1312],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1345],"errorMessage":"can only call when creating"},{"pc":[620,642,660,713,828,928,960,994,1026,1058,1092,1101,1110,1122,1150,1168,1180,1192,1214,1230,1261,1285,1315],"errorMessage":"can only call when not creating"},{"pc":[1483,1612,1617,1708,1779,1820,1840,1867,1894,1914,1919,1938,2017,2059,2079,2096,2286,2443,2493,2547,2559,2646,2724,2870,2877,3294,3320,3452,3593,3656,3660,3664,3669,3674,3709],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAECAyYhCnN1cGVyQWRtaW4EFR98dQt0b3RhbEFkbWlucw50b3RhbE9wZXJhdG9ycwp0b3RhbFVzZXJzBV9yb2xlCF9yZXZva2VkB19zdGF0dXMBABZwZXJtaXNzaW9uUmVxdWVzdENvdW50EWVtZXJnZW5jeU92ZXJyaWRlCl9leHBpcmVzQXQKX3JlcXVlc3RlcgtfdGFyZ2V0Um9sZRVfcmVxdWVzdGVkUGVybWlzc2lvbnMKX2FwcHJvdmFscwltYXhBZG1pbnMMbWF4T3BlcmF0b3JzGG11bHRpU2lnUmVxdWlyZWRGb3JBZG1pbhZkZWZhdWx0VXNlclBlcm1pc3Npb25zEWxhc3RTZWN1cml0eUF1ZGl0DmFjY2Vzc0xvZ0NvdW50DF9wZXJtaXNzaW9ucwpfcmV2b2tlZEF0Cl9yZXZva2VkQnkHX3JlYXNvbgxfcmVxdWVzdGVkQXQKX2FwcHJvdmVycwIALhRhZG1pblNlc3Npb25EdXJhdGlvbhdvcGVyYXRvclNlc3Npb25EdXJhdGlvbgtfYXNzaWduZWRCeQtfYXNzaWduZWRBdDEbQQN9ghcEEJu+sQRrxxzDBJKd/3IEMDbMCgTyMfBDBEHSrkUE42bcOgScySErBDJKZyEE6YnlgQQgyX7lBAMDG18Ecgzi/gRT4rUFBMm0MCAEg4fHqQTbUpJbBD4VPckEVQTTcAR0sWSPBLiLtbIE+3y4CQSPuKdHNhoAjhcCuQKbAoMCZAJUAj4CMgImAhQB+AHsAeMB2gG4AZgBeAFWATYA0gBfACoAGAACIkMxGRREMRhENhoBVwIAiAv4KUxQsCNDMRkURDEYRIAGFR98dQAAsCNDMRkURDEYRIgLZU8FFk8FFk8FFk8FFicIIk8HVE8FFk8FTwVQTwRQTwNQTwJQTFApTFCwI0MxGRREMRhENhoBF4gKyksHFRZXBgJPCFBPBxZPBxZLBxUWVwYCTwhQTwcWTwcWSwcVFlcGAk8IUE8HFksHFYEuCCccTwhQTwdQSwEWVwYCUEsGFU8CCExPBVBPBFBMFlcGAlBMUE8DUE8CUExQKUxQsCNDMRkURDEYRDYaAVcCAIgJtk8HFk8HFksHFRZXBgJPCFBPBxZPBxZPBxZPBxZLBxUWVwYCTwhQTwdPB1CAAgA0UEsGFYE0CExPBlBPBVBPBFBPA1BMFlcGAlBPAlBMUClMULAjQzEZFEQxGEQ2GgFXAgA2GgIXiAjBJwgiTwJUKUxQsCNDMRkURDEYRDYaAVcCADYaAlcCAIgH9icIIk8CVClMULAjQzEZFEQxGEQ2GgFXAgA2GgIXiAc4JwgiTwJUKUxQsCNDMRkURDEYRDYaAVcCADYaAheIBq0nCCJPAlQpTFCwI0MxGRREMRhENhoBVwIANhoCVwIANhoDFzYaBFcCAIgGYSNDMRkURDEYRCNDMRkURDEYRCNDMRkURDEYRIgGFCNDMRkURDEYRDYaARc2GgIXNhoDFzYaBBeIBdgjQzEZFEQxGEQ2GgFXAgCIBWMjQzEZFEQxGESIBSQjQzEZFEQxGESIBOYjQzEZFEQxGEQ2GgEXNhoCVwIAiASBI0MxGRREMRhENhoBF4gD3CNDMRkURDEYRDYaARc2GgIXNhoDVwIAiANJFilMULAjQzEZFEQxGEQ2GgFXAgA2GgJXAgCIAogjQzEZFEQxGEQ2GgFXAgA2GgIXNhoDFzYaBBeIARcjQzEZFEQxGEQ2GgEXNhoCFzYaAxc2GgQXiACOI0MxGUD9JjEYFEQjQ4oEAYAASYv+JAuL/CQLIosEiwMMQQAci/2LBElOAlmLAggWVwYCiwFMUIwBJAiMBEL/3Iv9FYwAIowEiwSLAgxBAByL/4sESU4CWYsACBZXBgKLAUxQjAEkCIwEQv/ci/yL/ggWVwYCiwFQi/2LA4sAUlCL/xWL/4sCTwJSUIwAiYoEACIoZUQVFEQoMQBnJxCL/GcnEYv9ZycSi/5nJxOL/2cnBCJnKiJnKyJnJwkiZycKImcnHYGA4QFnJx6BwHBngBRmYWlsZWRBY2Nlc3NBdHRlbXB0cyJnJxQyB2cnFSJnMQCDAgQfIogAAYmKBAAiRweAADEAJYgE6ESL/SUSSUEBJyIqZUQiJxBlRAxEi/wnBVBJjAeL/CcWUIwDi/wnH1CMAYv8JyBQjACL/CcLUIwCi/wnBlCMBov8JxdQjASL/CcYUIwFvUUBQQAfiwe+TBdJjAhMRCUSQQCYi/0lE0EAkSIqZUQjCSpMZ4v9FosHTL+L/haLA0y/MQCLAUm8SEy/MgcWiwBMv4v/FosCTL8iFosGSwG/iwRMvzIDiwVJvEhMv4sJQQAiIiplRCMIKkxngA1ST0xFX0FTU0lHTkVEi/yL/TEAiAOMiYv9JBJBAAwiK2VEIwgrTGdC/9SL/SMSQf/NIicEZUQjCCcETGdC/7+LCCQSQQATi/0kE0EADCIrZUQjCStMZ0L/XosIIxJB/1eL/SMTQf9QIicEZUQjCScETGdC/0KL/SQSQf7dIitlRCInEWVEDERC/s+KAgAxACWIA5pEIihlRIv+E0SL/icFUIv+JwZQi/4nF1CL/icYUEsDvUUBRE8DvkwXSU4DTgVESwO+TBdMRBREIxZPBEy/MgcWTwNMvzEASwG8SL8lEkEAIyIqZUQjCSpMZzEAgAxST0xFX1JFVk9LRUSL/osATwOIAp2JiwAkEkEADCIrZUQjCStMZ0L/04sAIxJB/8wiJwRlRCMJJwRMZ0L/vooDASInCWVEIwgnCUsBZ0kWSScMUDEASwG8SL9JJw1Qi/0Wv0knDlCL/ha/SScZUEm8SIv/v0knGlAyBxa/SScPUCIWTEsBv0sBJxtQSbxIgAC/TCcHUEy/gBRQRVJNSVNTSU9OX1JFUVVFU1RFRDEAi/0xAIgB/ImKAQAxACWIAn1Ei/8WSScHUElPAkknD1BLAScMUE4DSwEnDVBOA0wnDlBOAksBvUUBREy+TBdMRBRESb5MF0xEIwhJFk8CTL8iJxJlRA9BABwjFosATL+LAb5EiwK+TBdMRIsDvkwXTEQiiP0jiwG+RIsCvkwXTEQxAIATUEVSTUlTU0lPTl9BUFBST1ZFRE4DiAFniYoCADEAJYgB6ESL/hZJJwdQSb1FAURJvkwXTEQURCQWv0knDFBMJw1QTL5ETL5MF0xEMQCAE1BFUk1JU1NJT05fUkVKRUNURUROA4gBGIkxACIoZUQSRCcKI2eAGkVNRVJHRU5DWV9PVkVSUklERV9FTkFCTEVEMQCBBDEAiADmiTEAIihlRBJEJwoiZ4AbRU1FUkdFTkNZX09WRVJSSURFX0RJU0FCTEVEMQCBBDEAiACziYoBADEAIihlRBJEi/8yAxNEIihlRCiL/2eL/4MCBB8iiPwkSYAXU3VwZXIgYWRtaW4gdHJhbnNmZXJyZWSI/VqAF1NVUEVSX0FETUlOX1RSQU5TRkVSUkVEi/+BBE8DiABQiYoEADEAIihlRBJEJxCL/GcnEYv9ZycSi/5nJxOL/2eJMQAliAC0RCcUMgdngBhTRUNVUklUWV9BVURJVF9QRVJGT1JNRUQxACIxAIgAAYmKBAAiJxVlRCMIJxVMZ4v8i/1Qi/4WUIv/UDIHFlCwiYoCAYAASYv+JwVQSYv+JwZQTIv+JwtQTL1FAUAABCKMAImLAr5MF4wBRIsDvkwXTESLBL5MF4wARCMSQQAEIowAiYsAQQAMMgeLAA1BAAQijACJiwGL/xJAAAiLAYEEEkEABCOMAIkiQv/5igIBIkcCgABHAyInCmVEQQAOIihlRIv+EkEABCOMAImL/icFUIv+JxZQjAGL/icGUIwCi/4nC1CMAL1FAUAABCKMAImLAr5MF0xEiwC+TBeMA0QjEkEABCKMAImLA0EADDIHiwMNQQAEIowAiYsBvkwXjAZEI4wFIowEiwSL/wxBAA+LBSQLjAWLBCMIjARC/+mLBosFCiQYIxKMAImKAgGL/4AFc3Rha2USQAAki/+ACHdpdGhkcmF3EkAAFIv/gAxjbGFpbVJld2FyZHMSQQAHi/4kiP8oiYv/gBB1cGRhdGVSZXdhcmRSYXRlEkAAEYv/gAlwYXVzZVBvb2wSQQAHi/4liP74iYv/gBFlbWVyZ2VuY3lXaXRoZHJhdxJAABaL/4AOZW1lcmdlbmN5UGF1c2USQQAIi/6BBIj+wYmL/iKI/rqJigIBgABHAov+JwVQSYv+JwZQTIv+JwtQTL1FAUAABCKMAImLA75MF4wCRIsEvkwXTESLBb5MF4wARCMSQQAEIowAiYsAQQAMMgeLAA1BAAQijACJgZAcjAGLAiUSQAAIiwKBBBJBABMiJx1lTIwBRDIHi/8JiwEOjACJiwIkEkH/7iInHmVMjAFEQv/jigEIi/8nBVBJi/8nFlBMi/8nH1BMi/8nIFBMi/8nC1BMi/8nBlBMi/8nF1BMi/8nGFBMvUUBQQBDiwC+TBdMRIsBvkwXTESLAr5EiwO+TBdMRIsEvkwXTESLBb5MF0xEiwa+TBdMRIsHvkRPD08PTw9PD08PTw9PD08PiSInE2VEMgNJIk8DTwMiRwNPB08PTw9PD08PTw9PD08PTw+JigEIi/8WSScMUEsBJw1QSwInDlBLAycZUEsEJxpQSwUnD1BLBicbUE8HJwdQSb1FAURPB75ETwe+TBdMRE8HvkwXTERPB75ETwe+TBdMRE8HvkwXTERPB75ETwe+TBdMRImKAAYigAAiIyInCWVEiwMPQQA0iwMWJwdQSYwAvUUBiwKMAUEAFIsAvkwXTESLAowBQAAGiwIjCIwBiwGMAosDIwiMA0L/wSInBGVEIiplRCIrZUQiJwplRCInFGVETgROBIsCTwVPBU8JTwlPCU8JiYoBASJHA4ACAAAjIicJZUSLBQ9BAQCLBRZJjABJJwxQSU4CjAEnB1CMA71FAYsEjAJBANWLAb5Ei/8SiwSMAkEAx4sBvkSLAEknDVC+TBdMREsBJw5QvkwXTERLAicZUL5ESwMnGlC+TBdMREsEJw9QvkwXTERPBScbUL5EiwO+TBdMREsHFRZXBgJPCFBPBxZPBxZLBxUWVwYCTwhQTwcWTwcWSwcVFlcGAk8IUE8HFksHFYEuCCccTwhQTwdQSwEWVwYCUEsGFU8CCExPBVBPBFBMFlcGAlBMUE8DUE8CUExQgAIAAkxQIoAAI08DiPXkiwRJIllMVwIASwIiWU8DVwIAiPXPjAKLAowEiwUjCIwFQv71iwSMAIk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type GetAccessControlStatsResult = {
  totalUsers: bigint,
  totalAdmins: bigint,
  totalOperators: bigint,
  pendingRequests: bigint,
  emergencyOverride: boolean,
  lastAudit: bigint
}


/**
 * Converts the ABI tuple representation of a getAccessControlStatsResult to the struct representation
 */
export function GetAccessControlStatsResultFromTuple(abiTuple: [bigint, bigint, bigint, bigint, boolean, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.getAccessControlStatsResult, APP_SPEC.structs) as GetAccessControlStatsResult
}

export type GetPermissionRequestResult = {
  requester: Uint8Array,
  targetRole: bigint,
  requestedPermissions: bigint,
  reason: Uint8Array,
  requestedAt: bigint,
  approvals: bigint,
  approvers: Uint8Array,
  status: bigint
}


/**
 * Converts the ABI tuple representation of a getPermissionRequestResult to the struct representation
 */
export function GetPermissionRequestResultFromTuple(abiTuple: [Uint8Array, bigint, bigint, Uint8Array, bigint, bigint, Uint8Array, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.getPermissionRequestResult, APP_SPEC.structs) as GetPermissionRequestResult
}

export type GetUserRoleResult = {
  role: bigint,
  permissions: bigint,
  assignedBy: Uint8Array,
  assignedAt: bigint,
  expiresAt: bigint,
  revoked: bigint,
  revokedAt: bigint,
  revokedBy: Uint8Array
}


/**
 * Converts the ABI tuple representation of a getUserRoleResult to the struct representation
 */
export function GetUserRoleResultFromTuple(abiTuple: [bigint, bigint, Uint8Array, bigint, bigint, bigint, bigint, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.getUserRoleResult, APP_SPEC.structs) as GetUserRoleResult
}

/**
 * The argument types for the AccessControl contract
 */
export type AccessControlArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initialize(uint64,uint64,uint64,uint64)void': {
      maxAdmins: bigint | number
      maxOperators: bigint | number
      multiSigRequired: bigint | number
      defaultPermissions: bigint | number
    }
    'assignRole(byte[],uint64,uint64,uint64)void': {
      user: Uint8Array
      role: bigint | number
      permissions: bigint | number
      expiresAt: bigint | number
    }
    'revokeRole(byte[],string)void': {
      user: Uint8Array
      reason: string
    }
    'requestPermission(uint64,uint64,string)uint64': {
      targetRole: bigint | number
      requestedPermissions: bigint | number
      reason: string
    }
    'approvePermissionRequest(uint64)void': {
      requestId: bigint | number
    }
    'rejectPermissionRequest(uint64,string)void': {
      requestId: bigint | number
      reason: string
    }
    'enableEmergencyOverride()void': Record<string, never>
    'disableEmergencyOverride()void': Record<string, never>
    'transferSuperAdmin(byte[])void': {
      newSuperAdmin: Uint8Array
    }
    'updateAccessControlSettings(uint64,uint64,uint64,uint64)void': {
      newMaxAdmins: bigint | number
      newMaxOperators: bigint | number
      newMultiSigRequired: bigint | number
      newDefaultPermissions: bigint | number
    }
    'performSecurityAudit()void': Record<string, never>
    'checkExpiredRoles()void': Record<string, never>
    'cleanupOldRequests()void': Record<string, never>
    'logAccess(string,byte[],uint64,byte[])void': {
      action: string
      targetUser: Uint8Array
      role: bigint | number
      actor: Uint8Array
    }
    'hasRole(byte[],uint64)bool': {
      user: Uint8Array
      role: bigint | number
    }
    'hasPermission(byte[],uint64)bool': {
      user: Uint8Array
      permission: bigint | number
    }
    'canExecuteFunction(byte[],string)bool': {
      user: Uint8Array
      functionName: string
    }
    'isSessionValid(byte[],uint64)bool': {
      user: Uint8Array
      sessionStartTime: bigint | number
    }
    'getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])': {
      user: Uint8Array
    }
    'getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)': {
      requestId: bigint | number
    }
    'getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)': Record<string, never>
    'getAllUserRoles()byte[][]': Record<string, never>
    'getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]': {
      user: Uint8Array
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initialize(uint64,uint64,uint64,uint64)void': [maxAdmins: bigint | number, maxOperators: bigint | number, multiSigRequired: bigint | number, defaultPermissions: bigint | number]
    'assignRole(byte[],uint64,uint64,uint64)void': [user: Uint8Array, role: bigint | number, permissions: bigint | number, expiresAt: bigint | number]
    'revokeRole(byte[],string)void': [user: Uint8Array, reason: string]
    'requestPermission(uint64,uint64,string)uint64': [targetRole: bigint | number, requestedPermissions: bigint | number, reason: string]
    'approvePermissionRequest(uint64)void': [requestId: bigint | number]
    'rejectPermissionRequest(uint64,string)void': [requestId: bigint | number, reason: string]
    'enableEmergencyOverride()void': []
    'disableEmergencyOverride()void': []
    'transferSuperAdmin(byte[])void': [newSuperAdmin: Uint8Array]
    'updateAccessControlSettings(uint64,uint64,uint64,uint64)void': [newMaxAdmins: bigint | number, newMaxOperators: bigint | number, newMultiSigRequired: bigint | number, newDefaultPermissions: bigint | number]
    'performSecurityAudit()void': []
    'checkExpiredRoles()void': []
    'cleanupOldRequests()void': []
    'logAccess(string,byte[],uint64,byte[])void': [action: string, targetUser: Uint8Array, role: bigint | number, actor: Uint8Array]
    'hasRole(byte[],uint64)bool': [user: Uint8Array, role: bigint | number]
    'hasPermission(byte[],uint64)bool': [user: Uint8Array, permission: bigint | number]
    'canExecuteFunction(byte[],string)bool': [user: Uint8Array, functionName: string]
    'isSessionValid(byte[],uint64)bool': [user: Uint8Array, sessionStartTime: bigint | number]
    'getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])': [user: Uint8Array]
    'getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)': [requestId: bigint | number]
    'getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)': []
    'getAllUserRoles()byte[][]': []
    'getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]': [user: Uint8Array]
  }
}

/**
 * The return type for each method
 */
export type AccessControlReturns = {
  'initialize(uint64,uint64,uint64,uint64)void': void
  'assignRole(byte[],uint64,uint64,uint64)void': void
  'revokeRole(byte[],string)void': void
  'requestPermission(uint64,uint64,string)uint64': bigint
  'approvePermissionRequest(uint64)void': void
  'rejectPermissionRequest(uint64,string)void': void
  'enableEmergencyOverride()void': void
  'disableEmergencyOverride()void': void
  'transferSuperAdmin(byte[])void': void
  'updateAccessControlSettings(uint64,uint64,uint64,uint64)void': void
  'performSecurityAudit()void': void
  'checkExpiredRoles()void': void
  'cleanupOldRequests()void': void
  'logAccess(string,byte[],uint64,byte[])void': void
  'hasRole(byte[],uint64)bool': boolean
  'hasPermission(byte[],uint64)bool': boolean
  'canExecuteFunction(byte[],string)bool': boolean
  'isSessionValid(byte[],uint64)bool': boolean
  'getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])': GetUserRoleResult
  'getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)': GetPermissionRequestResult
  'getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)': GetAccessControlStatsResult
  'getAllUserRoles()byte[][]': Uint8Array[]
  'getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]': [Uint8Array, bigint, bigint, Uint8Array, bigint, bigint, Uint8Array, bigint][]
}

/**
 * Defines the types of available calls and state of the AccessControl smart contract.
 */
export type AccessControlTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize(uint64,uint64,uint64,uint64)void' | 'initialize', {
      argsObj: AccessControlArgs['obj']['initialize(uint64,uint64,uint64,uint64)void']
      argsTuple: AccessControlArgs['tuple']['initialize(uint64,uint64,uint64,uint64)void']
      returns: AccessControlReturns['initialize(uint64,uint64,uint64,uint64)void']
    }>
    & Record<'assignRole(byte[],uint64,uint64,uint64)void' | 'assignRole', {
      argsObj: AccessControlArgs['obj']['assignRole(byte[],uint64,uint64,uint64)void']
      argsTuple: AccessControlArgs['tuple']['assignRole(byte[],uint64,uint64,uint64)void']
      returns: AccessControlReturns['assignRole(byte[],uint64,uint64,uint64)void']
    }>
    & Record<'revokeRole(byte[],string)void' | 'revokeRole', {
      argsObj: AccessControlArgs['obj']['revokeRole(byte[],string)void']
      argsTuple: AccessControlArgs['tuple']['revokeRole(byte[],string)void']
      returns: AccessControlReturns['revokeRole(byte[],string)void']
    }>
    & Record<'requestPermission(uint64,uint64,string)uint64' | 'requestPermission', {
      argsObj: AccessControlArgs['obj']['requestPermission(uint64,uint64,string)uint64']
      argsTuple: AccessControlArgs['tuple']['requestPermission(uint64,uint64,string)uint64']
      returns: AccessControlReturns['requestPermission(uint64,uint64,string)uint64']
    }>
    & Record<'approvePermissionRequest(uint64)void' | 'approvePermissionRequest', {
      argsObj: AccessControlArgs['obj']['approvePermissionRequest(uint64)void']
      argsTuple: AccessControlArgs['tuple']['approvePermissionRequest(uint64)void']
      returns: AccessControlReturns['approvePermissionRequest(uint64)void']
    }>
    & Record<'rejectPermissionRequest(uint64,string)void' | 'rejectPermissionRequest', {
      argsObj: AccessControlArgs['obj']['rejectPermissionRequest(uint64,string)void']
      argsTuple: AccessControlArgs['tuple']['rejectPermissionRequest(uint64,string)void']
      returns: AccessControlReturns['rejectPermissionRequest(uint64,string)void']
    }>
    & Record<'enableEmergencyOverride()void' | 'enableEmergencyOverride', {
      argsObj: AccessControlArgs['obj']['enableEmergencyOverride()void']
      argsTuple: AccessControlArgs['tuple']['enableEmergencyOverride()void']
      returns: AccessControlReturns['enableEmergencyOverride()void']
    }>
    & Record<'disableEmergencyOverride()void' | 'disableEmergencyOverride', {
      argsObj: AccessControlArgs['obj']['disableEmergencyOverride()void']
      argsTuple: AccessControlArgs['tuple']['disableEmergencyOverride()void']
      returns: AccessControlReturns['disableEmergencyOverride()void']
    }>
    & Record<'transferSuperAdmin(byte[])void' | 'transferSuperAdmin', {
      argsObj: AccessControlArgs['obj']['transferSuperAdmin(byte[])void']
      argsTuple: AccessControlArgs['tuple']['transferSuperAdmin(byte[])void']
      returns: AccessControlReturns['transferSuperAdmin(byte[])void']
    }>
    & Record<'updateAccessControlSettings(uint64,uint64,uint64,uint64)void' | 'updateAccessControlSettings', {
      argsObj: AccessControlArgs['obj']['updateAccessControlSettings(uint64,uint64,uint64,uint64)void']
      argsTuple: AccessControlArgs['tuple']['updateAccessControlSettings(uint64,uint64,uint64,uint64)void']
      returns: AccessControlReturns['updateAccessControlSettings(uint64,uint64,uint64,uint64)void']
    }>
    & Record<'performSecurityAudit()void' | 'performSecurityAudit', {
      argsObj: AccessControlArgs['obj']['performSecurityAudit()void']
      argsTuple: AccessControlArgs['tuple']['performSecurityAudit()void']
      returns: AccessControlReturns['performSecurityAudit()void']
    }>
    & Record<'checkExpiredRoles()void' | 'checkExpiredRoles', {
      argsObj: AccessControlArgs['obj']['checkExpiredRoles()void']
      argsTuple: AccessControlArgs['tuple']['checkExpiredRoles()void']
      returns: AccessControlReturns['checkExpiredRoles()void']
    }>
    & Record<'cleanupOldRequests()void' | 'cleanupOldRequests', {
      argsObj: AccessControlArgs['obj']['cleanupOldRequests()void']
      argsTuple: AccessControlArgs['tuple']['cleanupOldRequests()void']
      returns: AccessControlReturns['cleanupOldRequests()void']
    }>
    & Record<'logAccess(string,byte[],uint64,byte[])void' | 'logAccess', {
      argsObj: AccessControlArgs['obj']['logAccess(string,byte[],uint64,byte[])void']
      argsTuple: AccessControlArgs['tuple']['logAccess(string,byte[],uint64,byte[])void']
      returns: AccessControlReturns['logAccess(string,byte[],uint64,byte[])void']
    }>
    & Record<'hasRole(byte[],uint64)bool' | 'hasRole', {
      argsObj: AccessControlArgs['obj']['hasRole(byte[],uint64)bool']
      argsTuple: AccessControlArgs['tuple']['hasRole(byte[],uint64)bool']
      returns: AccessControlReturns['hasRole(byte[],uint64)bool']
    }>
    & Record<'hasPermission(byte[],uint64)bool' | 'hasPermission', {
      argsObj: AccessControlArgs['obj']['hasPermission(byte[],uint64)bool']
      argsTuple: AccessControlArgs['tuple']['hasPermission(byte[],uint64)bool']
      returns: AccessControlReturns['hasPermission(byte[],uint64)bool']
    }>
    & Record<'canExecuteFunction(byte[],string)bool' | 'canExecuteFunction', {
      argsObj: AccessControlArgs['obj']['canExecuteFunction(byte[],string)bool']
      argsTuple: AccessControlArgs['tuple']['canExecuteFunction(byte[],string)bool']
      returns: AccessControlReturns['canExecuteFunction(byte[],string)bool']
    }>
    & Record<'isSessionValid(byte[],uint64)bool' | 'isSessionValid', {
      argsObj: AccessControlArgs['obj']['isSessionValid(byte[],uint64)bool']
      argsTuple: AccessControlArgs['tuple']['isSessionValid(byte[],uint64)bool']
      returns: AccessControlReturns['isSessionValid(byte[],uint64)bool']
    }>
    & Record<'getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])' | 'getUserRole', {
      argsObj: AccessControlArgs['obj']['getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])']
      argsTuple: AccessControlArgs['tuple']['getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])']
      returns: AccessControlReturns['getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])']
    }>
    & Record<'getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)' | 'getPermissionRequest', {
      argsObj: AccessControlArgs['obj']['getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)']
      argsTuple: AccessControlArgs['tuple']['getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)']
      returns: AccessControlReturns['getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)']
    }>
    & Record<'getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)' | 'getAccessControlStats', {
      argsObj: AccessControlArgs['obj']['getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)']
      argsTuple: AccessControlArgs['tuple']['getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)']
      returns: AccessControlReturns['getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)']
    }>
    & Record<'getAllUserRoles()byte[][]' | 'getAllUserRoles', {
      argsObj: AccessControlArgs['obj']['getAllUserRoles()byte[][]']
      argsTuple: AccessControlArgs['tuple']['getAllUserRoles()byte[][]']
      returns: AccessControlReturns['getAllUserRoles()byte[][]']
    }>
    & Record<'getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]' | 'getPermissionRequestsByUser', {
      argsObj: AccessControlArgs['obj']['getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]']
      argsTuple: AccessControlArgs['tuple']['getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]']
      returns: AccessControlReturns['getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        totalUsers: bigint
        totalAdmins: bigint
        totalOperators: bigint
        superAdmin: BinaryState
        maxAdmins: bigint
        maxOperators: bigint
        multiSigRequiredForAdmin: bigint
        permissionRequestCount: bigint
        defaultUserPermissions: bigint
        emergencyOverride: bigint
        adminSessionDuration: bigint
        operatorSessionDuration: bigint
        failedAccessAttempts: bigint
        lastSecurityAudit: bigint
        accessLogCount: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AccessControlSignatures = keyof AccessControlTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AccessControlNonVoidMethodSignatures = keyof AccessControlTypes['methods'] extends infer T ? T extends keyof AccessControlTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AccessControl smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AccessControlSignatures> = AccessControlTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AccessControl smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AccessControlSignatures> = AccessControlTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AccessControlTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AccessControlCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AccessControlDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AccessControlCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AccessControl smart contract
 */
export abstract class AccessControlParamsFactory {
  /**
   * Constructs a no op call for the initialize(uint64,uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<AccessControlArgs['obj']['initialize(uint64,uint64,uint64,uint64)void'] | AccessControlArgs['tuple']['initialize(uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize(uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.maxAdmins, params.args.maxOperators, params.args.multiSigRequired, params.args.defaultPermissions],
    }
  }
  /**
   * Constructs a no op call for the assignRole(byte[],uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static assignRole(params: CallParams<AccessControlArgs['obj']['assignRole(byte[],uint64,uint64,uint64)void'] | AccessControlArgs['tuple']['assignRole(byte[],uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'assignRole(byte[],uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.role, params.args.permissions, params.args.expiresAt],
    }
  }
  /**
   * Constructs a no op call for the revokeRole(byte[],string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static revokeRole(params: CallParams<AccessControlArgs['obj']['revokeRole(byte[],string)void'] | AccessControlArgs['tuple']['revokeRole(byte[],string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'revokeRole(byte[],string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.reason],
    }
  }
  /**
   * Constructs a no op call for the requestPermission(uint64,uint64,string)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static requestPermission(params: CallParams<AccessControlArgs['obj']['requestPermission(uint64,uint64,string)uint64'] | AccessControlArgs['tuple']['requestPermission(uint64,uint64,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'requestPermission(uint64,uint64,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.targetRole, params.args.requestedPermissions, params.args.reason],
    }
  }
  /**
   * Constructs a no op call for the approvePermissionRequest(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static approvePermissionRequest(params: CallParams<AccessControlArgs['obj']['approvePermissionRequest(uint64)void'] | AccessControlArgs['tuple']['approvePermissionRequest(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'approvePermissionRequest(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.requestId],
    }
  }
  /**
   * Constructs a no op call for the rejectPermissionRequest(uint64,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static rejectPermissionRequest(params: CallParams<AccessControlArgs['obj']['rejectPermissionRequest(uint64,string)void'] | AccessControlArgs['tuple']['rejectPermissionRequest(uint64,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'rejectPermissionRequest(uint64,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.requestId, params.args.reason],
    }
  }
  /**
   * Constructs a no op call for the enableEmergencyOverride()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static enableEmergencyOverride(params: CallParams<AccessControlArgs['obj']['enableEmergencyOverride()void'] | AccessControlArgs['tuple']['enableEmergencyOverride()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'enableEmergencyOverride()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the disableEmergencyOverride()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static disableEmergencyOverride(params: CallParams<AccessControlArgs['obj']['disableEmergencyOverride()void'] | AccessControlArgs['tuple']['disableEmergencyOverride()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'disableEmergencyOverride()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the transferSuperAdmin(byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static transferSuperAdmin(params: CallParams<AccessControlArgs['obj']['transferSuperAdmin(byte[])void'] | AccessControlArgs['tuple']['transferSuperAdmin(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'transferSuperAdmin(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newSuperAdmin],
    }
  }
  /**
   * Constructs a no op call for the updateAccessControlSettings(uint64,uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAccessControlSettings(params: CallParams<AccessControlArgs['obj']['updateAccessControlSettings(uint64,uint64,uint64,uint64)void'] | AccessControlArgs['tuple']['updateAccessControlSettings(uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateAccessControlSettings(uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newMaxAdmins, params.args.newMaxOperators, params.args.newMultiSigRequired, params.args.newDefaultPermissions],
    }
  }
  /**
   * Constructs a no op call for the performSecurityAudit()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static performSecurityAudit(params: CallParams<AccessControlArgs['obj']['performSecurityAudit()void'] | AccessControlArgs['tuple']['performSecurityAudit()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'performSecurityAudit()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the checkExpiredRoles()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static checkExpiredRoles(params: CallParams<AccessControlArgs['obj']['checkExpiredRoles()void'] | AccessControlArgs['tuple']['checkExpiredRoles()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'checkExpiredRoles()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the cleanupOldRequests()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static cleanupOldRequests(params: CallParams<AccessControlArgs['obj']['cleanupOldRequests()void'] | AccessControlArgs['tuple']['cleanupOldRequests()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'cleanupOldRequests()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the logAccess(string,byte[],uint64,byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static logAccess(params: CallParams<AccessControlArgs['obj']['logAccess(string,byte[],uint64,byte[])void'] | AccessControlArgs['tuple']['logAccess(string,byte[],uint64,byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'logAccess(string,byte[],uint64,byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.action, params.args.targetUser, params.args.role, params.args.actor],
    }
  }
  /**
   * Constructs a no op call for the hasRole(byte[],uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hasRole(params: CallParams<AccessControlArgs['obj']['hasRole(byte[],uint64)bool'] | AccessControlArgs['tuple']['hasRole(byte[],uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hasRole(byte[],uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.role],
    }
  }
  /**
   * Constructs a no op call for the hasPermission(byte[],uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hasPermission(params: CallParams<AccessControlArgs['obj']['hasPermission(byte[],uint64)bool'] | AccessControlArgs['tuple']['hasPermission(byte[],uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hasPermission(byte[],uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.permission],
    }
  }
  /**
   * Constructs a no op call for the canExecuteFunction(byte[],string)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static canExecuteFunction(params: CallParams<AccessControlArgs['obj']['canExecuteFunction(byte[],string)bool'] | AccessControlArgs['tuple']['canExecuteFunction(byte[],string)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'canExecuteFunction(byte[],string)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.functionName],
    }
  }
  /**
   * Constructs a no op call for the isSessionValid(byte[],uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isSessionValid(params: CallParams<AccessControlArgs['obj']['isSessionValid(byte[],uint64)bool'] | AccessControlArgs['tuple']['isSessionValid(byte[],uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'isSessionValid(byte[],uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.sessionStartTime],
    }
  }
  /**
   * Constructs a no op call for the getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserRole(params: CallParams<AccessControlArgs['obj']['getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])'] | AccessControlArgs['tuple']['getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPermissionRequest(params: CallParams<AccessControlArgs['obj']['getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)'] | AccessControlArgs['tuple']['getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.requestId],
    }
  }
  /**
   * Constructs a no op call for the getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAccessControlStats(params: CallParams<AccessControlArgs['obj']['getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)'] | AccessControlArgs['tuple']['getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getAllUserRoles()byte[][] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAllUserRoles(params: CallParams<AccessControlArgs['obj']['getAllUserRoles()byte[][]'] | AccessControlArgs['tuple']['getAllUserRoles()byte[][]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getAllUserRoles()byte[][]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPermissionRequestsByUser(params: CallParams<AccessControlArgs['obj']['getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]'] | AccessControlArgs['tuple']['getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AccessControl smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AccessControlFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AccessControlFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AccessControlClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AccessControlClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AccessControl smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AccessControlDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new AccessControlClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AccessControl smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AccessControl smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AccessControl smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new AccessControlClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AccessControl smart contract
 */
export class AccessControlClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AccessControlClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AccessControl app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AccessControlClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AccessControlNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AccessControlClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AccessControlClient> {
    return new AccessControlClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AccessControlClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AccessControlClient> {
    return new AccessControlClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AccessControl smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AccessControl smart contract using the `initialize(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<AccessControlArgs['obj']['initialize(uint64,uint64,uint64,uint64)void'] | AccessControlArgs['tuple']['initialize(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AccessControlParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `assignRole(byte[],uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    assignRole: (params: CallParams<AccessControlArgs['obj']['assignRole(byte[],uint64,uint64,uint64)void'] | AccessControlArgs['tuple']['assignRole(byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AccessControlParamsFactory.assignRole(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `revokeRole(byte[],string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    revokeRole: (params: CallParams<AccessControlArgs['obj']['revokeRole(byte[],string)void'] | AccessControlArgs['tuple']['revokeRole(byte[],string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AccessControlParamsFactory.revokeRole(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `requestPermission(uint64,uint64,string)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    requestPermission: (params: CallParams<AccessControlArgs['obj']['requestPermission(uint64,uint64,string)uint64'] | AccessControlArgs['tuple']['requestPermission(uint64,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AccessControlParamsFactory.requestPermission(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `approvePermissionRequest(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    approvePermissionRequest: (params: CallParams<AccessControlArgs['obj']['approvePermissionRequest(uint64)void'] | AccessControlArgs['tuple']['approvePermissionRequest(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AccessControlParamsFactory.approvePermissionRequest(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `rejectPermissionRequest(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    rejectPermissionRequest: (params: CallParams<AccessControlArgs['obj']['rejectPermissionRequest(uint64,string)void'] | AccessControlArgs['tuple']['rejectPermissionRequest(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AccessControlParamsFactory.rejectPermissionRequest(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `enableEmergencyOverride()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    enableEmergencyOverride: (params: CallParams<AccessControlArgs['obj']['enableEmergencyOverride()void'] | AccessControlArgs['tuple']['enableEmergencyOverride()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AccessControlParamsFactory.enableEmergencyOverride(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `disableEmergencyOverride()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    disableEmergencyOverride: (params: CallParams<AccessControlArgs['obj']['disableEmergencyOverride()void'] | AccessControlArgs['tuple']['disableEmergencyOverride()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AccessControlParamsFactory.disableEmergencyOverride(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `transferSuperAdmin(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    transferSuperAdmin: (params: CallParams<AccessControlArgs['obj']['transferSuperAdmin(byte[])void'] | AccessControlArgs['tuple']['transferSuperAdmin(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AccessControlParamsFactory.transferSuperAdmin(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `updateAccessControlSettings(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAccessControlSettings: (params: CallParams<AccessControlArgs['obj']['updateAccessControlSettings(uint64,uint64,uint64,uint64)void'] | AccessControlArgs['tuple']['updateAccessControlSettings(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AccessControlParamsFactory.updateAccessControlSettings(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `performSecurityAudit()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    performSecurityAudit: (params: CallParams<AccessControlArgs['obj']['performSecurityAudit()void'] | AccessControlArgs['tuple']['performSecurityAudit()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AccessControlParamsFactory.performSecurityAudit(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `checkExpiredRoles()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    checkExpiredRoles: (params: CallParams<AccessControlArgs['obj']['checkExpiredRoles()void'] | AccessControlArgs['tuple']['checkExpiredRoles()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AccessControlParamsFactory.checkExpiredRoles(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `cleanupOldRequests()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    cleanupOldRequests: (params: CallParams<AccessControlArgs['obj']['cleanupOldRequests()void'] | AccessControlArgs['tuple']['cleanupOldRequests()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AccessControlParamsFactory.cleanupOldRequests(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `logAccess(string,byte[],uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    logAccess: (params: CallParams<AccessControlArgs['obj']['logAccess(string,byte[],uint64,byte[])void'] | AccessControlArgs['tuple']['logAccess(string,byte[],uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AccessControlParamsFactory.logAccess(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `hasRole(byte[],uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hasRole: (params: CallParams<AccessControlArgs['obj']['hasRole(byte[],uint64)bool'] | AccessControlArgs['tuple']['hasRole(byte[],uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AccessControlParamsFactory.hasRole(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `hasPermission(byte[],uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hasPermission: (params: CallParams<AccessControlArgs['obj']['hasPermission(byte[],uint64)bool'] | AccessControlArgs['tuple']['hasPermission(byte[],uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AccessControlParamsFactory.hasPermission(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `canExecuteFunction(byte[],string)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    canExecuteFunction: (params: CallParams<AccessControlArgs['obj']['canExecuteFunction(byte[],string)bool'] | AccessControlArgs['tuple']['canExecuteFunction(byte[],string)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AccessControlParamsFactory.canExecuteFunction(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `isSessionValid(byte[],uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isSessionValid: (params: CallParams<AccessControlArgs['obj']['isSessionValid(byte[],uint64)bool'] | AccessControlArgs['tuple']['isSessionValid(byte[],uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AccessControlParamsFactory.isSessionValid(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserRole: (params: CallParams<AccessControlArgs['obj']['getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])'] | AccessControlArgs['tuple']['getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AccessControlParamsFactory.getUserRole(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPermissionRequest: (params: CallParams<AccessControlArgs['obj']['getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)'] | AccessControlArgs['tuple']['getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AccessControlParamsFactory.getPermissionRequest(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAccessControlStats: (params: CallParams<AccessControlArgs['obj']['getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)'] | AccessControlArgs['tuple']['getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AccessControlParamsFactory.getAccessControlStats(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `getAllUserRoles()byte[][]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAllUserRoles: (params: CallParams<AccessControlArgs['obj']['getAllUserRoles()byte[][]'] | AccessControlArgs['tuple']['getAllUserRoles()byte[][]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AccessControlParamsFactory.getAllUserRoles(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPermissionRequestsByUser: (params: CallParams<AccessControlArgs['obj']['getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]'] | AccessControlArgs['tuple']['getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AccessControlParamsFactory.getPermissionRequestsByUser(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AccessControl smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AccessControl smart contract using the `initialize(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<AccessControlArgs['obj']['initialize(uint64,uint64,uint64,uint64)void'] | AccessControlArgs['tuple']['initialize(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `assignRole(byte[],uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    assignRole: (params: CallParams<AccessControlArgs['obj']['assignRole(byte[],uint64,uint64,uint64)void'] | AccessControlArgs['tuple']['assignRole(byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.assignRole(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `revokeRole(byte[],string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    revokeRole: (params: CallParams<AccessControlArgs['obj']['revokeRole(byte[],string)void'] | AccessControlArgs['tuple']['revokeRole(byte[],string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.revokeRole(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `requestPermission(uint64,uint64,string)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    requestPermission: (params: CallParams<AccessControlArgs['obj']['requestPermission(uint64,uint64,string)uint64'] | AccessControlArgs['tuple']['requestPermission(uint64,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.requestPermission(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `approvePermissionRequest(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    approvePermissionRequest: (params: CallParams<AccessControlArgs['obj']['approvePermissionRequest(uint64)void'] | AccessControlArgs['tuple']['approvePermissionRequest(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.approvePermissionRequest(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `rejectPermissionRequest(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    rejectPermissionRequest: (params: CallParams<AccessControlArgs['obj']['rejectPermissionRequest(uint64,string)void'] | AccessControlArgs['tuple']['rejectPermissionRequest(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.rejectPermissionRequest(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `enableEmergencyOverride()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    enableEmergencyOverride: (params: CallParams<AccessControlArgs['obj']['enableEmergencyOverride()void'] | AccessControlArgs['tuple']['enableEmergencyOverride()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.enableEmergencyOverride(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `disableEmergencyOverride()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    disableEmergencyOverride: (params: CallParams<AccessControlArgs['obj']['disableEmergencyOverride()void'] | AccessControlArgs['tuple']['disableEmergencyOverride()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.disableEmergencyOverride(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `transferSuperAdmin(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    transferSuperAdmin: (params: CallParams<AccessControlArgs['obj']['transferSuperAdmin(byte[])void'] | AccessControlArgs['tuple']['transferSuperAdmin(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.transferSuperAdmin(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `updateAccessControlSettings(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAccessControlSettings: (params: CallParams<AccessControlArgs['obj']['updateAccessControlSettings(uint64,uint64,uint64,uint64)void'] | AccessControlArgs['tuple']['updateAccessControlSettings(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.updateAccessControlSettings(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `performSecurityAudit()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    performSecurityAudit: (params: CallParams<AccessControlArgs['obj']['performSecurityAudit()void'] | AccessControlArgs['tuple']['performSecurityAudit()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.performSecurityAudit(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `checkExpiredRoles()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    checkExpiredRoles: (params: CallParams<AccessControlArgs['obj']['checkExpiredRoles()void'] | AccessControlArgs['tuple']['checkExpiredRoles()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.checkExpiredRoles(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `cleanupOldRequests()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    cleanupOldRequests: (params: CallParams<AccessControlArgs['obj']['cleanupOldRequests()void'] | AccessControlArgs['tuple']['cleanupOldRequests()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.cleanupOldRequests(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `logAccess(string,byte[],uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    logAccess: (params: CallParams<AccessControlArgs['obj']['logAccess(string,byte[],uint64,byte[])void'] | AccessControlArgs['tuple']['logAccess(string,byte[],uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.logAccess(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `hasRole(byte[],uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hasRole: (params: CallParams<AccessControlArgs['obj']['hasRole(byte[],uint64)bool'] | AccessControlArgs['tuple']['hasRole(byte[],uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.hasRole(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `hasPermission(byte[],uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hasPermission: (params: CallParams<AccessControlArgs['obj']['hasPermission(byte[],uint64)bool'] | AccessControlArgs['tuple']['hasPermission(byte[],uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.hasPermission(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `canExecuteFunction(byte[],string)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    canExecuteFunction: (params: CallParams<AccessControlArgs['obj']['canExecuteFunction(byte[],string)bool'] | AccessControlArgs['tuple']['canExecuteFunction(byte[],string)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.canExecuteFunction(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `isSessionValid(byte[],uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isSessionValid: (params: CallParams<AccessControlArgs['obj']['isSessionValid(byte[],uint64)bool'] | AccessControlArgs['tuple']['isSessionValid(byte[],uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.isSessionValid(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserRole: (params: CallParams<AccessControlArgs['obj']['getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])'] | AccessControlArgs['tuple']['getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.getUserRole(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPermissionRequest: (params: CallParams<AccessControlArgs['obj']['getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)'] | AccessControlArgs['tuple']['getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.getPermissionRequest(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAccessControlStats: (params: CallParams<AccessControlArgs['obj']['getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)'] | AccessControlArgs['tuple']['getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.getAccessControlStats(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `getAllUserRoles()byte[][]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAllUserRoles: (params: CallParams<AccessControlArgs['obj']['getAllUserRoles()byte[][]'] | AccessControlArgs['tuple']['getAllUserRoles()byte[][]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.getAllUserRoles(params))
    },

    /**
     * Makes a call to the AccessControl smart contract using the `getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPermissionRequestsByUser: (params: CallParams<AccessControlArgs['obj']['getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]'] | AccessControlArgs['tuple']['getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AccessControlParamsFactory.getPermissionRequestsByUser(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AccessControl smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AccessControl smart contract using the `initialize(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<AccessControlArgs['obj']['initialize(uint64,uint64,uint64,uint64)void'] | AccessControlArgs['tuple']['initialize(uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['initialize(uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `assignRole(byte[],uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    assignRole: async (params: CallParams<AccessControlArgs['obj']['assignRole(byte[],uint64,uint64,uint64)void'] | AccessControlArgs['tuple']['assignRole(byte[],uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.assignRole(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['assignRole(byte[],uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `revokeRole(byte[],string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    revokeRole: async (params: CallParams<AccessControlArgs['obj']['revokeRole(byte[],string)void'] | AccessControlArgs['tuple']['revokeRole(byte[],string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.revokeRole(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['revokeRole(byte[],string)void'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `requestPermission(uint64,uint64,string)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    requestPermission: async (params: CallParams<AccessControlArgs['obj']['requestPermission(uint64,uint64,string)uint64'] | AccessControlArgs['tuple']['requestPermission(uint64,uint64,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.requestPermission(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['requestPermission(uint64,uint64,string)uint64'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `approvePermissionRequest(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    approvePermissionRequest: async (params: CallParams<AccessControlArgs['obj']['approvePermissionRequest(uint64)void'] | AccessControlArgs['tuple']['approvePermissionRequest(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.approvePermissionRequest(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['approvePermissionRequest(uint64)void'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `rejectPermissionRequest(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    rejectPermissionRequest: async (params: CallParams<AccessControlArgs['obj']['rejectPermissionRequest(uint64,string)void'] | AccessControlArgs['tuple']['rejectPermissionRequest(uint64,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.rejectPermissionRequest(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['rejectPermissionRequest(uint64,string)void'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `enableEmergencyOverride()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    enableEmergencyOverride: async (params: CallParams<AccessControlArgs['obj']['enableEmergencyOverride()void'] | AccessControlArgs['tuple']['enableEmergencyOverride()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.enableEmergencyOverride(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['enableEmergencyOverride()void'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `disableEmergencyOverride()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    disableEmergencyOverride: async (params: CallParams<AccessControlArgs['obj']['disableEmergencyOverride()void'] | AccessControlArgs['tuple']['disableEmergencyOverride()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.disableEmergencyOverride(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['disableEmergencyOverride()void'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `transferSuperAdmin(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    transferSuperAdmin: async (params: CallParams<AccessControlArgs['obj']['transferSuperAdmin(byte[])void'] | AccessControlArgs['tuple']['transferSuperAdmin(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.transferSuperAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['transferSuperAdmin(byte[])void'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `updateAccessControlSettings(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAccessControlSettings: async (params: CallParams<AccessControlArgs['obj']['updateAccessControlSettings(uint64,uint64,uint64,uint64)void'] | AccessControlArgs['tuple']['updateAccessControlSettings(uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.updateAccessControlSettings(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['updateAccessControlSettings(uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `performSecurityAudit()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    performSecurityAudit: async (params: CallParams<AccessControlArgs['obj']['performSecurityAudit()void'] | AccessControlArgs['tuple']['performSecurityAudit()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.performSecurityAudit(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['performSecurityAudit()void'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `checkExpiredRoles()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    checkExpiredRoles: async (params: CallParams<AccessControlArgs['obj']['checkExpiredRoles()void'] | AccessControlArgs['tuple']['checkExpiredRoles()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.checkExpiredRoles(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['checkExpiredRoles()void'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `cleanupOldRequests()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    cleanupOldRequests: async (params: CallParams<AccessControlArgs['obj']['cleanupOldRequests()void'] | AccessControlArgs['tuple']['cleanupOldRequests()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.cleanupOldRequests(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['cleanupOldRequests()void'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `logAccess(string,byte[],uint64,byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    logAccess: async (params: CallParams<AccessControlArgs['obj']['logAccess(string,byte[],uint64,byte[])void'] | AccessControlArgs['tuple']['logAccess(string,byte[],uint64,byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.logAccess(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['logAccess(string,byte[],uint64,byte[])void'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `hasRole(byte[],uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hasRole: async (params: CallParams<AccessControlArgs['obj']['hasRole(byte[],uint64)bool'] | AccessControlArgs['tuple']['hasRole(byte[],uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.hasRole(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['hasRole(byte[],uint64)bool'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `hasPermission(byte[],uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hasPermission: async (params: CallParams<AccessControlArgs['obj']['hasPermission(byte[],uint64)bool'] | AccessControlArgs['tuple']['hasPermission(byte[],uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.hasPermission(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['hasPermission(byte[],uint64)bool'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `canExecuteFunction(byte[],string)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    canExecuteFunction: async (params: CallParams<AccessControlArgs['obj']['canExecuteFunction(byte[],string)bool'] | AccessControlArgs['tuple']['canExecuteFunction(byte[],string)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.canExecuteFunction(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['canExecuteFunction(byte[],string)bool'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `isSessionValid(byte[],uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isSessionValid: async (params: CallParams<AccessControlArgs['obj']['isSessionValid(byte[],uint64)bool'] | AccessControlArgs['tuple']['isSessionValid(byte[],uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.isSessionValid(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['isSessionValid(byte[],uint64)bool'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserRole: async (params: CallParams<AccessControlArgs['obj']['getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])'] | AccessControlArgs['tuple']['getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.getUserRole(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPermissionRequest: async (params: CallParams<AccessControlArgs['obj']['getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)'] | AccessControlArgs['tuple']['getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.getPermissionRequest(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAccessControlStats: async (params: CallParams<AccessControlArgs['obj']['getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)'] | AccessControlArgs['tuple']['getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.getAccessControlStats(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `getAllUserRoles()byte[][]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAllUserRoles: async (params: CallParams<AccessControlArgs['obj']['getAllUserRoles()byte[][]'] | AccessControlArgs['tuple']['getAllUserRoles()byte[][]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.getAllUserRoles(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['getAllUserRoles()byte[][]'])}
    },

    /**
     * Makes a call to the AccessControl smart contract using the `getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPermissionRequestsByUser: async (params: CallParams<AccessControlArgs['obj']['getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]'] | AccessControlArgs['tuple']['getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AccessControlParamsFactory.getPermissionRequestsByUser(params))
      return {...result, return: result.return as unknown as (undefined | AccessControlReturns['getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AccessControlClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current AccessControl app
   */
  state = {
    /**
     * Methods to access global state for the current AccessControl app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          totalUsers: result.totalUsers,
          totalAdmins: result.totalAdmins,
          totalOperators: result.totalOperators,
          superAdmin: new BinaryStateValue(result.superAdmin),
          maxAdmins: result.maxAdmins,
          maxOperators: result.maxOperators,
          multiSigRequiredForAdmin: result.multiSigRequiredForAdmin,
          permissionRequestCount: result.permissionRequestCount,
          defaultUserPermissions: result.defaultUserPermissions,
          emergencyOverride: result.emergencyOverride,
          adminSessionDuration: result.adminSessionDuration,
          operatorSessionDuration: result.operatorSessionDuration,
          failedAccessAttempts: result.failedAccessAttempts,
          lastSecurityAudit: result.lastSecurityAudit,
          accessLogCount: result.accessLogCount,
        }
      },
      /**
       * Get the current value of the totalUsers key in global state
       */
      totalUsers: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalUsers")) as bigint | undefined },
      /**
       * Get the current value of the totalAdmins key in global state
       */
      totalAdmins: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalAdmins")) as bigint | undefined },
      /**
       * Get the current value of the totalOperators key in global state
       */
      totalOperators: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalOperators")) as bigint | undefined },
      /**
       * Get the current value of the superAdmin key in global state
       */
      superAdmin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("superAdmin")) as Uint8Array | undefined) },
      /**
       * Get the current value of the maxAdmins key in global state
       */
      maxAdmins: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxAdmins")) as bigint | undefined },
      /**
       * Get the current value of the maxOperators key in global state
       */
      maxOperators: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxOperators")) as bigint | undefined },
      /**
       * Get the current value of the multiSigRequiredForAdmin key in global state
       */
      multiSigRequiredForAdmin: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("multiSigRequiredForAdmin")) as bigint | undefined },
      /**
       * Get the current value of the permissionRequestCount key in global state
       */
      permissionRequestCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("permissionRequestCount")) as bigint | undefined },
      /**
       * Get the current value of the defaultUserPermissions key in global state
       */
      defaultUserPermissions: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("defaultUserPermissions")) as bigint | undefined },
      /**
       * Get the current value of the emergencyOverride key in global state
       */
      emergencyOverride: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("emergencyOverride")) as bigint | undefined },
      /**
       * Get the current value of the adminSessionDuration key in global state
       */
      adminSessionDuration: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("adminSessionDuration")) as bigint | undefined },
      /**
       * Get the current value of the operatorSessionDuration key in global state
       */
      operatorSessionDuration: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("operatorSessionDuration")) as bigint | undefined },
      /**
       * Get the current value of the failedAccessAttempts key in global state
       */
      failedAccessAttempts: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("failedAccessAttempts")) as bigint | undefined },
      /**
       * Get the current value of the lastSecurityAudit key in global state
       */
      lastSecurityAudit: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastSecurityAudit")) as bigint | undefined },
      /**
       * Get the current value of the accessLogCount key in global state
       */
      accessLogCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("accessLogCount")) as bigint | undefined },
    },
  }

  public newGroup(): AccessControlComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initialize(uint64,uint64,uint64,uint64)void method call against the AccessControl contract
       */
      initialize(params: CallParams<AccessControlArgs['obj']['initialize(uint64,uint64,uint64,uint64)void'] | AccessControlArgs['tuple']['initialize(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a assignRole(byte[],uint64,uint64,uint64)void method call against the AccessControl contract
       */
      assignRole(params: CallParams<AccessControlArgs['obj']['assignRole(byte[],uint64,uint64,uint64)void'] | AccessControlArgs['tuple']['assignRole(byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.assignRole(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a revokeRole(byte[],string)void method call against the AccessControl contract
       */
      revokeRole(params: CallParams<AccessControlArgs['obj']['revokeRole(byte[],string)void'] | AccessControlArgs['tuple']['revokeRole(byte[],string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.revokeRole(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a requestPermission(uint64,uint64,string)uint64 method call against the AccessControl contract
       */
      requestPermission(params: CallParams<AccessControlArgs['obj']['requestPermission(uint64,uint64,string)uint64'] | AccessControlArgs['tuple']['requestPermission(uint64,uint64,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.requestPermission(params)))
        resultMappers.push((v) => client.decodeReturnValue('requestPermission(uint64,uint64,string)uint64', v))
        return this
      },
      /**
       * Add a approvePermissionRequest(uint64)void method call against the AccessControl contract
       */
      approvePermissionRequest(params: CallParams<AccessControlArgs['obj']['approvePermissionRequest(uint64)void'] | AccessControlArgs['tuple']['approvePermissionRequest(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.approvePermissionRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a rejectPermissionRequest(uint64,string)void method call against the AccessControl contract
       */
      rejectPermissionRequest(params: CallParams<AccessControlArgs['obj']['rejectPermissionRequest(uint64,string)void'] | AccessControlArgs['tuple']['rejectPermissionRequest(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.rejectPermissionRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a enableEmergencyOverride()void method call against the AccessControl contract
       */
      enableEmergencyOverride(params: CallParams<AccessControlArgs['obj']['enableEmergencyOverride()void'] | AccessControlArgs['tuple']['enableEmergencyOverride()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.enableEmergencyOverride(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a disableEmergencyOverride()void method call against the AccessControl contract
       */
      disableEmergencyOverride(params: CallParams<AccessControlArgs['obj']['disableEmergencyOverride()void'] | AccessControlArgs['tuple']['disableEmergencyOverride()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.disableEmergencyOverride(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a transferSuperAdmin(byte[])void method call against the AccessControl contract
       */
      transferSuperAdmin(params: CallParams<AccessControlArgs['obj']['transferSuperAdmin(byte[])void'] | AccessControlArgs['tuple']['transferSuperAdmin(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.transferSuperAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateAccessControlSettings(uint64,uint64,uint64,uint64)void method call against the AccessControl contract
       */
      updateAccessControlSettings(params: CallParams<AccessControlArgs['obj']['updateAccessControlSettings(uint64,uint64,uint64,uint64)void'] | AccessControlArgs['tuple']['updateAccessControlSettings(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAccessControlSettings(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a performSecurityAudit()void method call against the AccessControl contract
       */
      performSecurityAudit(params: CallParams<AccessControlArgs['obj']['performSecurityAudit()void'] | AccessControlArgs['tuple']['performSecurityAudit()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.performSecurityAudit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a checkExpiredRoles()void method call against the AccessControl contract
       */
      checkExpiredRoles(params: CallParams<AccessControlArgs['obj']['checkExpiredRoles()void'] | AccessControlArgs['tuple']['checkExpiredRoles()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.checkExpiredRoles(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a cleanupOldRequests()void method call against the AccessControl contract
       */
      cleanupOldRequests(params: CallParams<AccessControlArgs['obj']['cleanupOldRequests()void'] | AccessControlArgs['tuple']['cleanupOldRequests()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.cleanupOldRequests(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a logAccess(string,byte[],uint64,byte[])void method call against the AccessControl contract
       */
      logAccess(params: CallParams<AccessControlArgs['obj']['logAccess(string,byte[],uint64,byte[])void'] | AccessControlArgs['tuple']['logAccess(string,byte[],uint64,byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.logAccess(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a hasRole(byte[],uint64)bool method call against the AccessControl contract
       */
      hasRole(params: CallParams<AccessControlArgs['obj']['hasRole(byte[],uint64)bool'] | AccessControlArgs['tuple']['hasRole(byte[],uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hasRole(params)))
        resultMappers.push((v) => client.decodeReturnValue('hasRole(byte[],uint64)bool', v))
        return this
      },
      /**
       * Add a hasPermission(byte[],uint64)bool method call against the AccessControl contract
       */
      hasPermission(params: CallParams<AccessControlArgs['obj']['hasPermission(byte[],uint64)bool'] | AccessControlArgs['tuple']['hasPermission(byte[],uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hasPermission(params)))
        resultMappers.push((v) => client.decodeReturnValue('hasPermission(byte[],uint64)bool', v))
        return this
      },
      /**
       * Add a canExecuteFunction(byte[],string)bool method call against the AccessControl contract
       */
      canExecuteFunction(params: CallParams<AccessControlArgs['obj']['canExecuteFunction(byte[],string)bool'] | AccessControlArgs['tuple']['canExecuteFunction(byte[],string)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.canExecuteFunction(params)))
        resultMappers.push((v) => client.decodeReturnValue('canExecuteFunction(byte[],string)bool', v))
        return this
      },
      /**
       * Add a isSessionValid(byte[],uint64)bool method call against the AccessControl contract
       */
      isSessionValid(params: CallParams<AccessControlArgs['obj']['isSessionValid(byte[],uint64)bool'] | AccessControlArgs['tuple']['isSessionValid(byte[],uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isSessionValid(params)))
        resultMappers.push((v) => client.decodeReturnValue('isSessionValid(byte[],uint64)bool', v))
        return this
      },
      /**
       * Add a getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[]) method call against the AccessControl contract
       */
      getUserRole(params: CallParams<AccessControlArgs['obj']['getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])'] | AccessControlArgs['tuple']['getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserRole(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])', v))
        return this
      },
      /**
       * Add a getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64) method call against the AccessControl contract
       */
      getPermissionRequest(params: CallParams<AccessControlArgs['obj']['getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)'] | AccessControlArgs['tuple']['getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPermissionRequest(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)', v))
        return this
      },
      /**
       * Add a getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64) method call against the AccessControl contract
       */
      getAccessControlStats(params: CallParams<AccessControlArgs['obj']['getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)'] | AccessControlArgs['tuple']['getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAccessControlStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)', v))
        return this
      },
      /**
       * Add a getAllUserRoles()byte[][] method call against the AccessControl contract
       */
      getAllUserRoles(params: CallParams<AccessControlArgs['obj']['getAllUserRoles()byte[][]'] | AccessControlArgs['tuple']['getAllUserRoles()byte[][]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAllUserRoles(params)))
        resultMappers.push((v) => client.decodeReturnValue('getAllUserRoles()byte[][]', v))
        return this
      },
      /**
       * Add a getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[] method call against the AccessControl contract
       */
      getPermissionRequestsByUser(params: CallParams<AccessControlArgs['obj']['getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]'] | AccessControlArgs['tuple']['getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPermissionRequestsByUser(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]', v))
        return this
      },
      /**
       * Add a clear state call to the AccessControl contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AccessControlComposer
  }
}
export type AccessControlComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize(uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<AccessControlArgs['obj']['initialize(uint64,uint64,uint64,uint64)void'] | AccessControlArgs['tuple']['initialize(uint64,uint64,uint64,uint64)void']>): AccessControlComposer<[...TReturns, AccessControlReturns['initialize(uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the assignRole(byte[],uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assignRole(params?: CallParams<AccessControlArgs['obj']['assignRole(byte[],uint64,uint64,uint64)void'] | AccessControlArgs['tuple']['assignRole(byte[],uint64,uint64,uint64)void']>): AccessControlComposer<[...TReturns, AccessControlReturns['assignRole(byte[],uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the revokeRole(byte[],string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  revokeRole(params?: CallParams<AccessControlArgs['obj']['revokeRole(byte[],string)void'] | AccessControlArgs['tuple']['revokeRole(byte[],string)void']>): AccessControlComposer<[...TReturns, AccessControlReturns['revokeRole(byte[],string)void'] | undefined]>

  /**
   * Calls the requestPermission(uint64,uint64,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  requestPermission(params?: CallParams<AccessControlArgs['obj']['requestPermission(uint64,uint64,string)uint64'] | AccessControlArgs['tuple']['requestPermission(uint64,uint64,string)uint64']>): AccessControlComposer<[...TReturns, AccessControlReturns['requestPermission(uint64,uint64,string)uint64'] | undefined]>

  /**
   * Calls the approvePermissionRequest(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approvePermissionRequest(params?: CallParams<AccessControlArgs['obj']['approvePermissionRequest(uint64)void'] | AccessControlArgs['tuple']['approvePermissionRequest(uint64)void']>): AccessControlComposer<[...TReturns, AccessControlReturns['approvePermissionRequest(uint64)void'] | undefined]>

  /**
   * Calls the rejectPermissionRequest(uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  rejectPermissionRequest(params?: CallParams<AccessControlArgs['obj']['rejectPermissionRequest(uint64,string)void'] | AccessControlArgs['tuple']['rejectPermissionRequest(uint64,string)void']>): AccessControlComposer<[...TReturns, AccessControlReturns['rejectPermissionRequest(uint64,string)void'] | undefined]>

  /**
   * Calls the enableEmergencyOverride()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  enableEmergencyOverride(params?: CallParams<AccessControlArgs['obj']['enableEmergencyOverride()void'] | AccessControlArgs['tuple']['enableEmergencyOverride()void']>): AccessControlComposer<[...TReturns, AccessControlReturns['enableEmergencyOverride()void'] | undefined]>

  /**
   * Calls the disableEmergencyOverride()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  disableEmergencyOverride(params?: CallParams<AccessControlArgs['obj']['disableEmergencyOverride()void'] | AccessControlArgs['tuple']['disableEmergencyOverride()void']>): AccessControlComposer<[...TReturns, AccessControlReturns['disableEmergencyOverride()void'] | undefined]>

  /**
   * Calls the transferSuperAdmin(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferSuperAdmin(params?: CallParams<AccessControlArgs['obj']['transferSuperAdmin(byte[])void'] | AccessControlArgs['tuple']['transferSuperAdmin(byte[])void']>): AccessControlComposer<[...TReturns, AccessControlReturns['transferSuperAdmin(byte[])void'] | undefined]>

  /**
   * Calls the updateAccessControlSettings(uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAccessControlSettings(params?: CallParams<AccessControlArgs['obj']['updateAccessControlSettings(uint64,uint64,uint64,uint64)void'] | AccessControlArgs['tuple']['updateAccessControlSettings(uint64,uint64,uint64,uint64)void']>): AccessControlComposer<[...TReturns, AccessControlReturns['updateAccessControlSettings(uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the performSecurityAudit()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  performSecurityAudit(params?: CallParams<AccessControlArgs['obj']['performSecurityAudit()void'] | AccessControlArgs['tuple']['performSecurityAudit()void']>): AccessControlComposer<[...TReturns, AccessControlReturns['performSecurityAudit()void'] | undefined]>

  /**
   * Calls the checkExpiredRoles()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkExpiredRoles(params?: CallParams<AccessControlArgs['obj']['checkExpiredRoles()void'] | AccessControlArgs['tuple']['checkExpiredRoles()void']>): AccessControlComposer<[...TReturns, AccessControlReturns['checkExpiredRoles()void'] | undefined]>

  /**
   * Calls the cleanupOldRequests()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cleanupOldRequests(params?: CallParams<AccessControlArgs['obj']['cleanupOldRequests()void'] | AccessControlArgs['tuple']['cleanupOldRequests()void']>): AccessControlComposer<[...TReturns, AccessControlReturns['cleanupOldRequests()void'] | undefined]>

  /**
   * Calls the logAccess(string,byte[],uint64,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  logAccess(params?: CallParams<AccessControlArgs['obj']['logAccess(string,byte[],uint64,byte[])void'] | AccessControlArgs['tuple']['logAccess(string,byte[],uint64,byte[])void']>): AccessControlComposer<[...TReturns, AccessControlReturns['logAccess(string,byte[],uint64,byte[])void'] | undefined]>

  /**
   * Calls the hasRole(byte[],uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hasRole(params?: CallParams<AccessControlArgs['obj']['hasRole(byte[],uint64)bool'] | AccessControlArgs['tuple']['hasRole(byte[],uint64)bool']>): AccessControlComposer<[...TReturns, AccessControlReturns['hasRole(byte[],uint64)bool'] | undefined]>

  /**
   * Calls the hasPermission(byte[],uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hasPermission(params?: CallParams<AccessControlArgs['obj']['hasPermission(byte[],uint64)bool'] | AccessControlArgs['tuple']['hasPermission(byte[],uint64)bool']>): AccessControlComposer<[...TReturns, AccessControlReturns['hasPermission(byte[],uint64)bool'] | undefined]>

  /**
   * Calls the canExecuteFunction(byte[],string)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  canExecuteFunction(params?: CallParams<AccessControlArgs['obj']['canExecuteFunction(byte[],string)bool'] | AccessControlArgs['tuple']['canExecuteFunction(byte[],string)bool']>): AccessControlComposer<[...TReturns, AccessControlReturns['canExecuteFunction(byte[],string)bool'] | undefined]>

  /**
   * Calls the isSessionValid(byte[],uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isSessionValid(params?: CallParams<AccessControlArgs['obj']['isSessionValid(byte[],uint64)bool'] | AccessControlArgs['tuple']['isSessionValid(byte[],uint64)bool']>): AccessControlComposer<[...TReturns, AccessControlReturns['isSessionValid(byte[],uint64)bool'] | undefined]>

  /**
   * Calls the getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserRole(params?: CallParams<AccessControlArgs['obj']['getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])'] | AccessControlArgs['tuple']['getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])']>): AccessControlComposer<[...TReturns, AccessControlReturns['getUserRole(byte[])(uint64,uint64,byte[],uint64,uint64,uint64,uint64,byte[])'] | undefined]>

  /**
   * Calls the getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPermissionRequest(params?: CallParams<AccessControlArgs['obj']['getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)'] | AccessControlArgs['tuple']['getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)']>): AccessControlComposer<[...TReturns, AccessControlReturns['getPermissionRequest(uint64)(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)'] | undefined]>

  /**
   * Calls the getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAccessControlStats(params?: CallParams<AccessControlArgs['obj']['getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)'] | AccessControlArgs['tuple']['getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)']>): AccessControlComposer<[...TReturns, AccessControlReturns['getAccessControlStats()(uint64,uint64,uint64,uint64,bool,uint64)'] | undefined]>

  /**
   * Calls the getAllUserRoles()byte[][] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAllUserRoles(params?: CallParams<AccessControlArgs['obj']['getAllUserRoles()byte[][]'] | AccessControlArgs['tuple']['getAllUserRoles()byte[][]']>): AccessControlComposer<[...TReturns, AccessControlReturns['getAllUserRoles()byte[][]'] | undefined]>

  /**
   * Calls the getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPermissionRequestsByUser(params?: CallParams<AccessControlArgs['obj']['getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]'] | AccessControlArgs['tuple']['getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]']>): AccessControlComposer<[...TReturns, AccessControlReturns['getPermissionRequestsByUser(byte[])(byte[],uint64,uint64,byte[],uint64,uint64,byte[],uint64)[]'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AccessControl smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AccessControlComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AccessControlComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AccessControlComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AccessControlComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AccessControlComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AccessControlComposerResults<TReturns>>
}
export type AccessControlComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

