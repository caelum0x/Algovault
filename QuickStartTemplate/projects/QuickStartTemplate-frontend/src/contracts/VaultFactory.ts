/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"VaultFactory","structs":{},"methods":[{"name":"initialize","args":[{"type":"uint64","name":"poolCreationFee"},{"type":"uint64","name":"factoryFeeRate"},{"type":"byte[]","name":"feeCollector"},{"type":"uint64","name":"maxPoolsPerUser"},{"type":"uint64","name":"minimumInitialStake"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"createPool","args":[{"type":"uint64","name":"assetId"},{"type":"uint64","name":"initialRewardPool"},{"type":"uint64","name":"rewardRate"},{"type":"uint64","name":"minimumStake"},{"type":"uint64","name":"maxStakePerUser"},{"type":"uint64","name":"lockupPeriod"},{"type":"uint64","name":"earlyWithdrawPenalty"},{"type":"uint64","name":"templateId"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"updatePoolStatus","args":[{"type":"uint64","name":"poolId"},{"type":"uint64","name":"newStatus"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"updatePoolMetrics","args":[{"type":"uint64","name":"poolId"},{"type":"uint64","name":"totalStaked"},{"type":"uint64","name":"totalRewards"},{"type":"uint64","name":"participantCount"},{"type":"uint64","name":"apy"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addPoolTemplate","args":[{"type":"byte[]","name":"name"},{"type":"byte[]","name":"stakingTemplate"},{"type":"byte[]","name":"distributorTemplate"},{"type":"byte[]","name":"compounderTemplate"},{"type":"byte[]","name":"defaultParams"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"setDefaultTemplate","args":[{"type":"uint64","name":"templateId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"updateFactorySettings","args":[{"type":"uint64","name":"newCreationFee"},{"type":"uint64","name":"newFactoryFee"},{"type":"uint64","name":"newMaxPools"},{"type":"uint64","name":"newMinStake"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"emergencyPauseFactory","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"resumeFactory","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"setGovernanceContract","args":[{"type":"byte[]","name":"governanceAddr"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getPoolInfo","args":[{"type":"uint64","name":"poolId"}],"returns":{"type":"(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getTemplate","args":[{"type":"uint64","name":"templateId"}],"returns":{"type":"(byte[],byte[],byte[],byte[],byte[])"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":10,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"poolCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"cG9vbENvdW50"},"totalTVL":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxUVkw="},"factoryOwner":{"keyType":"AVMString","valueType":"AVMBytes","key":"ZmFjdG9yeU93bmVy"},"poolCreationFee":{"keyType":"AVMString","valueType":"AVMUint64","key":"cG9vbENyZWF0aW9uRmVl"},"factoryFeeRate":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZmFjdG9yeUZlZVJhdGU="},"feeCollector":{"keyType":"AVMString","valueType":"AVMBytes","key":"ZmVlQ29sbGVjdG9y"},"maxPoolsPerUser":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4UG9vbHNQZXJVc2Vy"},"minimumInitialStake":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWluaW11bUluaXRpYWxTdGFrZQ=="},"factoryActive":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZmFjdG9yeUFjdGl2ZQ=="},"templateCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"dGVtcGxhdGVDb3VudA=="},"defaultTemplate":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZGVmYXVsdFRlbXBsYXRl"},"emergencyPause":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZW1lcmdlbmN5UGF1c2U="},"governanceContract":{"keyType":"AVMString","valueType":"AVMBytes","key":"Z292ZXJuYW5jZUNvbnRyYWN0"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1343,1554,1588,1616,1640,1910,1917,1924,1931,1938,1945,1955,1965,1974,1984,1994,2004,2014,2024,2034,2044,2061,2068,2075,2082,2089],"errorMessage":"Box must have value"},{"pc":[595,737,952,970,982,994,1022,1038,1085,1117,1137,1186],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1225],"errorMessage":"can only call when creating"},{"pc":[598,740,955,973,985,997,1025,1041,1088,1120,1140,1189],"errorMessage":"can only call when not creating"},{"pc":[1235,1310,1316,1323,1348,1357,1522,1592,1620,1677,1695,1702,1784,1811,1840,1853,1869],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmIQh0b3RhbFRWTAxmYWN0b3J5T3duZXIMX3RvdGFsU3Rha2VkBBUffHUOZW1lcmdlbmN5UGF1c2UNZmFjdG9yeUFjdGl2ZQlwb29sQ291bnQPbWF4UG9vbHNQZXJVc2VyE21pbmltdW1Jbml0aWFsU3Rha2UNdGVtcGxhdGVDb3VudA9kZWZhdWx0VGVtcGxhdGUHX3N0YXR1cw1fdG90YWxSZXdhcmRzEV9wYXJ0aWNpcGFudENvdW50BF9hcHkFX25hbWUPcG9vbENyZWF0aW9uRmVlDmZhY3RvcnlGZWVSYXRlCF9hc3NldElkEF9zdGFraW5nQ29udHJhY3QSX3Jld2FyZERpc3RyaWJ1dG9yD19hdXRvQ29tcG91bmRlchBfZ292ZXJuYW5jZVZhdWx0CF9jcmVhdG9yCl9jcmVhdGVkQXQNX21pbmltdW1TdGFrZRBfbWF4U3Rha2VQZXJVc2VyDV9sb2NrdXBQZXJpb2QVX2Vhcmx5V2l0aGRyYXdQZW5hbHR5GF9zdGFraW5nQ29udHJhY3RUZW1wbGF0ZRpfcmV3YXJkRGlzdHJpYnV0b3JUZW1wbGF0ZRdfYXV0b0NvbXBvdW5kZXJUZW1wbGF0ZRJfZGVmYXVsdFBhcmFtZXRlcnMxG0ECzoIMBKLIGw0EjNbCUATBmd4NBCRhcfYEhjzH4QQkNIgnBKhMga8EVDLMpgQT48zYBAZjPkoEm32U9QSO0cDtNhoAjgwCUQIgAgwB7AG9Aa0BkQGFAXkBZwCQAAIiQzEZFEQxGEQ2GgEXiAWkSwQVFlcGAk8FUEsEFRZXBgJPBVBLBBUWVwYCTwVQSwQVFlcGAk8FUEsEFRZXBgJPBVBLBBWBCghJFlcGAoACAApMUEsFFU8CCEkWVwYCTwJMUEsEFU8CCEkWVwYCTwJMUEsDFU8CCBZXBgJQTwVQTwRQTwNQTwJQTFArTFCwI0MxGRREMRhENhoBF4gEfE8QFk8QFksQFRZXBgJPEVBLEBUWVwYCTxFQSxAVFlcGAk8RUEsQFRZXBgJPEVBLEBUWVwYCTxFQTxAWTxAWTxAWTxAWTxAWTxAWTxAWTxAWTxAWTxAWTxBPEFCAAgBqUEsPFYFqCEkWVwYCTwJMUEsPFU8CCEkWVwYCTwJMUEsOFU8CCEkWVwYCTwJMUEsNFU8CCBZXBgJQTwpQTwlQTwhQTwdQTwZQTwVQTwRQTwNQTwJQTFBPBVBPBFBPA1BPAlBMUCtMULAjQzEZFEQxGEQ2GgFXAgCIA4AjQzEZFEQxGESIA2cjQzEZFEQxGESIA04jQzEZFEQxGEQ2GgEXNhoCFzYaAxc2GgQXiAMSI0MxGRREMRhENhoBF4gC5yNDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBFcCADYaBVcCAIgCZBYrTFCwI0MxGRREMRhENhoBFzYaAhc2GgMXNhoEFzYaBReIAgIjQzEZFEQxGEQ2GgEXNhoCF4gBkyNDMRkURDEYRDYaARc2GgIXNhoDFzYaBBc2GgUXNhoGFzYaBxc2GggXiAB/FitMULAjQzEZFEQxGEQ2GgEXNhoCFzYaA1cCADYaBBc2GgUXiAANI0MxGUD9iDEYFEQjQ4oFACInBWVEFEQnBiJnKCJnKTEAZycQi/tnJxGL/GeADGZlZUNvbGxlY3Rvcov9ZycHi/5nJwiL/2cnBSNnJwQiZycJImcnCiJniYoIASInBWVERCInBGVEFEQiJwhlRIv5DkQxAEm9RQFBAMKLAL5MF0xEIicHZURLAQ1EIicGZUQjCCcGSwFnMQBHA0sEFkknElCL+Ba/SScTUEm8SE8Fv0knFFBJvEhPBL9JJxVQSbxITwO/SScWUEm8SE8Cv0knF1AxAEsBvEi/SScYUDIHFr9JJwtQIhZMSwG/SwEqUEsBv0sBJwxQi/kWv0sBJw1QSwG/SwEnDlBMv0knGVCL+xa/SScaUIv8Fr9JJxtQi/0WvyccUIv+Fr9MIwgWiwBMvyIoZUSL+QgoTGdMiSJC/0GKAgCL/hZJJwtQSb5MF0lOAk4DRIv/Fk8CTL9AACGL/yMSQAAIi/+BAhJBABKLACpQvkwXTEQiKGVETAkoTGeLAUEAFov/QAARiwAqUL5MF0xEIihlRAgoTGeJigUAi/sWSSpQSb5MF0xEi/wWTwJMv0sBJwxQi/0Wv0sBJw1Qi/4Wv0wnDlCL/xa/IihlREwJi/wIKExniYoFATEAIillRBJEIicJZUQjCEknCUsBZ0kWSScPUEm8SIv7v0knHVBJvEiL/L9JJx5QSbxIi/2/SScfUEm8SIv+vycgUEm8SIv/vyMSQQAFJwqLAGeLAEyJigEAMQAiKWVEEkSL/xYnD1C9RQFEJwqL/2eJigQAMQAiKWVEEkQnEIv8ZycRi/1nJweL/mcnCIv/Z4kxACIpZUQSRCcEI2eJMQAiKWVEEkQnBCJniYoBADEAIillRBJEgBJnb3Zlcm5hbmNlQ29udHJhY3SL/2eJigERi/8WSScSUL5MF0xESwEnE1C+REsCJxRQvkRLAycVUL5ESwQnFlC+REsFJxdQvkRLBicYUL5MF0xESwcnC1C+TBdMREsIKlC+TBdMREsJJwxQvkwXTERLCicNUL5MF0xESwsnDlC+TBdMREsMJxlQvkwXTERLDScaUL5MF0xESw4nG1C+TBdMRE8PJxxQvkwXTESL/04QiYoBBYv/FkknD1C+REsBJx1QvkRLAiceUL5ESwMnH1C+RE8EJyBQvkSJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the VaultFactory contract
 */
export type VaultFactoryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initialize(uint64,uint64,byte[],uint64,uint64)void': {
      poolCreationFee: bigint | number
      factoryFeeRate: bigint | number
      feeCollector: Uint8Array
      maxPoolsPerUser: bigint | number
      minimumInitialStake: bigint | number
    }
    'createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64': {
      assetId: bigint | number
      initialRewardPool: bigint | number
      rewardRate: bigint | number
      minimumStake: bigint | number
      maxStakePerUser: bigint | number
      lockupPeriod: bigint | number
      earlyWithdrawPenalty: bigint | number
      templateId: bigint | number
    }
    'updatePoolStatus(uint64,uint64)void': {
      poolId: bigint | number
      newStatus: bigint | number
    }
    'updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void': {
      poolId: bigint | number
      totalStaked: bigint | number
      totalRewards: bigint | number
      participantCount: bigint | number
      apy: bigint | number
    }
    'addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64': {
      name: Uint8Array
      stakingTemplate: Uint8Array
      distributorTemplate: Uint8Array
      compounderTemplate: Uint8Array
      defaultParams: Uint8Array
    }
    'setDefaultTemplate(uint64)void': {
      templateId: bigint | number
    }
    'updateFactorySettings(uint64,uint64,uint64,uint64)void': {
      newCreationFee: bigint | number
      newFactoryFee: bigint | number
      newMaxPools: bigint | number
      newMinStake: bigint | number
    }
    'emergencyPauseFactory()void': Record<string, never>
    'resumeFactory()void': Record<string, never>
    'setGovernanceContract(byte[])void': {
      governanceAddr: Uint8Array
    }
    'getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': {
      poolId: bigint | number
    }
    'getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])': {
      templateId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initialize(uint64,uint64,byte[],uint64,uint64)void': [poolCreationFee: bigint | number, factoryFeeRate: bigint | number, feeCollector: Uint8Array, maxPoolsPerUser: bigint | number, minimumInitialStake: bigint | number]
    'createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64': [assetId: bigint | number, initialRewardPool: bigint | number, rewardRate: bigint | number, minimumStake: bigint | number, maxStakePerUser: bigint | number, lockupPeriod: bigint | number, earlyWithdrawPenalty: bigint | number, templateId: bigint | number]
    'updatePoolStatus(uint64,uint64)void': [poolId: bigint | number, newStatus: bigint | number]
    'updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void': [poolId: bigint | number, totalStaked: bigint | number, totalRewards: bigint | number, participantCount: bigint | number, apy: bigint | number]
    'addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64': [name: Uint8Array, stakingTemplate: Uint8Array, distributorTemplate: Uint8Array, compounderTemplate: Uint8Array, defaultParams: Uint8Array]
    'setDefaultTemplate(uint64)void': [templateId: bigint | number]
    'updateFactorySettings(uint64,uint64,uint64,uint64)void': [newCreationFee: bigint | number, newFactoryFee: bigint | number, newMaxPools: bigint | number, newMinStake: bigint | number]
    'emergencyPauseFactory()void': []
    'resumeFactory()void': []
    'setGovernanceContract(byte[])void': [governanceAddr: Uint8Array]
    'getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': [poolId: bigint | number]
    'getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])': [templateId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type VaultFactoryReturns = {
  'initialize(uint64,uint64,byte[],uint64,uint64)void': void
  'createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64': bigint
  'updatePoolStatus(uint64,uint64)void': void
  'updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void': void
  'addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64': bigint
  'setDefaultTemplate(uint64)void': void
  'updateFactorySettings(uint64,uint64,uint64,uint64)void': void
  'emergencyPauseFactory()void': void
  'resumeFactory()void': void
  'setGovernanceContract(byte[])void': void
  'getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': [bigint, bigint, Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint]
  'getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])': [Uint8Array, Uint8Array, Uint8Array, Uint8Array, Uint8Array]
}

/**
 * Defines the types of available calls and state of the VaultFactory smart contract.
 */
export type VaultFactoryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize(uint64,uint64,byte[],uint64,uint64)void' | 'initialize', {
      argsObj: VaultFactoryArgs['obj']['initialize(uint64,uint64,byte[],uint64,uint64)void']
      argsTuple: VaultFactoryArgs['tuple']['initialize(uint64,uint64,byte[],uint64,uint64)void']
      returns: VaultFactoryReturns['initialize(uint64,uint64,byte[],uint64,uint64)void']
    }>
    & Record<'createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64' | 'createPool', {
      argsObj: VaultFactoryArgs['obj']['createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']
      argsTuple: VaultFactoryArgs['tuple']['createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']
      returns: VaultFactoryReturns['createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']
    }>
    & Record<'updatePoolStatus(uint64,uint64)void' | 'updatePoolStatus', {
      argsObj: VaultFactoryArgs['obj']['updatePoolStatus(uint64,uint64)void']
      argsTuple: VaultFactoryArgs['tuple']['updatePoolStatus(uint64,uint64)void']
      returns: VaultFactoryReturns['updatePoolStatus(uint64,uint64)void']
    }>
    & Record<'updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void' | 'updatePoolMetrics', {
      argsObj: VaultFactoryArgs['obj']['updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void']
      argsTuple: VaultFactoryArgs['tuple']['updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void']
      returns: VaultFactoryReturns['updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void']
    }>
    & Record<'addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64' | 'addPoolTemplate', {
      argsObj: VaultFactoryArgs['obj']['addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64']
      argsTuple: VaultFactoryArgs['tuple']['addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64']
      returns: VaultFactoryReturns['addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64']
    }>
    & Record<'setDefaultTemplate(uint64)void' | 'setDefaultTemplate', {
      argsObj: VaultFactoryArgs['obj']['setDefaultTemplate(uint64)void']
      argsTuple: VaultFactoryArgs['tuple']['setDefaultTemplate(uint64)void']
      returns: VaultFactoryReturns['setDefaultTemplate(uint64)void']
    }>
    & Record<'updateFactorySettings(uint64,uint64,uint64,uint64)void' | 'updateFactorySettings', {
      argsObj: VaultFactoryArgs['obj']['updateFactorySettings(uint64,uint64,uint64,uint64)void']
      argsTuple: VaultFactoryArgs['tuple']['updateFactorySettings(uint64,uint64,uint64,uint64)void']
      returns: VaultFactoryReturns['updateFactorySettings(uint64,uint64,uint64,uint64)void']
    }>
    & Record<'emergencyPauseFactory()void' | 'emergencyPauseFactory', {
      argsObj: VaultFactoryArgs['obj']['emergencyPauseFactory()void']
      argsTuple: VaultFactoryArgs['tuple']['emergencyPauseFactory()void']
      returns: VaultFactoryReturns['emergencyPauseFactory()void']
    }>
    & Record<'resumeFactory()void' | 'resumeFactory', {
      argsObj: VaultFactoryArgs['obj']['resumeFactory()void']
      argsTuple: VaultFactoryArgs['tuple']['resumeFactory()void']
      returns: VaultFactoryReturns['resumeFactory()void']
    }>
    & Record<'setGovernanceContract(byte[])void' | 'setGovernanceContract', {
      argsObj: VaultFactoryArgs['obj']['setGovernanceContract(byte[])void']
      argsTuple: VaultFactoryArgs['tuple']['setGovernanceContract(byte[])void']
      returns: VaultFactoryReturns['setGovernanceContract(byte[])void']
    }>
    & Record<'getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' | 'getPoolInfo', {
      argsObj: VaultFactoryArgs['obj']['getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: VaultFactoryArgs['tuple']['getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      returns: VaultFactoryReturns['getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])' | 'getTemplate', {
      argsObj: VaultFactoryArgs['obj']['getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])']
      argsTuple: VaultFactoryArgs['tuple']['getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])']
      returns: VaultFactoryReturns['getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        poolCount: bigint
        totalTvl: bigint
        factoryOwner: BinaryState
        poolCreationFee: bigint
        factoryFeeRate: bigint
        feeCollector: BinaryState
        maxPoolsPerUser: bigint
        minimumInitialStake: bigint
        factoryActive: bigint
        templateCount: bigint
        defaultTemplate: bigint
        emergencyPause: bigint
        governanceContract: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type VaultFactorySignatures = keyof VaultFactoryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type VaultFactoryNonVoidMethodSignatures = keyof VaultFactoryTypes['methods'] extends infer T ? T extends keyof VaultFactoryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the VaultFactory smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends VaultFactorySignatures> = VaultFactoryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the VaultFactory smart contract to the method's return type
 */
export type MethodReturn<TSignature extends VaultFactorySignatures> = VaultFactoryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = VaultFactoryTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type VaultFactoryCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type VaultFactoryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: VaultFactoryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the VaultFactory smart contract
 */
export abstract class VaultFactoryParamsFactory {
  /**
   * Constructs a no op call for the initialize(uint64,uint64,byte[],uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<VaultFactoryArgs['obj']['initialize(uint64,uint64,byte[],uint64,uint64)void'] | VaultFactoryArgs['tuple']['initialize(uint64,uint64,byte[],uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize(uint64,uint64,byte[],uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolCreationFee, params.args.factoryFeeRate, params.args.feeCollector, params.args.maxPoolsPerUser, params.args.minimumInitialStake],
    }
  }
  /**
   * Constructs a no op call for the createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPool(params: CallParams<VaultFactoryArgs['obj']['createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | VaultFactoryArgs['tuple']['createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.initialRewardPool, params.args.rewardRate, params.args.minimumStake, params.args.maxStakePerUser, params.args.lockupPeriod, params.args.earlyWithdrawPenalty, params.args.templateId],
    }
  }
  /**
   * Constructs a no op call for the updatePoolStatus(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePoolStatus(params: CallParams<VaultFactoryArgs['obj']['updatePoolStatus(uint64,uint64)void'] | VaultFactoryArgs['tuple']['updatePoolStatus(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updatePoolStatus(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.newStatus],
    }
  }
  /**
   * Constructs a no op call for the updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePoolMetrics(params: CallParams<VaultFactoryArgs['obj']['updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void'] | VaultFactoryArgs['tuple']['updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId, params.args.totalStaked, params.args.totalRewards, params.args.participantCount, params.args.apy],
    }
  }
  /**
   * Constructs a no op call for the addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addPoolTemplate(params: CallParams<VaultFactoryArgs['obj']['addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64'] | VaultFactoryArgs['tuple']['addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.stakingTemplate, params.args.distributorTemplate, params.args.compounderTemplate, params.args.defaultParams],
    }
  }
  /**
   * Constructs a no op call for the setDefaultTemplate(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setDefaultTemplate(params: CallParams<VaultFactoryArgs['obj']['setDefaultTemplate(uint64)void'] | VaultFactoryArgs['tuple']['setDefaultTemplate(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setDefaultTemplate(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.templateId],
    }
  }
  /**
   * Constructs a no op call for the updateFactorySettings(uint64,uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateFactorySettings(params: CallParams<VaultFactoryArgs['obj']['updateFactorySettings(uint64,uint64,uint64,uint64)void'] | VaultFactoryArgs['tuple']['updateFactorySettings(uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateFactorySettings(uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newCreationFee, params.args.newFactoryFee, params.args.newMaxPools, params.args.newMinStake],
    }
  }
  /**
   * Constructs a no op call for the emergencyPauseFactory()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyPauseFactory(params: CallParams<VaultFactoryArgs['obj']['emergencyPauseFactory()void'] | VaultFactoryArgs['tuple']['emergencyPauseFactory()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergencyPauseFactory()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the resumeFactory()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resumeFactory(params: CallParams<VaultFactoryArgs['obj']['resumeFactory()void'] | VaultFactoryArgs['tuple']['resumeFactory()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'resumeFactory()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the setGovernanceContract(byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setGovernanceContract(params: CallParams<VaultFactoryArgs['obj']['setGovernanceContract(byte[])void'] | VaultFactoryArgs['tuple']['setGovernanceContract(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setGovernanceContract(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.governanceAddr],
    }
  }
  /**
   * Constructs a no op call for the getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolInfo(params: CallParams<VaultFactoryArgs['obj']['getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | VaultFactoryArgs['tuple']['getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.poolId],
    }
  }
  /**
   * Constructs a no op call for the getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTemplate(params: CallParams<VaultFactoryArgs['obj']['getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])'] | VaultFactoryArgs['tuple']['getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.templateId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the VaultFactory smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class VaultFactoryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `VaultFactoryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new VaultFactoryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new VaultFactoryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the VaultFactory smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: VaultFactoryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new VaultFactoryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the VaultFactory smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the VaultFactory smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the VaultFactory smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new VaultFactoryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the VaultFactory smart contract
 */
export class VaultFactoryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `VaultFactoryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the VaultFactory app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `VaultFactoryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends VaultFactoryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `VaultFactoryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<VaultFactoryClient> {
    return new VaultFactoryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `VaultFactoryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<VaultFactoryClient> {
    return new VaultFactoryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the VaultFactory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `initialize(uint64,uint64,byte[],uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<VaultFactoryArgs['obj']['initialize(uint64,uint64,byte[],uint64,uint64)void'] | VaultFactoryArgs['tuple']['initialize(uint64,uint64,byte[],uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultFactoryParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPool: (params: CallParams<VaultFactoryArgs['obj']['createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | VaultFactoryArgs['tuple']['createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultFactoryParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `updatePoolStatus(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePoolStatus: (params: CallParams<VaultFactoryArgs['obj']['updatePoolStatus(uint64,uint64)void'] | VaultFactoryArgs['tuple']['updatePoolStatus(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultFactoryParamsFactory.updatePoolStatus(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePoolMetrics: (params: CallParams<VaultFactoryArgs['obj']['updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void'] | VaultFactoryArgs['tuple']['updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultFactoryParamsFactory.updatePoolMetrics(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addPoolTemplate: (params: CallParams<VaultFactoryArgs['obj']['addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64'] | VaultFactoryArgs['tuple']['addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultFactoryParamsFactory.addPoolTemplate(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `setDefaultTemplate(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setDefaultTemplate: (params: CallParams<VaultFactoryArgs['obj']['setDefaultTemplate(uint64)void'] | VaultFactoryArgs['tuple']['setDefaultTemplate(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultFactoryParamsFactory.setDefaultTemplate(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `updateFactorySettings(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateFactorySettings: (params: CallParams<VaultFactoryArgs['obj']['updateFactorySettings(uint64,uint64,uint64,uint64)void'] | VaultFactoryArgs['tuple']['updateFactorySettings(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultFactoryParamsFactory.updateFactorySettings(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `emergencyPauseFactory()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyPauseFactory: (params: CallParams<VaultFactoryArgs['obj']['emergencyPauseFactory()void'] | VaultFactoryArgs['tuple']['emergencyPauseFactory()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(VaultFactoryParamsFactory.emergencyPauseFactory(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `resumeFactory()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resumeFactory: (params: CallParams<VaultFactoryArgs['obj']['resumeFactory()void'] | VaultFactoryArgs['tuple']['resumeFactory()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(VaultFactoryParamsFactory.resumeFactory(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `setGovernanceContract(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setGovernanceContract: (params: CallParams<VaultFactoryArgs['obj']['setGovernanceContract(byte[])void'] | VaultFactoryArgs['tuple']['setGovernanceContract(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultFactoryParamsFactory.setGovernanceContract(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolInfo: (params: CallParams<VaultFactoryArgs['obj']['getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | VaultFactoryArgs['tuple']['getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultFactoryParamsFactory.getPoolInfo(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTemplate: (params: CallParams<VaultFactoryArgs['obj']['getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])'] | VaultFactoryArgs['tuple']['getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(VaultFactoryParamsFactory.getTemplate(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the VaultFactory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `initialize(uint64,uint64,byte[],uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<VaultFactoryArgs['obj']['initialize(uint64,uint64,byte[],uint64,uint64)void'] | VaultFactoryArgs['tuple']['initialize(uint64,uint64,byte[],uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultFactoryParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPool: (params: CallParams<VaultFactoryArgs['obj']['createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | VaultFactoryArgs['tuple']['createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultFactoryParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `updatePoolStatus(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePoolStatus: (params: CallParams<VaultFactoryArgs['obj']['updatePoolStatus(uint64,uint64)void'] | VaultFactoryArgs['tuple']['updatePoolStatus(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultFactoryParamsFactory.updatePoolStatus(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePoolMetrics: (params: CallParams<VaultFactoryArgs['obj']['updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void'] | VaultFactoryArgs['tuple']['updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultFactoryParamsFactory.updatePoolMetrics(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addPoolTemplate: (params: CallParams<VaultFactoryArgs['obj']['addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64'] | VaultFactoryArgs['tuple']['addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultFactoryParamsFactory.addPoolTemplate(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `setDefaultTemplate(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setDefaultTemplate: (params: CallParams<VaultFactoryArgs['obj']['setDefaultTemplate(uint64)void'] | VaultFactoryArgs['tuple']['setDefaultTemplate(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultFactoryParamsFactory.setDefaultTemplate(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `updateFactorySettings(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateFactorySettings: (params: CallParams<VaultFactoryArgs['obj']['updateFactorySettings(uint64,uint64,uint64,uint64)void'] | VaultFactoryArgs['tuple']['updateFactorySettings(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultFactoryParamsFactory.updateFactorySettings(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `emergencyPauseFactory()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyPauseFactory: (params: CallParams<VaultFactoryArgs['obj']['emergencyPauseFactory()void'] | VaultFactoryArgs['tuple']['emergencyPauseFactory()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(VaultFactoryParamsFactory.emergencyPauseFactory(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `resumeFactory()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resumeFactory: (params: CallParams<VaultFactoryArgs['obj']['resumeFactory()void'] | VaultFactoryArgs['tuple']['resumeFactory()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(VaultFactoryParamsFactory.resumeFactory(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `setGovernanceContract(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setGovernanceContract: (params: CallParams<VaultFactoryArgs['obj']['setGovernanceContract(byte[])void'] | VaultFactoryArgs['tuple']['setGovernanceContract(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultFactoryParamsFactory.setGovernanceContract(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolInfo: (params: CallParams<VaultFactoryArgs['obj']['getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | VaultFactoryArgs['tuple']['getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultFactoryParamsFactory.getPoolInfo(params))
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTemplate: (params: CallParams<VaultFactoryArgs['obj']['getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])'] | VaultFactoryArgs['tuple']['getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(VaultFactoryParamsFactory.getTemplate(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the VaultFactory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `initialize(uint64,uint64,byte[],uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<VaultFactoryArgs['obj']['initialize(uint64,uint64,byte[],uint64,uint64)void'] | VaultFactoryArgs['tuple']['initialize(uint64,uint64,byte[],uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultFactoryParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | VaultFactoryReturns['initialize(uint64,uint64,byte[],uint64,uint64)void'])}
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPool: async (params: CallParams<VaultFactoryArgs['obj']['createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | VaultFactoryArgs['tuple']['createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultFactoryParamsFactory.createPool(params))
      return {...result, return: result.return as unknown as (undefined | VaultFactoryReturns['createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `updatePoolStatus(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePoolStatus: async (params: CallParams<VaultFactoryArgs['obj']['updatePoolStatus(uint64,uint64)void'] | VaultFactoryArgs['tuple']['updatePoolStatus(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultFactoryParamsFactory.updatePoolStatus(params))
      return {...result, return: result.return as unknown as (undefined | VaultFactoryReturns['updatePoolStatus(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePoolMetrics: async (params: CallParams<VaultFactoryArgs['obj']['updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void'] | VaultFactoryArgs['tuple']['updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultFactoryParamsFactory.updatePoolMetrics(params))
      return {...result, return: result.return as unknown as (undefined | VaultFactoryReturns['updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addPoolTemplate: async (params: CallParams<VaultFactoryArgs['obj']['addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64'] | VaultFactoryArgs['tuple']['addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultFactoryParamsFactory.addPoolTemplate(params))
      return {...result, return: result.return as unknown as (undefined | VaultFactoryReturns['addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64'])}
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `setDefaultTemplate(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setDefaultTemplate: async (params: CallParams<VaultFactoryArgs['obj']['setDefaultTemplate(uint64)void'] | VaultFactoryArgs['tuple']['setDefaultTemplate(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultFactoryParamsFactory.setDefaultTemplate(params))
      return {...result, return: result.return as unknown as (undefined | VaultFactoryReturns['setDefaultTemplate(uint64)void'])}
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `updateFactorySettings(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateFactorySettings: async (params: CallParams<VaultFactoryArgs['obj']['updateFactorySettings(uint64,uint64,uint64,uint64)void'] | VaultFactoryArgs['tuple']['updateFactorySettings(uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultFactoryParamsFactory.updateFactorySettings(params))
      return {...result, return: result.return as unknown as (undefined | VaultFactoryReturns['updateFactorySettings(uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `emergencyPauseFactory()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyPauseFactory: async (params: CallParams<VaultFactoryArgs['obj']['emergencyPauseFactory()void'] | VaultFactoryArgs['tuple']['emergencyPauseFactory()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(VaultFactoryParamsFactory.emergencyPauseFactory(params))
      return {...result, return: result.return as unknown as (undefined | VaultFactoryReturns['emergencyPauseFactory()void'])}
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `resumeFactory()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resumeFactory: async (params: CallParams<VaultFactoryArgs['obj']['resumeFactory()void'] | VaultFactoryArgs['tuple']['resumeFactory()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(VaultFactoryParamsFactory.resumeFactory(params))
      return {...result, return: result.return as unknown as (undefined | VaultFactoryReturns['resumeFactory()void'])}
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `setGovernanceContract(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setGovernanceContract: async (params: CallParams<VaultFactoryArgs['obj']['setGovernanceContract(byte[])void'] | VaultFactoryArgs['tuple']['setGovernanceContract(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultFactoryParamsFactory.setGovernanceContract(params))
      return {...result, return: result.return as unknown as (undefined | VaultFactoryReturns['setGovernanceContract(byte[])void'])}
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolInfo: async (params: CallParams<VaultFactoryArgs['obj']['getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | VaultFactoryArgs['tuple']['getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultFactoryParamsFactory.getPoolInfo(params))
      return {...result, return: result.return as unknown as (undefined | VaultFactoryReturns['getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the VaultFactory smart contract using the `getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTemplate: async (params: CallParams<VaultFactoryArgs['obj']['getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])'] | VaultFactoryArgs['tuple']['getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(VaultFactoryParamsFactory.getTemplate(params))
      return {...result, return: result.return as unknown as (undefined | VaultFactoryReturns['getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new VaultFactoryClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current VaultFactory app
   */
  state = {
    /**
     * Methods to access global state for the current VaultFactory app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          poolCount: result.poolCount,
          totalTvl: result.totalTVL,
          factoryOwner: new BinaryStateValue(result.factoryOwner),
          poolCreationFee: result.poolCreationFee,
          factoryFeeRate: result.factoryFeeRate,
          feeCollector: new BinaryStateValue(result.feeCollector),
          maxPoolsPerUser: result.maxPoolsPerUser,
          minimumInitialStake: result.minimumInitialStake,
          factoryActive: result.factoryActive,
          templateCount: result.templateCount,
          defaultTemplate: result.defaultTemplate,
          emergencyPause: result.emergencyPause,
          governanceContract: new BinaryStateValue(result.governanceContract),
        }
      },
      /**
       * Get the current value of the poolCount key in global state
       */
      poolCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("poolCount")) as bigint | undefined },
      /**
       * Get the current value of the totalTVL key in global state
       */
      totalTvl: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalTVL")) as bigint | undefined },
      /**
       * Get the current value of the factoryOwner key in global state
       */
      factoryOwner: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("factoryOwner")) as Uint8Array | undefined) },
      /**
       * Get the current value of the poolCreationFee key in global state
       */
      poolCreationFee: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("poolCreationFee")) as bigint | undefined },
      /**
       * Get the current value of the factoryFeeRate key in global state
       */
      factoryFeeRate: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("factoryFeeRate")) as bigint | undefined },
      /**
       * Get the current value of the feeCollector key in global state
       */
      feeCollector: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("feeCollector")) as Uint8Array | undefined) },
      /**
       * Get the current value of the maxPoolsPerUser key in global state
       */
      maxPoolsPerUser: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxPoolsPerUser")) as bigint | undefined },
      /**
       * Get the current value of the minimumInitialStake key in global state
       */
      minimumInitialStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minimumInitialStake")) as bigint | undefined },
      /**
       * Get the current value of the factoryActive key in global state
       */
      factoryActive: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("factoryActive")) as bigint | undefined },
      /**
       * Get the current value of the templateCount key in global state
       */
      templateCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("templateCount")) as bigint | undefined },
      /**
       * Get the current value of the defaultTemplate key in global state
       */
      defaultTemplate: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("defaultTemplate")) as bigint | undefined },
      /**
       * Get the current value of the emergencyPause key in global state
       */
      emergencyPause: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("emergencyPause")) as bigint | undefined },
      /**
       * Get the current value of the governanceContract key in global state
       */
      governanceContract: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("governanceContract")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): VaultFactoryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initialize(uint64,uint64,byte[],uint64,uint64)void method call against the VaultFactory contract
       */
      initialize(params: CallParams<VaultFactoryArgs['obj']['initialize(uint64,uint64,byte[],uint64,uint64)void'] | VaultFactoryArgs['tuple']['initialize(uint64,uint64,byte[],uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64 method call against the VaultFactory contract
       */
      createPool(params: CallParams<VaultFactoryArgs['obj']['createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | VaultFactoryArgs['tuple']['createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a updatePoolStatus(uint64,uint64)void method call against the VaultFactory contract
       */
      updatePoolStatus(params: CallParams<VaultFactoryArgs['obj']['updatePoolStatus(uint64,uint64)void'] | VaultFactoryArgs['tuple']['updatePoolStatus(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePoolStatus(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void method call against the VaultFactory contract
       */
      updatePoolMetrics(params: CallParams<VaultFactoryArgs['obj']['updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void'] | VaultFactoryArgs['tuple']['updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePoolMetrics(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64 method call against the VaultFactory contract
       */
      addPoolTemplate(params: CallParams<VaultFactoryArgs['obj']['addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64'] | VaultFactoryArgs['tuple']['addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addPoolTemplate(params)))
        resultMappers.push((v) => client.decodeReturnValue('addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64', v))
        return this
      },
      /**
       * Add a setDefaultTemplate(uint64)void method call against the VaultFactory contract
       */
      setDefaultTemplate(params: CallParams<VaultFactoryArgs['obj']['setDefaultTemplate(uint64)void'] | VaultFactoryArgs['tuple']['setDefaultTemplate(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setDefaultTemplate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateFactorySettings(uint64,uint64,uint64,uint64)void method call against the VaultFactory contract
       */
      updateFactorySettings(params: CallParams<VaultFactoryArgs['obj']['updateFactorySettings(uint64,uint64,uint64,uint64)void'] | VaultFactoryArgs['tuple']['updateFactorySettings(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateFactorySettings(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a emergencyPauseFactory()void method call against the VaultFactory contract
       */
      emergencyPauseFactory(params: CallParams<VaultFactoryArgs['obj']['emergencyPauseFactory()void'] | VaultFactoryArgs['tuple']['emergencyPauseFactory()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyPauseFactory(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a resumeFactory()void method call against the VaultFactory contract
       */
      resumeFactory(params: CallParams<VaultFactoryArgs['obj']['resumeFactory()void'] | VaultFactoryArgs['tuple']['resumeFactory()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resumeFactory(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setGovernanceContract(byte[])void method call against the VaultFactory contract
       */
      setGovernanceContract(params: CallParams<VaultFactoryArgs['obj']['setGovernanceContract(byte[])void'] | VaultFactoryArgs['tuple']['setGovernanceContract(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setGovernanceContract(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) method call against the VaultFactory contract
       */
      getPoolInfo(params: CallParams<VaultFactoryArgs['obj']['getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | VaultFactoryArgs['tuple']['getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[]) method call against the VaultFactory contract
       */
      getTemplate(params: CallParams<VaultFactoryArgs['obj']['getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])'] | VaultFactoryArgs['tuple']['getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTemplate(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])', v))
        return this
      },
      /**
       * Add a clear state call to the VaultFactory contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as VaultFactoryComposer
  }
}
export type VaultFactoryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize(uint64,uint64,byte[],uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<VaultFactoryArgs['obj']['initialize(uint64,uint64,byte[],uint64,uint64)void'] | VaultFactoryArgs['tuple']['initialize(uint64,uint64,byte[],uint64,uint64)void']>): VaultFactoryComposer<[...TReturns, VaultFactoryReturns['initialize(uint64,uint64,byte[],uint64,uint64)void'] | undefined]>

  /**
   * Calls the createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPool(params?: CallParams<VaultFactoryArgs['obj']['createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | VaultFactoryArgs['tuple']['createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64']>): VaultFactoryComposer<[...TReturns, VaultFactoryReturns['createPool(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the updatePoolStatus(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePoolStatus(params?: CallParams<VaultFactoryArgs['obj']['updatePoolStatus(uint64,uint64)void'] | VaultFactoryArgs['tuple']['updatePoolStatus(uint64,uint64)void']>): VaultFactoryComposer<[...TReturns, VaultFactoryReturns['updatePoolStatus(uint64,uint64)void'] | undefined]>

  /**
   * Calls the updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePoolMetrics(params?: CallParams<VaultFactoryArgs['obj']['updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void'] | VaultFactoryArgs['tuple']['updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void']>): VaultFactoryComposer<[...TReturns, VaultFactoryReturns['updatePoolMetrics(uint64,uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addPoolTemplate(params?: CallParams<VaultFactoryArgs['obj']['addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64'] | VaultFactoryArgs['tuple']['addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64']>): VaultFactoryComposer<[...TReturns, VaultFactoryReturns['addPoolTemplate(byte[],byte[],byte[],byte[],byte[])uint64'] | undefined]>

  /**
   * Calls the setDefaultTemplate(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setDefaultTemplate(params?: CallParams<VaultFactoryArgs['obj']['setDefaultTemplate(uint64)void'] | VaultFactoryArgs['tuple']['setDefaultTemplate(uint64)void']>): VaultFactoryComposer<[...TReturns, VaultFactoryReturns['setDefaultTemplate(uint64)void'] | undefined]>

  /**
   * Calls the updateFactorySettings(uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateFactorySettings(params?: CallParams<VaultFactoryArgs['obj']['updateFactorySettings(uint64,uint64,uint64,uint64)void'] | VaultFactoryArgs['tuple']['updateFactorySettings(uint64,uint64,uint64,uint64)void']>): VaultFactoryComposer<[...TReturns, VaultFactoryReturns['updateFactorySettings(uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the emergencyPauseFactory()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyPauseFactory(params?: CallParams<VaultFactoryArgs['obj']['emergencyPauseFactory()void'] | VaultFactoryArgs['tuple']['emergencyPauseFactory()void']>): VaultFactoryComposer<[...TReturns, VaultFactoryReturns['emergencyPauseFactory()void'] | undefined]>

  /**
   * Calls the resumeFactory()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resumeFactory(params?: CallParams<VaultFactoryArgs['obj']['resumeFactory()void'] | VaultFactoryArgs['tuple']['resumeFactory()void']>): VaultFactoryComposer<[...TReturns, VaultFactoryReturns['resumeFactory()void'] | undefined]>

  /**
   * Calls the setGovernanceContract(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setGovernanceContract(params?: CallParams<VaultFactoryArgs['obj']['setGovernanceContract(byte[])void'] | VaultFactoryArgs['tuple']['setGovernanceContract(byte[])void']>): VaultFactoryComposer<[...TReturns, VaultFactoryReturns['setGovernanceContract(byte[])void'] | undefined]>

  /**
   * Calls the getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolInfo(params?: CallParams<VaultFactoryArgs['obj']['getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | VaultFactoryArgs['tuple']['getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>): VaultFactoryComposer<[...TReturns, VaultFactoryReturns['getPoolInfo(uint64)(uint64,uint64,byte[],byte[],byte[],byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTemplate(params?: CallParams<VaultFactoryArgs['obj']['getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])'] | VaultFactoryArgs['tuple']['getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])']>): VaultFactoryComposer<[...TReturns, VaultFactoryReturns['getTemplate(uint64)(byte[],byte[],byte[],byte[],byte[])'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the VaultFactory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): VaultFactoryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): VaultFactoryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<VaultFactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<VaultFactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<VaultFactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<VaultFactoryComposerResults<TReturns>>
}
export type VaultFactoryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

