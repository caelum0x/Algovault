/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"StakingPool","structs":{},"methods":[{"name":"initialize","args":[{"type":"uint64","name":"assetId"},{"type":"uint64","name":"rewardRate"},{"type":"uint64","name":"minimumStake"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"updatePool","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"stake","args":[{"type":"uint64","name":"payment"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"withdraw","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"claimRewards","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"emergencyWithdraw","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getUserStake","args":[{"type":"byte[]","name":"user"}],"returns":{"type":"(uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getPendingRewards","args":[{"type":"byte[]","name":"user"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getPoolInfo","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":8,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"totalStaked":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxTdGFrZWQ="},"rewardRate":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmV3YXJkUmF0ZQ=="},"lastUpdateTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdFVwZGF0ZVRpbWU="},"accRewardPerShare":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWNjUmV3YXJkUGVyU2hhcmU="},"poolActive":{"keyType":"AVMString","valueType":"AVMUint64","key":"cG9vbEFjdGl2ZQ=="},"assetId":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRJZA=="},"minimumStake":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWluaW11bVN0YWtl"},"emergencyPaused":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZW1lcmdlbmN5UGF1c2Vk"},"admin":{"keyType":"AVMString","valueType":"AVMBytes","key":"YWRtaW4="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[650,667,836,849,1037,1050,1146,1223,1240,1257,1323,1338],"errorMessage":"Box must have value"},{"pc":[229,280,304,341,353,371,387,403,415],"errorMessage":"OnCompletion is not NoOp"},{"pc":[444],"errorMessage":"can only call when creating"},{"pc":[232,283,307,344,356,374,390,406,418],"errorMessage":"can only call when not creating"},{"pc":[453,514,524,532,547,555,562,569,596,604,611,673,688,728,757,792,862,875,897,923,1006,1056,1071,1090,1167,1350,1354,1369,1377,1397,1406,1456,1461,1465,1469,1473,1478],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAAGAoJSljR0mCxFhY2NSZXdhcmRQZXJTaGFyZQt0b3RhbFN0YWtlZApwb29sQWN0aXZlDmxhc3RVcGRhdGVUaW1lB19hbW91bnQLX3Jld2FyZERlYnQEFR98dQpyZXdhcmRSYXRlDl9sYXN0U3Rha2VUaW1lD2VtZXJnZW5jeVBhdXNlZAxtaW5pbXVtU3Rha2UxG0EBGoIJBByai38E03MZ2AT6nZL1BCHx3f8EDnCHVQRe0iWJBDiAI3QEI0LA6wTM0+0mNhoAjgkAvACwAKAAkAB+AHIATQA1AAIiQzEZFEQxGESIBMFPBRZPBRZPBRZPBRZPBRZPBRZPBU8FUE8EUE8DUE8CUExQJwZMULAjQzEZFEQxGEQ2GgFXAgCIA+IWJwZMULAjQzEZFEQxGEQ2GgFXAgCIA2ZPAhZPAhZPAhZOAlBMUCcGTFCwI0MxGRREMRhEiAMOI0MxGRREMRhEiAJ9FicGTFCwI0MxGRREMRhENhoBF4gBkSNDMRkURDEYRDYaAReIALwjQzEZFEQxGESIAGAjQzEZFEQxGEQ2GgEXNhoCFzYaAxeIAA0jQzEZQP8nMRgURCNDigMAIiplRBREgAdhc3NldElki/1nJweL/mcnCov/ZykiZysyB2coImcqI2cnCSJngAVhZG1pbjEAZ4mKAACAACIqZUQjEkQyB0kiK2VEDUEAMyIrZUSLAUwJjACLAEEAHyIpZURBABgiJwdlRIsACyIoZURMJAsiKWVECggoTGcriwFniSKMAEL/0YoBAIAARwIiKmVEIxJEIicJZUQURCInCmVEi/8ORIj/jzEASScEUElPAkknBVBOAicIUEy9RQFBAIWLA75MF0xEjACLBL1FAUEAbosEvkwXTESMAiIoZUSLAAskCosCDUEAUCIoZUSLAAskCosCCYwBiwFBABCxMQCLAbIIsgcjshAisgGziwCL/wgiKGVESwELJAoyB08CFosDTL9MFosETL8WiwVMvyIpZUSL/wgpTGeJIowBQv+4IowCQv+VIowAQv9+igEAgABJIiplRCMSRIv/RIj+2DEARwInBFBJTwJJJwVQSU4DTgMnCFBOAkm9RQFEvkwXTgJEvUUBQQCUiwS+TBdMRIwBiwZJi/8PRCIoZUQLJAqLAQ1BAHEiKGVEiwYLJAqLAQmMAIsGi/8JSYwGIihlREsBCyQKjAFAADyLA7xIiwS8SIsFvEgiKWVEi/8JKUxnsYv/sgiLArIHI7IQIrIBs4sAQQAQsYsAsgiLArIHI7IQIrIBs4mLBhaLA0y/iwEWiwRMv0L/vyKMAEL/lyKMAUL/b4oAAYAASSIqZUQjEkSI/gUxAEcCJwRQTCcFUElPAkm9RQFEvkwXTgJEvUUBQQBQiwO+TBdMRIwBIihlRIsECyQKiwENQQAyIihlRIsECyQKiwEJjACLAEEAHiIoZUSLBAskChaLA0y/sYsAsgiLArIHI7IQIrIBs4kijABC/9YijAFC/7MxAEknBFBJvUUBREm+TBdMREy8SEsBJwVQvEhLAScIULxIIillREsBCSlMZ7GyCLIHI7IQIrIBs4mKAQOAAEmL/ycEUEmL/ycFUEyL/ycIUEy9RQFBAECLAr5MF0xEjACLA71FAUEAKYsDvkwXTESMAYsEvUUBQQAUiwS+TBdMRIsAiwFPAowCjAGMAIkiQv/vIowBQv/aIowAQv/DigEBgABHBov/JwRQSYv/JwVQTL1FAUAABCKMAImLB75MF4wCRIsIvUUBQQBziwi+TBdMRIwEIihlTElOAowARCIpZURMjAFBADQyB0mMAyIrZUQNQQBDIitlRIsDTAmMBYsAjAGLBUEAFCInB2VEiwULJAsiKWVECosACIwBiwKLAQskCkmMBosEDUEACIsGiwQJjACJIkL/+SKMBUL/wSKMBEL/kCIpZUQiJwdlRCIoZUQiK2VEIiplRCInCWVEiQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the StakingPool contract
 */
export type StakingPoolArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initialize(uint64,uint64,uint64)void': {
      assetId: bigint | number
      rewardRate: bigint | number
      minimumStake: bigint | number
    }
    'updatePool()void': Record<string, never>
    'stake(uint64)void': {
      payment: bigint | number
    }
    'withdraw(uint64)void': {
      amount: bigint | number
    }
    'claimRewards()uint64': Record<string, never>
    'emergencyWithdraw()void': Record<string, never>
    'getUserStake(byte[])(uint64,uint64,uint64)': {
      user: Uint8Array
    }
    'getPendingRewards(byte[])uint64': {
      user: Uint8Array
    }
    'getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initialize(uint64,uint64,uint64)void': [assetId: bigint | number, rewardRate: bigint | number, minimumStake: bigint | number]
    'updatePool()void': []
    'stake(uint64)void': [payment: bigint | number]
    'withdraw(uint64)void': [amount: bigint | number]
    'claimRewards()uint64': []
    'emergencyWithdraw()void': []
    'getUserStake(byte[])(uint64,uint64,uint64)': [user: Uint8Array]
    'getPendingRewards(byte[])uint64': [user: Uint8Array]
    'getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)': []
  }
}

/**
 * The return type for each method
 */
export type StakingPoolReturns = {
  'initialize(uint64,uint64,uint64)void': void
  'updatePool()void': void
  'stake(uint64)void': void
  'withdraw(uint64)void': void
  'claimRewards()uint64': bigint
  'emergencyWithdraw()void': void
  'getUserStake(byte[])(uint64,uint64,uint64)': [bigint, bigint, bigint]
  'getPendingRewards(byte[])uint64': bigint
  'getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)': [bigint, bigint, bigint, bigint, bigint, bigint]
}

/**
 * Defines the types of available calls and state of the StakingPool smart contract.
 */
export type StakingPoolTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize(uint64,uint64,uint64)void' | 'initialize', {
      argsObj: StakingPoolArgs['obj']['initialize(uint64,uint64,uint64)void']
      argsTuple: StakingPoolArgs['tuple']['initialize(uint64,uint64,uint64)void']
      returns: StakingPoolReturns['initialize(uint64,uint64,uint64)void']
    }>
    & Record<'updatePool()void' | 'updatePool', {
      argsObj: StakingPoolArgs['obj']['updatePool()void']
      argsTuple: StakingPoolArgs['tuple']['updatePool()void']
      returns: StakingPoolReturns['updatePool()void']
    }>
    & Record<'stake(uint64)void' | 'stake', {
      argsObj: StakingPoolArgs['obj']['stake(uint64)void']
      argsTuple: StakingPoolArgs['tuple']['stake(uint64)void']
      returns: StakingPoolReturns['stake(uint64)void']
    }>
    & Record<'withdraw(uint64)void' | 'withdraw', {
      argsObj: StakingPoolArgs['obj']['withdraw(uint64)void']
      argsTuple: StakingPoolArgs['tuple']['withdraw(uint64)void']
      returns: StakingPoolReturns['withdraw(uint64)void']
    }>
    & Record<'claimRewards()uint64' | 'claimRewards', {
      argsObj: StakingPoolArgs['obj']['claimRewards()uint64']
      argsTuple: StakingPoolArgs['tuple']['claimRewards()uint64']
      returns: StakingPoolReturns['claimRewards()uint64']
    }>
    & Record<'emergencyWithdraw()void' | 'emergencyWithdraw', {
      argsObj: StakingPoolArgs['obj']['emergencyWithdraw()void']
      argsTuple: StakingPoolArgs['tuple']['emergencyWithdraw()void']
      returns: StakingPoolReturns['emergencyWithdraw()void']
    }>
    & Record<'getUserStake(byte[])(uint64,uint64,uint64)' | 'getUserStake', {
      argsObj: StakingPoolArgs['obj']['getUserStake(byte[])(uint64,uint64,uint64)']
      argsTuple: StakingPoolArgs['tuple']['getUserStake(byte[])(uint64,uint64,uint64)']
      returns: StakingPoolReturns['getUserStake(byte[])(uint64,uint64,uint64)']
    }>
    & Record<'getPendingRewards(byte[])uint64' | 'getPendingRewards', {
      argsObj: StakingPoolArgs['obj']['getPendingRewards(byte[])uint64']
      argsTuple: StakingPoolArgs['tuple']['getPendingRewards(byte[])uint64']
      returns: StakingPoolReturns['getPendingRewards(byte[])uint64']
    }>
    & Record<'getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)' | 'getPoolInfo', {
      argsObj: StakingPoolArgs['obj']['getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: StakingPoolArgs['tuple']['getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)']
      returns: StakingPoolReturns['getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        totalStaked: bigint
        rewardRate: bigint
        lastUpdateTime: bigint
        accRewardPerShare: bigint
        poolActive: bigint
        assetId: bigint
        minimumStake: bigint
        emergencyPaused: bigint
        admin: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type StakingPoolSignatures = keyof StakingPoolTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type StakingPoolNonVoidMethodSignatures = keyof StakingPoolTypes['methods'] extends infer T ? T extends keyof StakingPoolTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the StakingPool smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends StakingPoolSignatures> = StakingPoolTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the StakingPool smart contract to the method's return type
 */
export type MethodReturn<TSignature extends StakingPoolSignatures> = StakingPoolTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = StakingPoolTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type StakingPoolCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type StakingPoolDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: StakingPoolCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the StakingPool smart contract
 */
export abstract class StakingPoolParamsFactory {
  /**
   * Constructs a no op call for the initialize(uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<StakingPoolArgs['obj']['initialize(uint64,uint64,uint64)void'] | StakingPoolArgs['tuple']['initialize(uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize(uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.rewardRate, params.args.minimumStake],
    }
  }
  /**
   * Constructs a no op call for the updatePool()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updatePool(params: CallParams<StakingPoolArgs['obj']['updatePool()void'] | StakingPoolArgs['tuple']['updatePool()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updatePool()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the stake(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stake(params: CallParams<StakingPoolArgs['obj']['stake(uint64)void'] | StakingPoolArgs['tuple']['stake(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stake(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the withdraw(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdraw(params: CallParams<StakingPoolArgs['obj']['withdraw(uint64)void'] | StakingPoolArgs['tuple']['withdraw(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the claimRewards()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimRewards(params: CallParams<StakingPoolArgs['obj']['claimRewards()uint64'] | StakingPoolArgs['tuple']['claimRewards()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimRewards()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the emergencyWithdraw()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyWithdraw(params: CallParams<StakingPoolArgs['obj']['emergencyWithdraw()void'] | StakingPoolArgs['tuple']['emergencyWithdraw()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergencyWithdraw()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getUserStake(byte[])(uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserStake(params: CallParams<StakingPoolArgs['obj']['getUserStake(byte[])(uint64,uint64,uint64)'] | StakingPoolArgs['tuple']['getUserStake(byte[])(uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserStake(byte[])(uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the getPendingRewards(byte[])uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPendingRewards(params: CallParams<StakingPoolArgs['obj']['getPendingRewards(byte[])uint64'] | StakingPoolArgs['tuple']['getPendingRewards(byte[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPendingRewards(byte[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolInfo(params: CallParams<StakingPoolArgs['obj']['getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)'] | StakingPoolArgs['tuple']['getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the StakingPool smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class StakingPoolFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `StakingPoolFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new StakingPoolClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new StakingPoolClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the StakingPool smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: StakingPoolDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new StakingPoolClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StakingPool smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StakingPool smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the StakingPool smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new StakingPoolClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the StakingPool smart contract
 */
export class StakingPoolClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `StakingPoolClient`
   *
   * @param appClient An `AppClient` instance which has been created with the StakingPool app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `StakingPoolClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends StakingPoolNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `StakingPoolClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<StakingPoolClient> {
    return new StakingPoolClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `StakingPoolClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<StakingPoolClient> {
    return new StakingPoolClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the StakingPool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the StakingPool smart contract using the `initialize(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<StakingPoolArgs['obj']['initialize(uint64,uint64,uint64)void'] | StakingPoolArgs['tuple']['initialize(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `updatePool()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updatePool: (params: CallParams<StakingPoolArgs['obj']['updatePool()void'] | StakingPoolArgs['tuple']['updatePool()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.updatePool(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `stake(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stake: (params: CallParams<StakingPoolArgs['obj']['stake(uint64)void'] | StakingPoolArgs['tuple']['stake(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.stake(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `withdraw(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdraw: (params: CallParams<StakingPoolArgs['obj']['withdraw(uint64)void'] | StakingPoolArgs['tuple']['withdraw(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `claimRewards()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimRewards: (params: CallParams<StakingPoolArgs['obj']['claimRewards()uint64'] | StakingPoolArgs['tuple']['claimRewards()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.claimRewards(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `emergencyWithdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyWithdraw: (params: CallParams<StakingPoolArgs['obj']['emergencyWithdraw()void'] | StakingPoolArgs['tuple']['emergencyWithdraw()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.emergencyWithdraw(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `getUserStake(byte[])(uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserStake: (params: CallParams<StakingPoolArgs['obj']['getUserStake(byte[])(uint64,uint64,uint64)'] | StakingPoolArgs['tuple']['getUserStake(byte[])(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.getUserStake(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `getPendingRewards(byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPendingRewards: (params: CallParams<StakingPoolArgs['obj']['getPendingRewards(byte[])uint64'] | StakingPoolArgs['tuple']['getPendingRewards(byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.getPendingRewards(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolInfo: (params: CallParams<StakingPoolArgs['obj']['getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)'] | StakingPoolArgs['tuple']['getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(StakingPoolParamsFactory.getPoolInfo(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the StakingPool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the StakingPool smart contract using the `initialize(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<StakingPoolArgs['obj']['initialize(uint64,uint64,uint64)void'] | StakingPoolArgs['tuple']['initialize(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `updatePool()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updatePool: (params: CallParams<StakingPoolArgs['obj']['updatePool()void'] | StakingPoolArgs['tuple']['updatePool()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.updatePool(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `stake(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stake: (params: CallParams<StakingPoolArgs['obj']['stake(uint64)void'] | StakingPoolArgs['tuple']['stake(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.stake(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `withdraw(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdraw: (params: CallParams<StakingPoolArgs['obj']['withdraw(uint64)void'] | StakingPoolArgs['tuple']['withdraw(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `claimRewards()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimRewards: (params: CallParams<StakingPoolArgs['obj']['claimRewards()uint64'] | StakingPoolArgs['tuple']['claimRewards()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.claimRewards(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `emergencyWithdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyWithdraw: (params: CallParams<StakingPoolArgs['obj']['emergencyWithdraw()void'] | StakingPoolArgs['tuple']['emergencyWithdraw()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.emergencyWithdraw(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `getUserStake(byte[])(uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserStake: (params: CallParams<StakingPoolArgs['obj']['getUserStake(byte[])(uint64,uint64,uint64)'] | StakingPoolArgs['tuple']['getUserStake(byte[])(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.getUserStake(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `getPendingRewards(byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPendingRewards: (params: CallParams<StakingPoolArgs['obj']['getPendingRewards(byte[])uint64'] | StakingPoolArgs['tuple']['getPendingRewards(byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.getPendingRewards(params))
    },

    /**
     * Makes a call to the StakingPool smart contract using the `getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolInfo: (params: CallParams<StakingPoolArgs['obj']['getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)'] | StakingPoolArgs['tuple']['getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(StakingPoolParamsFactory.getPoolInfo(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the StakingPool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the StakingPool smart contract using the `initialize(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<StakingPoolArgs['obj']['initialize(uint64,uint64,uint64)void'] | StakingPoolArgs['tuple']['initialize(uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['initialize(uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `updatePool()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updatePool: async (params: CallParams<StakingPoolArgs['obj']['updatePool()void'] | StakingPoolArgs['tuple']['updatePool()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.updatePool(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['updatePool()void'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `stake(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stake: async (params: CallParams<StakingPoolArgs['obj']['stake(uint64)void'] | StakingPoolArgs['tuple']['stake(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.stake(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['stake(uint64)void'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `withdraw(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdraw: async (params: CallParams<StakingPoolArgs['obj']['withdraw(uint64)void'] | StakingPoolArgs['tuple']['withdraw(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.withdraw(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['withdraw(uint64)void'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `claimRewards()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimRewards: async (params: CallParams<StakingPoolArgs['obj']['claimRewards()uint64'] | StakingPoolArgs['tuple']['claimRewards()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.claimRewards(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['claimRewards()uint64'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `emergencyWithdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyWithdraw: async (params: CallParams<StakingPoolArgs['obj']['emergencyWithdraw()void'] | StakingPoolArgs['tuple']['emergencyWithdraw()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.emergencyWithdraw(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['emergencyWithdraw()void'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `getUserStake(byte[])(uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserStake: async (params: CallParams<StakingPoolArgs['obj']['getUserStake(byte[])(uint64,uint64,uint64)'] | StakingPoolArgs['tuple']['getUserStake(byte[])(uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.getUserStake(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['getUserStake(byte[])(uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `getPendingRewards(byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPendingRewards: async (params: CallParams<StakingPoolArgs['obj']['getPendingRewards(byte[])uint64'] | StakingPoolArgs['tuple']['getPendingRewards(byte[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.getPendingRewards(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['getPendingRewards(byte[])uint64'])}
    },

    /**
     * Makes a call to the StakingPool smart contract using the `getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolInfo: async (params: CallParams<StakingPoolArgs['obj']['getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)'] | StakingPoolArgs['tuple']['getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(StakingPoolParamsFactory.getPoolInfo(params))
      return {...result, return: result.return as unknown as (undefined | StakingPoolReturns['getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new StakingPoolClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current StakingPool app
   */
  state = {
    /**
     * Methods to access global state for the current StakingPool app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          totalStaked: result.totalStaked,
          rewardRate: result.rewardRate,
          lastUpdateTime: result.lastUpdateTime,
          accRewardPerShare: result.accRewardPerShare,
          poolActive: result.poolActive,
          assetId: result.assetId,
          minimumStake: result.minimumStake,
          emergencyPaused: result.emergencyPaused,
          admin: new BinaryStateValue(result.admin),
        }
      },
      /**
       * Get the current value of the totalStaked key in global state
       */
      totalStaked: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalStaked")) as bigint | undefined },
      /**
       * Get the current value of the rewardRate key in global state
       */
      rewardRate: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("rewardRate")) as bigint | undefined },
      /**
       * Get the current value of the lastUpdateTime key in global state
       */
      lastUpdateTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastUpdateTime")) as bigint | undefined },
      /**
       * Get the current value of the accRewardPerShare key in global state
       */
      accRewardPerShare: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("accRewardPerShare")) as bigint | undefined },
      /**
       * Get the current value of the poolActive key in global state
       */
      poolActive: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("poolActive")) as bigint | undefined },
      /**
       * Get the current value of the assetId key in global state
       */
      assetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetId")) as bigint | undefined },
      /**
       * Get the current value of the minimumStake key in global state
       */
      minimumStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minimumStake")) as bigint | undefined },
      /**
       * Get the current value of the emergencyPaused key in global state
       */
      emergencyPaused: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("emergencyPaused")) as bigint | undefined },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): StakingPoolComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initialize(uint64,uint64,uint64)void method call against the StakingPool contract
       */
      initialize(params: CallParams<StakingPoolArgs['obj']['initialize(uint64,uint64,uint64)void'] | StakingPoolArgs['tuple']['initialize(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updatePool()void method call against the StakingPool contract
       */
      updatePool(params: CallParams<StakingPoolArgs['obj']['updatePool()void'] | StakingPoolArgs['tuple']['updatePool()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updatePool(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a stake(uint64)void method call against the StakingPool contract
       */
      stake(params: CallParams<StakingPoolArgs['obj']['stake(uint64)void'] | StakingPoolArgs['tuple']['stake(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdraw(uint64)void method call against the StakingPool contract
       */
      withdraw(params: CallParams<StakingPoolArgs['obj']['withdraw(uint64)void'] | StakingPoolArgs['tuple']['withdraw(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdraw(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claimRewards()uint64 method call against the StakingPool contract
       */
      claimRewards(params: CallParams<StakingPoolArgs['obj']['claimRewards()uint64'] | StakingPoolArgs['tuple']['claimRewards()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('claimRewards()uint64', v))
        return this
      },
      /**
       * Add a emergencyWithdraw()void method call against the StakingPool contract
       */
      emergencyWithdraw(params: CallParams<StakingPoolArgs['obj']['emergencyWithdraw()void'] | StakingPoolArgs['tuple']['emergencyWithdraw()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyWithdraw(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getUserStake(byte[])(uint64,uint64,uint64) method call against the StakingPool contract
       */
      getUserStake(params: CallParams<StakingPoolArgs['obj']['getUserStake(byte[])(uint64,uint64,uint64)'] | StakingPoolArgs['tuple']['getUserStake(byte[])(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserStake(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserStake(byte[])(uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getPendingRewards(byte[])uint64 method call against the StakingPool contract
       */
      getPendingRewards(params: CallParams<StakingPoolArgs['obj']['getPendingRewards(byte[])uint64'] | StakingPoolArgs['tuple']['getPendingRewards(byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPendingRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPendingRewards(byte[])uint64', v))
        return this
      },
      /**
       * Add a getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64) method call against the StakingPool contract
       */
      getPoolInfo(params: CallParams<StakingPoolArgs['obj']['getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)'] | StakingPoolArgs['tuple']['getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a clear state call to the StakingPool contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as StakingPoolComposer
  }
}
export type StakingPoolComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize(uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<StakingPoolArgs['obj']['initialize(uint64,uint64,uint64)void'] | StakingPoolArgs['tuple']['initialize(uint64,uint64,uint64)void']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['initialize(uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the updatePool()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updatePool(params?: CallParams<StakingPoolArgs['obj']['updatePool()void'] | StakingPoolArgs['tuple']['updatePool()void']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['updatePool()void'] | undefined]>

  /**
   * Calls the stake(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stake(params?: CallParams<StakingPoolArgs['obj']['stake(uint64)void'] | StakingPoolArgs['tuple']['stake(uint64)void']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['stake(uint64)void'] | undefined]>

  /**
   * Calls the withdraw(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(params?: CallParams<StakingPoolArgs['obj']['withdraw(uint64)void'] | StakingPoolArgs['tuple']['withdraw(uint64)void']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['withdraw(uint64)void'] | undefined]>

  /**
   * Calls the claimRewards()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimRewards(params?: CallParams<StakingPoolArgs['obj']['claimRewards()uint64'] | StakingPoolArgs['tuple']['claimRewards()uint64']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['claimRewards()uint64'] | undefined]>

  /**
   * Calls the emergencyWithdraw()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyWithdraw(params?: CallParams<StakingPoolArgs['obj']['emergencyWithdraw()void'] | StakingPoolArgs['tuple']['emergencyWithdraw()void']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['emergencyWithdraw()void'] | undefined]>

  /**
   * Calls the getUserStake(byte[])(uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserStake(params?: CallParams<StakingPoolArgs['obj']['getUserStake(byte[])(uint64,uint64,uint64)'] | StakingPoolArgs['tuple']['getUserStake(byte[])(uint64,uint64,uint64)']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['getUserStake(byte[])(uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getPendingRewards(byte[])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPendingRewards(params?: CallParams<StakingPoolArgs['obj']['getPendingRewards(byte[])uint64'] | StakingPoolArgs['tuple']['getPendingRewards(byte[])uint64']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['getPendingRewards(byte[])uint64'] | undefined]>

  /**
   * Calls the getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolInfo(params?: CallParams<StakingPoolArgs['obj']['getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)'] | StakingPoolArgs['tuple']['getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)']>): StakingPoolComposer<[...TReturns, StakingPoolReturns['getPoolInfo()(uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the StakingPool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): StakingPoolComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): StakingPoolComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<StakingPoolComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<StakingPoolComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<StakingPoolComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<StakingPoolComposerResults<TReturns>>
}
export type StakingPoolComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

