/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"GovernanceVault","structs":{},"methods":[{"name":"initialize","args":[{"type":"uint64","name":"governanceTokenId"},{"type":"uint64","name":"votingDuration"},{"type":"uint64","name":"quorumThreshold"},{"type":"uint64","name":"proposalThreshold"},{"type":"uint64","name":"executionDelay"},{"type":"uint64","name":"gracePeriod"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"createProposal","args":[{"type":"byte[]","name":"title"},{"type":"byte[]","name":"description"},{"type":"uint64","name":"proposalType"},{"type":"byte[]","name":"targetContract"},{"type":"byte[]","name":"executionData"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"vote","args":[{"type":"uint64","name":"proposalId"},{"type":"uint64","name":"support"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"finalizeProposal","args":[{"type":"uint64","name":"proposalId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"executeProposal","args":[{"type":"uint64","name":"proposalId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"cancelProposal","args":[{"type":"uint64","name":"proposalId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"delegateVoting","args":[{"type":"byte[]","name":"delegate"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"updateVotingPower","args":[{"type":"byte[]","name":"user"},{"type":"uint64","name":"newPower"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"updateGovernanceParameters","args":[{"type":"uint64","name":"newVotingDuration"},{"type":"uint64","name":"newQuorumThreshold"},{"type":"uint64","name":"newProposalThreshold"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"pauseGovernance","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"resumeGovernance","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getVotingPower","args":[{"type":"byte[]","name":"user"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getProposal","args":[{"type":"uint64","name":"proposalId"}],"returns":{"type":"(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getVote","args":[{"type":"byte[]","name":"voter"},{"type":"uint64","name":"proposalId"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"hasVoted","args":[{"type":"byte[]","name":"voter"},{"type":"uint64","name":"proposalId"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getGovernanceInfo","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"calculateQuorumProgress","args":[{"type":"uint64","name":"proposalId"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":9,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"proposalCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHJvcG9zYWxDb3VudA=="},"votingDuration":{"keyType":"AVMString","valueType":"AVMUint64","key":"dm90aW5nRHVyYXRpb24="},"quorumThreshold":{"keyType":"AVMString","valueType":"AVMUint64","key":"cXVvcnVtVGhyZXNob2xk"},"proposalThreshold":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHJvcG9zYWxUaHJlc2hvbGQ="},"governanceToken":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z292ZXJuYW5jZVRva2Vu"},"totalVotingPower":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxWb3RpbmdQb3dlcg=="},"admin":{"keyType":"AVMString","valueType":"AVMBytes","key":"YWRtaW4="},"governanceActive":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z292ZXJuYW5jZUFjdGl2ZQ=="},"executionDelay":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZXhlY3V0aW9uRGVsYXk="},"gracePeriod":{"keyType":"AVMString","valueType":"AVMUint64","key":"Z3JhY2VQZXJpb2Q="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1355],"errorMessage":"Already voted on this proposal"},{"pc":[1321,1333,1375,1399,1416,1439,1451,1468,1481,1490,1505,1557,1571,1583,1646,1784,1799,1806,1813,1823,1830,1837,1847,1857,1867,1877,1887,1896,1906,1916,1934,1993,2003,2013,2026],"errorMessage":"Box must have value"},{"pc":[459,480,530,557,584,784,807,819,831,855,877,895,911,927,943,963,1008],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1049],"errorMessage":"can only call when creating"},{"pc":[462,483,533,560,587,787,810,822,834,858,880,898,914,930,946,966,1011],"errorMessage":"can only call when not creating"},{"pc":[1058,1128,1141,1148,1231,1279,1301,1512,1590,1602,1610,1631,1703,1722,1747,1760,1954,1959,1964,1969,1973,1977,2030],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAECZCYYBBUffHUQZ292ZXJuYW5jZUFjdGl2ZRB0b3RhbFZvdGluZ1Bvd2VyB19zdGF0dXMFYWRtaW4OX3ZvdGluZ0VuZFRpbWUJX2ZvclZvdGVzDV9hZ2FpbnN0Vm90ZXMNX2Fic3RhaW5Wb3Rlcw52b3RpbmdEdXJhdGlvbg9xdW9ydW1UaHJlc2hvbGQRcHJvcG9zYWxUaHJlc2hvbGQNcHJvcG9zYWxDb3VudA9fcXVvcnVtUmVxdWlyZWQOZXhlY3V0aW9uRGVsYXkJX2V4ZWN1dGVkC2dyYWNlUGVyaW9kCV9wcm9wb3NlcgZfdGl0bGUMX2Rlc2NyaXB0aW9uDV9wcm9wb3NhbFR5cGUPX3RhcmdldENvbnRyYWN0Dl9leGVjdXRpb25EYXRhEF92b3RpbmdTdGFydFRpbWUxG0ECyYIRBMGwqr4EoAnKuASieKi2BGLOm1sE8f8oqgS/tSSPBAtcJ5oET6F8jgQ9BGQxBDQYDtYESxtb4QQObGZdBOlOvfsESm2TIwTPJo9/BCyj8iQEk1dOYTYaAI4RAicB+gHmAdYBxgG2AaQBjgF2AWoBXgFHAH8AZABJABcAAiJDMRkURDEYRDYaAReIBeUWKExQsCNDMRkURDEYRIgFt08FFk8FFk8FFk8FFk8FFk8FFk8FTwVQTwRQTwNQTwJQTFAoTFCwI0MxGRREMRhENhoBVwIANhoCF4gFbRYoTFCwI0MxGRREMRhENhoBVwIANhoCF4gFQhYoTFCwI0MxGRREMRhENhoBF4gEqUsOFRZXBgJPD1BLDhUWVwYCTw9QSw4VFlcGAk8PUE8OFksOFRZXBgJPD1BLDhUWVwYCTw9QTw4WTw4WTw4WTw4WTw4WTw4WTw4WTw4WTw4WSw4VgVoISRZXBgKAAgBaTFBLDxVPAghJFlcGAk8CTFBLDhVPAghMTw1QSwEWVwYCUEsMFU8CCBZXBgJQTwlQTwhQTwdQTwZQTwVQTwRQTwNQTwJQTFBPBVBPBFBPA1BPAlBMUChMULAjQzEZFEQxGEQ2GgFXAgCIA8oWKExQsCNDMRkURDEYRIgDrCNDMRkURDEYRIgDkyNDMRkURDEYRDYaARc2GgIXNhoDF4gDXyNDMRkURDEYRDYaAVcCADYaAheIAy0jQzEZFEQxGEQ2GgFXAgCIAw8jQzEZFEQxGEQ2GgEXiALMI0MxGRREMRhENhoBF4gCbSNDMRkURDEYRDYaAReIAeUjQzEZFEQxGEQ2GgEXNhoCF4gBUSNDMRkURDEYRDYaAVcCADYaAlcCADYaAxc2GgRXAgA2GgVXAgCIAHwWKExQsCNDMRkURDEYRDYaARc2GgIXNhoDFzYaBBc2GgUXNhoGF4gADSNDMRlA/bAxGBREI0OKBgAiKWVEFESAD2dvdmVybmFuY2VUb2tlbov6ZycJi/tnJwqL/GcnC4v9ZycOi/5nJxCL/2cnDCJnKiJnKSNnJwQxAGeJigUBIillRCMSRDEAiAJ2IicLZUQPRCInDGVEIwgnDEsBZ0kWSScRUDEASwG8SL9JJxJQSbxIi/u/SScTUEm8SIv8v0knFFCL/Ra/SScVUEm8SIv+v0knFlBJvEiL/79JJxdQMgcWvzIHIicJZURLAicFUE4CCBa/SScGUCIWTEsBv0sBJwdQSwG/SwEnCFBLAb9LAStQIxa/IicKZURLAicNUEwWv0wnD1BMv4mKAgAiKWVEIxJEi/8kDkSL/hZHAitQvkwXTEQjEkRJJwVQvkwXTEQyBw9EMQBJiAGnSU4DRExQSb1FARREi/8Wv4v/QAARiwAnB1BJvkwXTESLAQgWv4mL/yMSQQARiwAnBlBJvkwXTESLAQgWv4mLACcIUEm+TBdMRIsBCBa/iYoBAIv/FkkrUElOAr5MF0xEIxJESScFUL5MF0xEMgcMREknBlC+TBdJTgNOA0RJJwdQvkwXSU4DTgRESScIUL5MF0xETwNPAwgITCcNUL5MF0xETCULIiplRE8CCw9BAA+LAYsCDUEAByQWiwBMv4mBAxaLAEy/iYoBAIv/FkkrUEm+TBdMRCQSREsBJw9QSb5MF0xEFERPAicFUL5MF0xEMgciJw5lREsCCA9EMgciJw5lRE8CCCInEGVECA5EIxa/gQQWv4mKAQAxACInBGVEEkSL/xYrUEm+TBdJTwJEIxJAAAeLASQSQQAKI0SBBRaLAEy/iSJC//OKAQAxAEm8SIv/v4mKAgCL/ogASov/Fov+TL8iKmVETAmL/wgqTGeJigMAMQAiJwRlRBJEJwmL/WcnCov+ZycLi/9niTEAIicEZUQSRCkiZ4kxACInBGVEEkQpI2eJigEBi/+9RQFBAAiL/75MF0xEiSKJigEPi/8WSScRUL5ESwEnElC+REsCJxNQvkRLAycUUL5MF0xESwQnFVC+REsFJxZQvkRLBicXUL5MF0xESwcnBVC+TBdMREsIJwZQvkwXTERLCScHUL5MF0xESwonCFC+TBdMREsLK1C+TBdMREsMJw1QvkwXTERPDScPUL5MF0xEi/+JigIBi/8Wi/5MUL5MF0xEiYoCAYv/Fov+TFC9RQGJIicMZUQiJwllRCInCmVEIicLZUQiKmVEIillRImKAQGL/xZJJwZQvkwXTERLAScHUL5MF0xESwInCFC+TBdMRE4CCAhMJw1QvkwXTEQiKmVECyUKSUEACosAJQuLAQqMAIkiQv/5","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the GovernanceVault contract
 */
export type GovernanceVaultArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initialize(uint64,uint64,uint64,uint64,uint64,uint64)void': {
      governanceTokenId: bigint | number
      votingDuration: bigint | number
      quorumThreshold: bigint | number
      proposalThreshold: bigint | number
      executionDelay: bigint | number
      gracePeriod: bigint | number
    }
    'createProposal(byte[],byte[],uint64,byte[],byte[])uint64': {
      title: Uint8Array
      description: Uint8Array
      proposalType: bigint | number
      targetContract: Uint8Array
      executionData: Uint8Array
    }
    'vote(uint64,uint64)void': {
      proposalId: bigint | number
      support: bigint | number
    }
    'finalizeProposal(uint64)void': {
      proposalId: bigint | number
    }
    'executeProposal(uint64)void': {
      proposalId: bigint | number
    }
    'cancelProposal(uint64)void': {
      proposalId: bigint | number
    }
    'delegateVoting(byte[])void': {
      delegate: Uint8Array
    }
    'updateVotingPower(byte[],uint64)void': {
      user: Uint8Array
      newPower: bigint | number
    }
    'updateGovernanceParameters(uint64,uint64,uint64)void': {
      newVotingDuration: bigint | number
      newQuorumThreshold: bigint | number
      newProposalThreshold: bigint | number
    }
    'pauseGovernance()void': Record<string, never>
    'resumeGovernance()void': Record<string, never>
    'getVotingPower(byte[])uint64': {
      user: Uint8Array
    }
    'getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': {
      proposalId: bigint | number
    }
    'getVote(byte[],uint64)uint64': {
      voter: Uint8Array
      proposalId: bigint | number
    }
    'hasVoted(byte[],uint64)uint64': {
      voter: Uint8Array
      proposalId: bigint | number
    }
    'getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)': Record<string, never>
    'calculateQuorumProgress(uint64)uint64': {
      proposalId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initialize(uint64,uint64,uint64,uint64,uint64,uint64)void': [governanceTokenId: bigint | number, votingDuration: bigint | number, quorumThreshold: bigint | number, proposalThreshold: bigint | number, executionDelay: bigint | number, gracePeriod: bigint | number]
    'createProposal(byte[],byte[],uint64,byte[],byte[])uint64': [title: Uint8Array, description: Uint8Array, proposalType: bigint | number, targetContract: Uint8Array, executionData: Uint8Array]
    'vote(uint64,uint64)void': [proposalId: bigint | number, support: bigint | number]
    'finalizeProposal(uint64)void': [proposalId: bigint | number]
    'executeProposal(uint64)void': [proposalId: bigint | number]
    'cancelProposal(uint64)void': [proposalId: bigint | number]
    'delegateVoting(byte[])void': [delegate: Uint8Array]
    'updateVotingPower(byte[],uint64)void': [user: Uint8Array, newPower: bigint | number]
    'updateGovernanceParameters(uint64,uint64,uint64)void': [newVotingDuration: bigint | number, newQuorumThreshold: bigint | number, newProposalThreshold: bigint | number]
    'pauseGovernance()void': []
    'resumeGovernance()void': []
    'getVotingPower(byte[])uint64': [user: Uint8Array]
    'getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': [proposalId: bigint | number]
    'getVote(byte[],uint64)uint64': [voter: Uint8Array, proposalId: bigint | number]
    'hasVoted(byte[],uint64)uint64': [voter: Uint8Array, proposalId: bigint | number]
    'getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)': []
    'calculateQuorumProgress(uint64)uint64': [proposalId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type GovernanceVaultReturns = {
  'initialize(uint64,uint64,uint64,uint64,uint64,uint64)void': void
  'createProposal(byte[],byte[],uint64,byte[],byte[])uint64': bigint
  'vote(uint64,uint64)void': void
  'finalizeProposal(uint64)void': void
  'executeProposal(uint64)void': void
  'cancelProposal(uint64)void': void
  'delegateVoting(byte[])void': void
  'updateVotingPower(byte[],uint64)void': void
  'updateGovernanceParameters(uint64,uint64,uint64)void': void
  'pauseGovernance()void': void
  'resumeGovernance()void': void
  'getVotingPower(byte[])uint64': bigint
  'getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': [Uint8Array, Uint8Array, Uint8Array, bigint, Uint8Array, Uint8Array, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint]
  'getVote(byte[],uint64)uint64': bigint
  'hasVoted(byte[],uint64)uint64': bigint
  'getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)': [bigint, bigint, bigint, bigint, bigint, bigint]
  'calculateQuorumProgress(uint64)uint64': bigint
}

/**
 * Defines the types of available calls and state of the GovernanceVault smart contract.
 */
export type GovernanceVaultTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize(uint64,uint64,uint64,uint64,uint64,uint64)void' | 'initialize', {
      argsObj: GovernanceVaultArgs['obj']['initialize(uint64,uint64,uint64,uint64,uint64,uint64)void']
      argsTuple: GovernanceVaultArgs['tuple']['initialize(uint64,uint64,uint64,uint64,uint64,uint64)void']
      returns: GovernanceVaultReturns['initialize(uint64,uint64,uint64,uint64,uint64,uint64)void']
    }>
    & Record<'createProposal(byte[],byte[],uint64,byte[],byte[])uint64' | 'createProposal', {
      argsObj: GovernanceVaultArgs['obj']['createProposal(byte[],byte[],uint64,byte[],byte[])uint64']
      argsTuple: GovernanceVaultArgs['tuple']['createProposal(byte[],byte[],uint64,byte[],byte[])uint64']
      returns: GovernanceVaultReturns['createProposal(byte[],byte[],uint64,byte[],byte[])uint64']
    }>
    & Record<'vote(uint64,uint64)void' | 'vote', {
      argsObj: GovernanceVaultArgs['obj']['vote(uint64,uint64)void']
      argsTuple: GovernanceVaultArgs['tuple']['vote(uint64,uint64)void']
      returns: GovernanceVaultReturns['vote(uint64,uint64)void']
    }>
    & Record<'finalizeProposal(uint64)void' | 'finalizeProposal', {
      argsObj: GovernanceVaultArgs['obj']['finalizeProposal(uint64)void']
      argsTuple: GovernanceVaultArgs['tuple']['finalizeProposal(uint64)void']
      returns: GovernanceVaultReturns['finalizeProposal(uint64)void']
    }>
    & Record<'executeProposal(uint64)void' | 'executeProposal', {
      argsObj: GovernanceVaultArgs['obj']['executeProposal(uint64)void']
      argsTuple: GovernanceVaultArgs['tuple']['executeProposal(uint64)void']
      returns: GovernanceVaultReturns['executeProposal(uint64)void']
    }>
    & Record<'cancelProposal(uint64)void' | 'cancelProposal', {
      argsObj: GovernanceVaultArgs['obj']['cancelProposal(uint64)void']
      argsTuple: GovernanceVaultArgs['tuple']['cancelProposal(uint64)void']
      returns: GovernanceVaultReturns['cancelProposal(uint64)void']
    }>
    & Record<'delegateVoting(byte[])void' | 'delegateVoting', {
      argsObj: GovernanceVaultArgs['obj']['delegateVoting(byte[])void']
      argsTuple: GovernanceVaultArgs['tuple']['delegateVoting(byte[])void']
      returns: GovernanceVaultReturns['delegateVoting(byte[])void']
    }>
    & Record<'updateVotingPower(byte[],uint64)void' | 'updateVotingPower', {
      argsObj: GovernanceVaultArgs['obj']['updateVotingPower(byte[],uint64)void']
      argsTuple: GovernanceVaultArgs['tuple']['updateVotingPower(byte[],uint64)void']
      returns: GovernanceVaultReturns['updateVotingPower(byte[],uint64)void']
    }>
    & Record<'updateGovernanceParameters(uint64,uint64,uint64)void' | 'updateGovernanceParameters', {
      argsObj: GovernanceVaultArgs['obj']['updateGovernanceParameters(uint64,uint64,uint64)void']
      argsTuple: GovernanceVaultArgs['tuple']['updateGovernanceParameters(uint64,uint64,uint64)void']
      returns: GovernanceVaultReturns['updateGovernanceParameters(uint64,uint64,uint64)void']
    }>
    & Record<'pauseGovernance()void' | 'pauseGovernance', {
      argsObj: GovernanceVaultArgs['obj']['pauseGovernance()void']
      argsTuple: GovernanceVaultArgs['tuple']['pauseGovernance()void']
      returns: GovernanceVaultReturns['pauseGovernance()void']
    }>
    & Record<'resumeGovernance()void' | 'resumeGovernance', {
      argsObj: GovernanceVaultArgs['obj']['resumeGovernance()void']
      argsTuple: GovernanceVaultArgs['tuple']['resumeGovernance()void']
      returns: GovernanceVaultReturns['resumeGovernance()void']
    }>
    & Record<'getVotingPower(byte[])uint64' | 'getVotingPower', {
      argsObj: GovernanceVaultArgs['obj']['getVotingPower(byte[])uint64']
      argsTuple: GovernanceVaultArgs['tuple']['getVotingPower(byte[])uint64']
      returns: GovernanceVaultReturns['getVotingPower(byte[])uint64']
    }>
    & Record<'getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' | 'getProposal', {
      argsObj: GovernanceVaultArgs['obj']['getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: GovernanceVaultArgs['tuple']['getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      returns: GovernanceVaultReturns['getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'getVote(byte[],uint64)uint64' | 'getVote', {
      argsObj: GovernanceVaultArgs['obj']['getVote(byte[],uint64)uint64']
      argsTuple: GovernanceVaultArgs['tuple']['getVote(byte[],uint64)uint64']
      returns: GovernanceVaultReturns['getVote(byte[],uint64)uint64']
    }>
    & Record<'hasVoted(byte[],uint64)uint64' | 'hasVoted', {
      argsObj: GovernanceVaultArgs['obj']['hasVoted(byte[],uint64)uint64']
      argsTuple: GovernanceVaultArgs['tuple']['hasVoted(byte[],uint64)uint64']
      returns: GovernanceVaultReturns['hasVoted(byte[],uint64)uint64']
    }>
    & Record<'getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)' | 'getGovernanceInfo', {
      argsObj: GovernanceVaultArgs['obj']['getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: GovernanceVaultArgs['tuple']['getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)']
      returns: GovernanceVaultReturns['getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'calculateQuorumProgress(uint64)uint64' | 'calculateQuorumProgress', {
      argsObj: GovernanceVaultArgs['obj']['calculateQuorumProgress(uint64)uint64']
      argsTuple: GovernanceVaultArgs['tuple']['calculateQuorumProgress(uint64)uint64']
      returns: GovernanceVaultReturns['calculateQuorumProgress(uint64)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        proposalCount: bigint
        votingDuration: bigint
        quorumThreshold: bigint
        proposalThreshold: bigint
        governanceToken: bigint
        totalVotingPower: bigint
        admin: BinaryState
        governanceActive: bigint
        executionDelay: bigint
        gracePeriod: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type GovernanceVaultSignatures = keyof GovernanceVaultTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type GovernanceVaultNonVoidMethodSignatures = keyof GovernanceVaultTypes['methods'] extends infer T ? T extends keyof GovernanceVaultTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the GovernanceVault smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends GovernanceVaultSignatures> = GovernanceVaultTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the GovernanceVault smart contract to the method's return type
 */
export type MethodReturn<TSignature extends GovernanceVaultSignatures> = GovernanceVaultTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = GovernanceVaultTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type GovernanceVaultCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type GovernanceVaultDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: GovernanceVaultCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the GovernanceVault smart contract
 */
export abstract class GovernanceVaultParamsFactory {
  /**
   * Constructs a no op call for the initialize(uint64,uint64,uint64,uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<GovernanceVaultArgs['obj']['initialize(uint64,uint64,uint64,uint64,uint64,uint64)void'] | GovernanceVaultArgs['tuple']['initialize(uint64,uint64,uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize(uint64,uint64,uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.governanceTokenId, params.args.votingDuration, params.args.quorumThreshold, params.args.proposalThreshold, params.args.executionDelay, params.args.gracePeriod],
    }
  }
  /**
   * Constructs a no op call for the createProposal(byte[],byte[],uint64,byte[],byte[])uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createProposal(params: CallParams<GovernanceVaultArgs['obj']['createProposal(byte[],byte[],uint64,byte[],byte[])uint64'] | GovernanceVaultArgs['tuple']['createProposal(byte[],byte[],uint64,byte[],byte[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createProposal(byte[],byte[],uint64,byte[],byte[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.title, params.args.description, params.args.proposalType, params.args.targetContract, params.args.executionData],
    }
  }
  /**
   * Constructs a no op call for the vote(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static vote(params: CallParams<GovernanceVaultArgs['obj']['vote(uint64,uint64)void'] | GovernanceVaultArgs['tuple']['vote(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'vote(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.support],
    }
  }
  /**
   * Constructs a no op call for the finalizeProposal(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static finalizeProposal(params: CallParams<GovernanceVaultArgs['obj']['finalizeProposal(uint64)void'] | GovernanceVaultArgs['tuple']['finalizeProposal(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'finalizeProposal(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    }
  }
  /**
   * Constructs a no op call for the executeProposal(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static executeProposal(params: CallParams<GovernanceVaultArgs['obj']['executeProposal(uint64)void'] | GovernanceVaultArgs['tuple']['executeProposal(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'executeProposal(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    }
  }
  /**
   * Constructs a no op call for the cancelProposal(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static cancelProposal(params: CallParams<GovernanceVaultArgs['obj']['cancelProposal(uint64)void'] | GovernanceVaultArgs['tuple']['cancelProposal(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'cancelProposal(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    }
  }
  /**
   * Constructs a no op call for the delegateVoting(byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static delegateVoting(params: CallParams<GovernanceVaultArgs['obj']['delegateVoting(byte[])void'] | GovernanceVaultArgs['tuple']['delegateVoting(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'delegateVoting(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.delegate],
    }
  }
  /**
   * Constructs a no op call for the updateVotingPower(byte[],uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateVotingPower(params: CallParams<GovernanceVaultArgs['obj']['updateVotingPower(byte[],uint64)void'] | GovernanceVaultArgs['tuple']['updateVotingPower(byte[],uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateVotingPower(byte[],uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user, params.args.newPower],
    }
  }
  /**
   * Constructs a no op call for the updateGovernanceParameters(uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateGovernanceParameters(params: CallParams<GovernanceVaultArgs['obj']['updateGovernanceParameters(uint64,uint64,uint64)void'] | GovernanceVaultArgs['tuple']['updateGovernanceParameters(uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateGovernanceParameters(uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newVotingDuration, params.args.newQuorumThreshold, params.args.newProposalThreshold],
    }
  }
  /**
   * Constructs a no op call for the pauseGovernance()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pauseGovernance(params: CallParams<GovernanceVaultArgs['obj']['pauseGovernance()void'] | GovernanceVaultArgs['tuple']['pauseGovernance()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pauseGovernance()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the resumeGovernance()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resumeGovernance(params: CallParams<GovernanceVaultArgs['obj']['resumeGovernance()void'] | GovernanceVaultArgs['tuple']['resumeGovernance()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'resumeGovernance()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getVotingPower(byte[])uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getVotingPower(params: CallParams<GovernanceVaultArgs['obj']['getVotingPower(byte[])uint64'] | GovernanceVaultArgs['tuple']['getVotingPower(byte[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getVotingPower(byte[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
  /**
   * Constructs a no op call for the getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getProposal(params: CallParams<GovernanceVaultArgs['obj']['getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | GovernanceVaultArgs['tuple']['getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    }
  }
  /**
   * Constructs a no op call for the getVote(byte[],uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getVote(params: CallParams<GovernanceVaultArgs['obj']['getVote(byte[],uint64)uint64'] | GovernanceVaultArgs['tuple']['getVote(byte[],uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getVote(byte[],uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.voter, params.args.proposalId],
    }
  }
  /**
   * Constructs a no op call for the hasVoted(byte[],uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hasVoted(params: CallParams<GovernanceVaultArgs['obj']['hasVoted(byte[],uint64)uint64'] | GovernanceVaultArgs['tuple']['hasVoted(byte[],uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hasVoted(byte[],uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.voter, params.args.proposalId],
    }
  }
  /**
   * Constructs a no op call for the getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getGovernanceInfo(params: CallParams<GovernanceVaultArgs['obj']['getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)'] | GovernanceVaultArgs['tuple']['getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the calculateQuorumProgress(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateQuorumProgress(params: CallParams<GovernanceVaultArgs['obj']['calculateQuorumProgress(uint64)uint64'] | GovernanceVaultArgs['tuple']['calculateQuorumProgress(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateQuorumProgress(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the GovernanceVault smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class GovernanceVaultFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `GovernanceVaultFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new GovernanceVaultClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new GovernanceVaultClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the GovernanceVault smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: GovernanceVaultDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new GovernanceVaultClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the GovernanceVault smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the GovernanceVault smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the GovernanceVault smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new GovernanceVaultClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the GovernanceVault smart contract
 */
export class GovernanceVaultClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `GovernanceVaultClient`
   *
   * @param appClient An `AppClient` instance which has been created with the GovernanceVault app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `GovernanceVaultClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends GovernanceVaultNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `GovernanceVaultClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<GovernanceVaultClient> {
    return new GovernanceVaultClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `GovernanceVaultClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<GovernanceVaultClient> {
    return new GovernanceVaultClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the GovernanceVault smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `initialize(uint64,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<GovernanceVaultArgs['obj']['initialize(uint64,uint64,uint64,uint64,uint64,uint64)void'] | GovernanceVaultArgs['tuple']['initialize(uint64,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GovernanceVaultParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `createProposal(byte[],byte[],uint64,byte[],byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createProposal: (params: CallParams<GovernanceVaultArgs['obj']['createProposal(byte[],byte[],uint64,byte[],byte[])uint64'] | GovernanceVaultArgs['tuple']['createProposal(byte[],byte[],uint64,byte[],byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GovernanceVaultParamsFactory.createProposal(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `vote(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    vote: (params: CallParams<GovernanceVaultArgs['obj']['vote(uint64,uint64)void'] | GovernanceVaultArgs['tuple']['vote(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GovernanceVaultParamsFactory.vote(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `finalizeProposal(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    finalizeProposal: (params: CallParams<GovernanceVaultArgs['obj']['finalizeProposal(uint64)void'] | GovernanceVaultArgs['tuple']['finalizeProposal(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GovernanceVaultParamsFactory.finalizeProposal(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `executeProposal(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    executeProposal: (params: CallParams<GovernanceVaultArgs['obj']['executeProposal(uint64)void'] | GovernanceVaultArgs['tuple']['executeProposal(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GovernanceVaultParamsFactory.executeProposal(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `cancelProposal(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    cancelProposal: (params: CallParams<GovernanceVaultArgs['obj']['cancelProposal(uint64)void'] | GovernanceVaultArgs['tuple']['cancelProposal(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GovernanceVaultParamsFactory.cancelProposal(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `delegateVoting(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    delegateVoting: (params: CallParams<GovernanceVaultArgs['obj']['delegateVoting(byte[])void'] | GovernanceVaultArgs['tuple']['delegateVoting(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GovernanceVaultParamsFactory.delegateVoting(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `updateVotingPower(byte[],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateVotingPower: (params: CallParams<GovernanceVaultArgs['obj']['updateVotingPower(byte[],uint64)void'] | GovernanceVaultArgs['tuple']['updateVotingPower(byte[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GovernanceVaultParamsFactory.updateVotingPower(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `updateGovernanceParameters(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateGovernanceParameters: (params: CallParams<GovernanceVaultArgs['obj']['updateGovernanceParameters(uint64,uint64,uint64)void'] | GovernanceVaultArgs['tuple']['updateGovernanceParameters(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GovernanceVaultParamsFactory.updateGovernanceParameters(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `pauseGovernance()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pauseGovernance: (params: CallParams<GovernanceVaultArgs['obj']['pauseGovernance()void'] | GovernanceVaultArgs['tuple']['pauseGovernance()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(GovernanceVaultParamsFactory.pauseGovernance(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `resumeGovernance()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resumeGovernance: (params: CallParams<GovernanceVaultArgs['obj']['resumeGovernance()void'] | GovernanceVaultArgs['tuple']['resumeGovernance()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(GovernanceVaultParamsFactory.resumeGovernance(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `getVotingPower(byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getVotingPower: (params: CallParams<GovernanceVaultArgs['obj']['getVotingPower(byte[])uint64'] | GovernanceVaultArgs['tuple']['getVotingPower(byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GovernanceVaultParamsFactory.getVotingPower(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getProposal: (params: CallParams<GovernanceVaultArgs['obj']['getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | GovernanceVaultArgs['tuple']['getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GovernanceVaultParamsFactory.getProposal(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `getVote(byte[],uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getVote: (params: CallParams<GovernanceVaultArgs['obj']['getVote(byte[],uint64)uint64'] | GovernanceVaultArgs['tuple']['getVote(byte[],uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GovernanceVaultParamsFactory.getVote(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `hasVoted(byte[],uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hasVoted: (params: CallParams<GovernanceVaultArgs['obj']['hasVoted(byte[],uint64)uint64'] | GovernanceVaultArgs['tuple']['hasVoted(byte[],uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GovernanceVaultParamsFactory.hasVoted(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getGovernanceInfo: (params: CallParams<GovernanceVaultArgs['obj']['getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)'] | GovernanceVaultArgs['tuple']['getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(GovernanceVaultParamsFactory.getGovernanceInfo(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `calculateQuorumProgress(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateQuorumProgress: (params: CallParams<GovernanceVaultArgs['obj']['calculateQuorumProgress(uint64)uint64'] | GovernanceVaultArgs['tuple']['calculateQuorumProgress(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GovernanceVaultParamsFactory.calculateQuorumProgress(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the GovernanceVault smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `initialize(uint64,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<GovernanceVaultArgs['obj']['initialize(uint64,uint64,uint64,uint64,uint64,uint64)void'] | GovernanceVaultArgs['tuple']['initialize(uint64,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GovernanceVaultParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `createProposal(byte[],byte[],uint64,byte[],byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createProposal: (params: CallParams<GovernanceVaultArgs['obj']['createProposal(byte[],byte[],uint64,byte[],byte[])uint64'] | GovernanceVaultArgs['tuple']['createProposal(byte[],byte[],uint64,byte[],byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GovernanceVaultParamsFactory.createProposal(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `vote(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    vote: (params: CallParams<GovernanceVaultArgs['obj']['vote(uint64,uint64)void'] | GovernanceVaultArgs['tuple']['vote(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GovernanceVaultParamsFactory.vote(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `finalizeProposal(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    finalizeProposal: (params: CallParams<GovernanceVaultArgs['obj']['finalizeProposal(uint64)void'] | GovernanceVaultArgs['tuple']['finalizeProposal(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GovernanceVaultParamsFactory.finalizeProposal(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `executeProposal(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    executeProposal: (params: CallParams<GovernanceVaultArgs['obj']['executeProposal(uint64)void'] | GovernanceVaultArgs['tuple']['executeProposal(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GovernanceVaultParamsFactory.executeProposal(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `cancelProposal(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    cancelProposal: (params: CallParams<GovernanceVaultArgs['obj']['cancelProposal(uint64)void'] | GovernanceVaultArgs['tuple']['cancelProposal(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GovernanceVaultParamsFactory.cancelProposal(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `delegateVoting(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    delegateVoting: (params: CallParams<GovernanceVaultArgs['obj']['delegateVoting(byte[])void'] | GovernanceVaultArgs['tuple']['delegateVoting(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GovernanceVaultParamsFactory.delegateVoting(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `updateVotingPower(byte[],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateVotingPower: (params: CallParams<GovernanceVaultArgs['obj']['updateVotingPower(byte[],uint64)void'] | GovernanceVaultArgs['tuple']['updateVotingPower(byte[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GovernanceVaultParamsFactory.updateVotingPower(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `updateGovernanceParameters(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateGovernanceParameters: (params: CallParams<GovernanceVaultArgs['obj']['updateGovernanceParameters(uint64,uint64,uint64)void'] | GovernanceVaultArgs['tuple']['updateGovernanceParameters(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GovernanceVaultParamsFactory.updateGovernanceParameters(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `pauseGovernance()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pauseGovernance: (params: CallParams<GovernanceVaultArgs['obj']['pauseGovernance()void'] | GovernanceVaultArgs['tuple']['pauseGovernance()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(GovernanceVaultParamsFactory.pauseGovernance(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `resumeGovernance()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resumeGovernance: (params: CallParams<GovernanceVaultArgs['obj']['resumeGovernance()void'] | GovernanceVaultArgs['tuple']['resumeGovernance()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(GovernanceVaultParamsFactory.resumeGovernance(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `getVotingPower(byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getVotingPower: (params: CallParams<GovernanceVaultArgs['obj']['getVotingPower(byte[])uint64'] | GovernanceVaultArgs['tuple']['getVotingPower(byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GovernanceVaultParamsFactory.getVotingPower(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getProposal: (params: CallParams<GovernanceVaultArgs['obj']['getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | GovernanceVaultArgs['tuple']['getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GovernanceVaultParamsFactory.getProposal(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `getVote(byte[],uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getVote: (params: CallParams<GovernanceVaultArgs['obj']['getVote(byte[],uint64)uint64'] | GovernanceVaultArgs['tuple']['getVote(byte[],uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GovernanceVaultParamsFactory.getVote(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `hasVoted(byte[],uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hasVoted: (params: CallParams<GovernanceVaultArgs['obj']['hasVoted(byte[],uint64)uint64'] | GovernanceVaultArgs['tuple']['hasVoted(byte[],uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GovernanceVaultParamsFactory.hasVoted(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getGovernanceInfo: (params: CallParams<GovernanceVaultArgs['obj']['getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)'] | GovernanceVaultArgs['tuple']['getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(GovernanceVaultParamsFactory.getGovernanceInfo(params))
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `calculateQuorumProgress(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateQuorumProgress: (params: CallParams<GovernanceVaultArgs['obj']['calculateQuorumProgress(uint64)uint64'] | GovernanceVaultArgs['tuple']['calculateQuorumProgress(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GovernanceVaultParamsFactory.calculateQuorumProgress(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the GovernanceVault smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `initialize(uint64,uint64,uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<GovernanceVaultArgs['obj']['initialize(uint64,uint64,uint64,uint64,uint64,uint64)void'] | GovernanceVaultArgs['tuple']['initialize(uint64,uint64,uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GovernanceVaultParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | GovernanceVaultReturns['initialize(uint64,uint64,uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `createProposal(byte[],byte[],uint64,byte[],byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createProposal: async (params: CallParams<GovernanceVaultArgs['obj']['createProposal(byte[],byte[],uint64,byte[],byte[])uint64'] | GovernanceVaultArgs['tuple']['createProposal(byte[],byte[],uint64,byte[],byte[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GovernanceVaultParamsFactory.createProposal(params))
      return {...result, return: result.return as unknown as (undefined | GovernanceVaultReturns['createProposal(byte[],byte[],uint64,byte[],byte[])uint64'])}
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `vote(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    vote: async (params: CallParams<GovernanceVaultArgs['obj']['vote(uint64,uint64)void'] | GovernanceVaultArgs['tuple']['vote(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GovernanceVaultParamsFactory.vote(params))
      return {...result, return: result.return as unknown as (undefined | GovernanceVaultReturns['vote(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `finalizeProposal(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    finalizeProposal: async (params: CallParams<GovernanceVaultArgs['obj']['finalizeProposal(uint64)void'] | GovernanceVaultArgs['tuple']['finalizeProposal(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GovernanceVaultParamsFactory.finalizeProposal(params))
      return {...result, return: result.return as unknown as (undefined | GovernanceVaultReturns['finalizeProposal(uint64)void'])}
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `executeProposal(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    executeProposal: async (params: CallParams<GovernanceVaultArgs['obj']['executeProposal(uint64)void'] | GovernanceVaultArgs['tuple']['executeProposal(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GovernanceVaultParamsFactory.executeProposal(params))
      return {...result, return: result.return as unknown as (undefined | GovernanceVaultReturns['executeProposal(uint64)void'])}
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `cancelProposal(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    cancelProposal: async (params: CallParams<GovernanceVaultArgs['obj']['cancelProposal(uint64)void'] | GovernanceVaultArgs['tuple']['cancelProposal(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GovernanceVaultParamsFactory.cancelProposal(params))
      return {...result, return: result.return as unknown as (undefined | GovernanceVaultReturns['cancelProposal(uint64)void'])}
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `delegateVoting(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    delegateVoting: async (params: CallParams<GovernanceVaultArgs['obj']['delegateVoting(byte[])void'] | GovernanceVaultArgs['tuple']['delegateVoting(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GovernanceVaultParamsFactory.delegateVoting(params))
      return {...result, return: result.return as unknown as (undefined | GovernanceVaultReturns['delegateVoting(byte[])void'])}
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `updateVotingPower(byte[],uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateVotingPower: async (params: CallParams<GovernanceVaultArgs['obj']['updateVotingPower(byte[],uint64)void'] | GovernanceVaultArgs['tuple']['updateVotingPower(byte[],uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GovernanceVaultParamsFactory.updateVotingPower(params))
      return {...result, return: result.return as unknown as (undefined | GovernanceVaultReturns['updateVotingPower(byte[],uint64)void'])}
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `updateGovernanceParameters(uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateGovernanceParameters: async (params: CallParams<GovernanceVaultArgs['obj']['updateGovernanceParameters(uint64,uint64,uint64)void'] | GovernanceVaultArgs['tuple']['updateGovernanceParameters(uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GovernanceVaultParamsFactory.updateGovernanceParameters(params))
      return {...result, return: result.return as unknown as (undefined | GovernanceVaultReturns['updateGovernanceParameters(uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `pauseGovernance()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pauseGovernance: async (params: CallParams<GovernanceVaultArgs['obj']['pauseGovernance()void'] | GovernanceVaultArgs['tuple']['pauseGovernance()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(GovernanceVaultParamsFactory.pauseGovernance(params))
      return {...result, return: result.return as unknown as (undefined | GovernanceVaultReturns['pauseGovernance()void'])}
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `resumeGovernance()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resumeGovernance: async (params: CallParams<GovernanceVaultArgs['obj']['resumeGovernance()void'] | GovernanceVaultArgs['tuple']['resumeGovernance()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(GovernanceVaultParamsFactory.resumeGovernance(params))
      return {...result, return: result.return as unknown as (undefined | GovernanceVaultReturns['resumeGovernance()void'])}
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `getVotingPower(byte[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getVotingPower: async (params: CallParams<GovernanceVaultArgs['obj']['getVotingPower(byte[])uint64'] | GovernanceVaultArgs['tuple']['getVotingPower(byte[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GovernanceVaultParamsFactory.getVotingPower(params))
      return {...result, return: result.return as unknown as (undefined | GovernanceVaultReturns['getVotingPower(byte[])uint64'])}
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getProposal: async (params: CallParams<GovernanceVaultArgs['obj']['getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | GovernanceVaultArgs['tuple']['getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GovernanceVaultParamsFactory.getProposal(params))
      return {...result, return: result.return as unknown as (undefined | GovernanceVaultReturns['getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `getVote(byte[],uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getVote: async (params: CallParams<GovernanceVaultArgs['obj']['getVote(byte[],uint64)uint64'] | GovernanceVaultArgs['tuple']['getVote(byte[],uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GovernanceVaultParamsFactory.getVote(params))
      return {...result, return: result.return as unknown as (undefined | GovernanceVaultReturns['getVote(byte[],uint64)uint64'])}
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `hasVoted(byte[],uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hasVoted: async (params: CallParams<GovernanceVaultArgs['obj']['hasVoted(byte[],uint64)uint64'] | GovernanceVaultArgs['tuple']['hasVoted(byte[],uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GovernanceVaultParamsFactory.hasVoted(params))
      return {...result, return: result.return as unknown as (undefined | GovernanceVaultReturns['hasVoted(byte[],uint64)uint64'])}
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getGovernanceInfo: async (params: CallParams<GovernanceVaultArgs['obj']['getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)'] | GovernanceVaultArgs['tuple']['getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(GovernanceVaultParamsFactory.getGovernanceInfo(params))
      return {...result, return: result.return as unknown as (undefined | GovernanceVaultReturns['getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the GovernanceVault smart contract using the `calculateQuorumProgress(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateQuorumProgress: async (params: CallParams<GovernanceVaultArgs['obj']['calculateQuorumProgress(uint64)uint64'] | GovernanceVaultArgs['tuple']['calculateQuorumProgress(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GovernanceVaultParamsFactory.calculateQuorumProgress(params))
      return {...result, return: result.return as unknown as (undefined | GovernanceVaultReturns['calculateQuorumProgress(uint64)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new GovernanceVaultClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current GovernanceVault app
   */
  state = {
    /**
     * Methods to access global state for the current GovernanceVault app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          proposalCount: result.proposalCount,
          votingDuration: result.votingDuration,
          quorumThreshold: result.quorumThreshold,
          proposalThreshold: result.proposalThreshold,
          governanceToken: result.governanceToken,
          totalVotingPower: result.totalVotingPower,
          admin: new BinaryStateValue(result.admin),
          governanceActive: result.governanceActive,
          executionDelay: result.executionDelay,
          gracePeriod: result.gracePeriod,
        }
      },
      /**
       * Get the current value of the proposalCount key in global state
       */
      proposalCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("proposalCount")) as bigint | undefined },
      /**
       * Get the current value of the votingDuration key in global state
       */
      votingDuration: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("votingDuration")) as bigint | undefined },
      /**
       * Get the current value of the quorumThreshold key in global state
       */
      quorumThreshold: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("quorumThreshold")) as bigint | undefined },
      /**
       * Get the current value of the proposalThreshold key in global state
       */
      proposalThreshold: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("proposalThreshold")) as bigint | undefined },
      /**
       * Get the current value of the governanceToken key in global state
       */
      governanceToken: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("governanceToken")) as bigint | undefined },
      /**
       * Get the current value of the totalVotingPower key in global state
       */
      totalVotingPower: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalVotingPower")) as bigint | undefined },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin")) as Uint8Array | undefined) },
      /**
       * Get the current value of the governanceActive key in global state
       */
      governanceActive: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("governanceActive")) as bigint | undefined },
      /**
       * Get the current value of the executionDelay key in global state
       */
      executionDelay: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("executionDelay")) as bigint | undefined },
      /**
       * Get the current value of the gracePeriod key in global state
       */
      gracePeriod: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("gracePeriod")) as bigint | undefined },
    },
  }

  public newGroup(): GovernanceVaultComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initialize(uint64,uint64,uint64,uint64,uint64,uint64)void method call against the GovernanceVault contract
       */
      initialize(params: CallParams<GovernanceVaultArgs['obj']['initialize(uint64,uint64,uint64,uint64,uint64,uint64)void'] | GovernanceVaultArgs['tuple']['initialize(uint64,uint64,uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a createProposal(byte[],byte[],uint64,byte[],byte[])uint64 method call against the GovernanceVault contract
       */
      createProposal(params: CallParams<GovernanceVaultArgs['obj']['createProposal(byte[],byte[],uint64,byte[],byte[])uint64'] | GovernanceVaultArgs['tuple']['createProposal(byte[],byte[],uint64,byte[],byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createProposal(params)))
        resultMappers.push((v) => client.decodeReturnValue('createProposal(byte[],byte[],uint64,byte[],byte[])uint64', v))
        return this
      },
      /**
       * Add a vote(uint64,uint64)void method call against the GovernanceVault contract
       */
      vote(params: CallParams<GovernanceVaultArgs['obj']['vote(uint64,uint64)void'] | GovernanceVaultArgs['tuple']['vote(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.vote(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a finalizeProposal(uint64)void method call against the GovernanceVault contract
       */
      finalizeProposal(params: CallParams<GovernanceVaultArgs['obj']['finalizeProposal(uint64)void'] | GovernanceVaultArgs['tuple']['finalizeProposal(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.finalizeProposal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a executeProposal(uint64)void method call against the GovernanceVault contract
       */
      executeProposal(params: CallParams<GovernanceVaultArgs['obj']['executeProposal(uint64)void'] | GovernanceVaultArgs['tuple']['executeProposal(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.executeProposal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a cancelProposal(uint64)void method call against the GovernanceVault contract
       */
      cancelProposal(params: CallParams<GovernanceVaultArgs['obj']['cancelProposal(uint64)void'] | GovernanceVaultArgs['tuple']['cancelProposal(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.cancelProposal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a delegateVoting(byte[])void method call against the GovernanceVault contract
       */
      delegateVoting(params: CallParams<GovernanceVaultArgs['obj']['delegateVoting(byte[])void'] | GovernanceVaultArgs['tuple']['delegateVoting(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.delegateVoting(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateVotingPower(byte[],uint64)void method call against the GovernanceVault contract
       */
      updateVotingPower(params: CallParams<GovernanceVaultArgs['obj']['updateVotingPower(byte[],uint64)void'] | GovernanceVaultArgs['tuple']['updateVotingPower(byte[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateVotingPower(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateGovernanceParameters(uint64,uint64,uint64)void method call against the GovernanceVault contract
       */
      updateGovernanceParameters(params: CallParams<GovernanceVaultArgs['obj']['updateGovernanceParameters(uint64,uint64,uint64)void'] | GovernanceVaultArgs['tuple']['updateGovernanceParameters(uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateGovernanceParameters(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a pauseGovernance()void method call against the GovernanceVault contract
       */
      pauseGovernance(params: CallParams<GovernanceVaultArgs['obj']['pauseGovernance()void'] | GovernanceVaultArgs['tuple']['pauseGovernance()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pauseGovernance(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a resumeGovernance()void method call against the GovernanceVault contract
       */
      resumeGovernance(params: CallParams<GovernanceVaultArgs['obj']['resumeGovernance()void'] | GovernanceVaultArgs['tuple']['resumeGovernance()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resumeGovernance(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getVotingPower(byte[])uint64 method call against the GovernanceVault contract
       */
      getVotingPower(params: CallParams<GovernanceVaultArgs['obj']['getVotingPower(byte[])uint64'] | GovernanceVaultArgs['tuple']['getVotingPower(byte[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getVotingPower(params)))
        resultMappers.push((v) => client.decodeReturnValue('getVotingPower(byte[])uint64', v))
        return this
      },
      /**
       * Add a getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) method call against the GovernanceVault contract
       */
      getProposal(params: CallParams<GovernanceVaultArgs['obj']['getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | GovernanceVaultArgs['tuple']['getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getProposal(params)))
        resultMappers.push((v) => client.decodeReturnValue('getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getVote(byte[],uint64)uint64 method call against the GovernanceVault contract
       */
      getVote(params: CallParams<GovernanceVaultArgs['obj']['getVote(byte[],uint64)uint64'] | GovernanceVaultArgs['tuple']['getVote(byte[],uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getVote(params)))
        resultMappers.push((v) => client.decodeReturnValue('getVote(byte[],uint64)uint64', v))
        return this
      },
      /**
       * Add a hasVoted(byte[],uint64)uint64 method call against the GovernanceVault contract
       */
      hasVoted(params: CallParams<GovernanceVaultArgs['obj']['hasVoted(byte[],uint64)uint64'] | GovernanceVaultArgs['tuple']['hasVoted(byte[],uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hasVoted(params)))
        resultMappers.push((v) => client.decodeReturnValue('hasVoted(byte[],uint64)uint64', v))
        return this
      },
      /**
       * Add a getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64) method call against the GovernanceVault contract
       */
      getGovernanceInfo(params: CallParams<GovernanceVaultArgs['obj']['getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)'] | GovernanceVaultArgs['tuple']['getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getGovernanceInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a calculateQuorumProgress(uint64)uint64 method call against the GovernanceVault contract
       */
      calculateQuorumProgress(params: CallParams<GovernanceVaultArgs['obj']['calculateQuorumProgress(uint64)uint64'] | GovernanceVaultArgs['tuple']['calculateQuorumProgress(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateQuorumProgress(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateQuorumProgress(uint64)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the GovernanceVault contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as GovernanceVaultComposer
  }
}
export type GovernanceVaultComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize(uint64,uint64,uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<GovernanceVaultArgs['obj']['initialize(uint64,uint64,uint64,uint64,uint64,uint64)void'] | GovernanceVaultArgs['tuple']['initialize(uint64,uint64,uint64,uint64,uint64,uint64)void']>): GovernanceVaultComposer<[...TReturns, GovernanceVaultReturns['initialize(uint64,uint64,uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the createProposal(byte[],byte[],uint64,byte[],byte[])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createProposal(params?: CallParams<GovernanceVaultArgs['obj']['createProposal(byte[],byte[],uint64,byte[],byte[])uint64'] | GovernanceVaultArgs['tuple']['createProposal(byte[],byte[],uint64,byte[],byte[])uint64']>): GovernanceVaultComposer<[...TReturns, GovernanceVaultReturns['createProposal(byte[],byte[],uint64,byte[],byte[])uint64'] | undefined]>

  /**
   * Calls the vote(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  vote(params?: CallParams<GovernanceVaultArgs['obj']['vote(uint64,uint64)void'] | GovernanceVaultArgs['tuple']['vote(uint64,uint64)void']>): GovernanceVaultComposer<[...TReturns, GovernanceVaultReturns['vote(uint64,uint64)void'] | undefined]>

  /**
   * Calls the finalizeProposal(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  finalizeProposal(params?: CallParams<GovernanceVaultArgs['obj']['finalizeProposal(uint64)void'] | GovernanceVaultArgs['tuple']['finalizeProposal(uint64)void']>): GovernanceVaultComposer<[...TReturns, GovernanceVaultReturns['finalizeProposal(uint64)void'] | undefined]>

  /**
   * Calls the executeProposal(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  executeProposal(params?: CallParams<GovernanceVaultArgs['obj']['executeProposal(uint64)void'] | GovernanceVaultArgs['tuple']['executeProposal(uint64)void']>): GovernanceVaultComposer<[...TReturns, GovernanceVaultReturns['executeProposal(uint64)void'] | undefined]>

  /**
   * Calls the cancelProposal(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cancelProposal(params?: CallParams<GovernanceVaultArgs['obj']['cancelProposal(uint64)void'] | GovernanceVaultArgs['tuple']['cancelProposal(uint64)void']>): GovernanceVaultComposer<[...TReturns, GovernanceVaultReturns['cancelProposal(uint64)void'] | undefined]>

  /**
   * Calls the delegateVoting(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delegateVoting(params?: CallParams<GovernanceVaultArgs['obj']['delegateVoting(byte[])void'] | GovernanceVaultArgs['tuple']['delegateVoting(byte[])void']>): GovernanceVaultComposer<[...TReturns, GovernanceVaultReturns['delegateVoting(byte[])void'] | undefined]>

  /**
   * Calls the updateVotingPower(byte[],uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateVotingPower(params?: CallParams<GovernanceVaultArgs['obj']['updateVotingPower(byte[],uint64)void'] | GovernanceVaultArgs['tuple']['updateVotingPower(byte[],uint64)void']>): GovernanceVaultComposer<[...TReturns, GovernanceVaultReturns['updateVotingPower(byte[],uint64)void'] | undefined]>

  /**
   * Calls the updateGovernanceParameters(uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateGovernanceParameters(params?: CallParams<GovernanceVaultArgs['obj']['updateGovernanceParameters(uint64,uint64,uint64)void'] | GovernanceVaultArgs['tuple']['updateGovernanceParameters(uint64,uint64,uint64)void']>): GovernanceVaultComposer<[...TReturns, GovernanceVaultReturns['updateGovernanceParameters(uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the pauseGovernance()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pauseGovernance(params?: CallParams<GovernanceVaultArgs['obj']['pauseGovernance()void'] | GovernanceVaultArgs['tuple']['pauseGovernance()void']>): GovernanceVaultComposer<[...TReturns, GovernanceVaultReturns['pauseGovernance()void'] | undefined]>

  /**
   * Calls the resumeGovernance()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resumeGovernance(params?: CallParams<GovernanceVaultArgs['obj']['resumeGovernance()void'] | GovernanceVaultArgs['tuple']['resumeGovernance()void']>): GovernanceVaultComposer<[...TReturns, GovernanceVaultReturns['resumeGovernance()void'] | undefined]>

  /**
   * Calls the getVotingPower(byte[])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVotingPower(params?: CallParams<GovernanceVaultArgs['obj']['getVotingPower(byte[])uint64'] | GovernanceVaultArgs['tuple']['getVotingPower(byte[])uint64']>): GovernanceVaultComposer<[...TReturns, GovernanceVaultReturns['getVotingPower(byte[])uint64'] | undefined]>

  /**
   * Calls the getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProposal(params?: CallParams<GovernanceVaultArgs['obj']['getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | GovernanceVaultArgs['tuple']['getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>): GovernanceVaultComposer<[...TReturns, GovernanceVaultReturns['getProposal(uint64)(byte[],byte[],byte[],uint64,byte[],byte[],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getVote(byte[],uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getVote(params?: CallParams<GovernanceVaultArgs['obj']['getVote(byte[],uint64)uint64'] | GovernanceVaultArgs['tuple']['getVote(byte[],uint64)uint64']>): GovernanceVaultComposer<[...TReturns, GovernanceVaultReturns['getVote(byte[],uint64)uint64'] | undefined]>

  /**
   * Calls the hasVoted(byte[],uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hasVoted(params?: CallParams<GovernanceVaultArgs['obj']['hasVoted(byte[],uint64)uint64'] | GovernanceVaultArgs['tuple']['hasVoted(byte[],uint64)uint64']>): GovernanceVaultComposer<[...TReturns, GovernanceVaultReturns['hasVoted(byte[],uint64)uint64'] | undefined]>

  /**
   * Calls the getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getGovernanceInfo(params?: CallParams<GovernanceVaultArgs['obj']['getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)'] | GovernanceVaultArgs['tuple']['getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)']>): GovernanceVaultComposer<[...TReturns, GovernanceVaultReturns['getGovernanceInfo()(uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the calculateQuorumProgress(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateQuorumProgress(params?: CallParams<GovernanceVaultArgs['obj']['calculateQuorumProgress(uint64)uint64'] | GovernanceVaultArgs['tuple']['calculateQuorumProgress(uint64)uint64']>): GovernanceVaultComposer<[...TReturns, GovernanceVaultReturns['calculateQuorumProgress(uint64)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the GovernanceVault smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): GovernanceVaultComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): GovernanceVaultComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<GovernanceVaultComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<GovernanceVaultComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<GovernanceVaultComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<GovernanceVaultComposerResults<TReturns>>
}
export type GovernanceVaultComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

