/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"EmergencyPause","structs":{"getCircuitBreakerStatusResult":[{"name":"currentDailyVolume","type":"uint64"},{"name":"maxDailyVolume","type":"uint64"},{"name":"remainingVolume","type":"uint64"},{"name":"lastReset","type":"uint64"}],"getCurrentEmergencyStatusResult":[{"name":"active","type":"bool"},{"name":"level","type":"uint64"},{"name":"eventId","type":"uint64"},{"name":"duration","type":"uint64"},{"name":"recoveryMode","type":"bool"}],"getEmergencyEventResult":[{"name":"level","type":"uint64"},{"name":"reason","type":"byte[]"},{"name":"triggeredBy","type":"byte[]"},{"name":"timestamp","type":"uint64"},{"name":"resolved","type":"uint64"},{"name":"resolvedAt","type":"uint64"},{"name":"resolvedBy","type":"byte[]"}]},"methods":[{"name":"initialize","args":[{"type":"byte[]","name":"admin"},{"type":"uint64","name":"cooldownPeriod"},{"type":"uint64","name":"autoResolveTime"},{"type":"uint64","name":"maxEmergencyDuration"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"triggerEmergency","args":[{"type":"uint64","name":"level"},{"type":"string","name":"reason"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"resolveEmergency","args":[{"type":"uint64","name":"eventId"},{"type":"string","name":"resolution"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"escalateEmergency","args":[{"type":"uint64","name":"newLevel"},{"type":"string","name":"reason"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"autoResolveCheck","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addEmergencyOperator","args":[{"type":"byte[]","name":"operator"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"removeEmergencyOperator","args":[{"type":"byte[]","name":"operator"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"activateRecoveryMode","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"executeRecovery","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"checkCircuitBreaker","args":[{"type":"uint64","name":"transactionAmount"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"reportSuspiciousActivity","args":[{"type":"string","name":"activityType"},{"type":"string","name":"details"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"updateEmergencyThresholds","args":[{"type":"uint64","name":"suspiciousThreshold"},{"type":"uint64","name":"failedTxThreshold"},{"type":"uint64","name":"largeWithdrawalThreshold"},{"type":"uint64","name":"maxDailyVolume"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"isOperationAllowed","args":[{"type":"string","name":"operationType"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"isAuthorizedOperator","args":[{"type":"byte[]","name":"operator"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getEmergencyEvent","args":[{"type":"uint64","name":"eventId"}],"returns":{"type":"(uint64,byte[],byte[],uint64,uint64,uint64,byte[])","struct":"getEmergencyEventResult"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getCurrentEmergencyStatus","args":[],"returns":{"type":"(bool,uint64,uint64,uint64,bool)","struct":"getCurrentEmergencyStatusResult"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getCircuitBreakerStatus","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64)","struct":"getCircuitBreakerStatusResult"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getEmergencyHistory","args":[{"type":"uint64","name":"limit"}],"returns":{"type":"(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":16,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"currentEmergencyLevel":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y3VycmVudEVtZXJnZW5jeUxldmVs"},"emergencyActive":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZW1lcmdlbmN5QWN0aXZl"},"emergencyCount":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZW1lcmdlbmN5Q291bnQ="},"lastEmergencyTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdEVtZXJnZW5jeVRpbWU="},"admin":{"keyType":"AVMString","valueType":"AVMBytes","key":"YWRtaW4="},"emergencyOperators":{"keyType":"AVMString","valueType":"AVMBytes","key":"ZW1lcmdlbmN5T3BlcmF0b3Jz"},"cooldownPeriod":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y29vbGRvd25QZXJpb2Q="},"autoResolveTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXV0b1Jlc29sdmVUaW1l"},"maxEmergencyDuration":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4RW1lcmdlbmN5RHVyYXRpb24="},"suspiciousActivityThreshold":{"keyType":"AVMString","valueType":"AVMUint64","key":"c3VzcGljaW91c0FjdGl2aXR5VGhyZXNob2xk"},"failedTransactionThreshold":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZmFpbGVkVHJhbnNhY3Rpb25UaHJlc2hvbGQ="},"largeWithdrawalThreshold":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFyZ2VXaXRoZHJhd2FsVGhyZXNob2xk"},"maxDailyVolume":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4RGFpbHlWb2x1bWU="},"currentDailyVolume":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y3VycmVudERhaWx5Vm9sdW1l"},"lastVolumeReset":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdFZvbHVtZVJlc2V0"},"recoveryMode":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmVjb3ZlcnlNb2Rl"},"recoveryStartTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmVjb3ZlcnlTdGFydFRpbWU="},"recoveryApprovals":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmVjb3ZlcnlBcHByb3ZhbHM="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1518,1689,2533,2537,2541,2548,2555,2562,2566,2591],"errorMessage":"Box must have value"},{"pc":[540,561,600,651,764,793,822,850,874,901,913,925,943,961,973,995,1017,1039],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1074],"errorMessage":"can only call when creating"},{"pc":[543,564,603,654,767,796,825,853,877,904,916,928,946,964,976,998,1020,1042],"errorMessage":"can only call when not creating"},{"pc":[1212,1309,1332,1338,1344,1480,1486,1524,1559,1610,1616,1621,1672,1680,1699,1709,1719,1757,1770,1817,1859,1898,1912,1950,1988,1997,2003,2013,2065,2088,2099,2144,2190,2285,2317,2333,2482,2575,2582,2601,2605,2609,2614,2632,2637,2646,2651,2659,2664,2669,2693],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAECBCYcD2VtZXJnZW5jeUFjdGl2ZQVhZG1pbhVjdXJyZW50RW1lcmdlbmN5TGV2ZWwOZW1lcmdlbmN5Q291bnQMcmVjb3ZlcnlNb2RlEXJlY292ZXJ5QXBwcm92YWxzBBUffHUSY3VycmVudERhaWx5Vm9sdW1lDm1heERhaWx5Vm9sdW1lAQAPbGFzdFZvbHVtZVJlc2V0Cl90aW1lc3RhbXARbGFzdEVtZXJnZW5jeVRpbWUYbGFyZ2VXaXRoZHJhd2FsVGhyZXNob2xkBl9sZXZlbAlfcmVzb2x2ZWQLX3Jlc29sdmVkQXQLX3Jlc29sdmVkQnkJZW1lcmdlbmN5AgAmDmNvb2xkb3duUGVyaW9kD2F1dG9SZXNvbHZlVGltZRRtYXhFbWVyZ2VuY3lEdXJhdGlvbhtzdXNwaWNpb3VzQWN0aXZpdHlUaHJlc2hvbGQaZmFpbGVkVHJhbnNhY3Rpb25UaHJlc2hvbGQHX3JlYXNvbgxfdHJpZ2dlcmVkQnkEdmlldzEbQQKYghIEdG2/rQSquYlgBJOopREEVYVfYwTEnHufBD1llFwEZ3GXtgSpvHWnBK3K8hAEAY8B6QQSTaJ1BNrOYVYEi5yG5gQEBnT/BJzfeXYETOJ18wS8L5TRBA2n7m42GgCOEgH1Ad8ByQGzAacBlQGDAXcBawFQATgBHAD/AOIAcQA+ABcAAiJDMRkURDEYRDYaAReICFAnBkxQsCNDMRkURDEYRIgICE8DFk8DFk8DFk8DFk8DTwNQTwJQTFAnBkxQsCNDMRkURDEYRIgHqScJIk8GVE8EFk8EFk8EFicJIk8GVE8ETwRQTwNQTwJQTFAnBkxQsCNDMRkURDEYRDYaAReIByFPBhZLBhUWVwYCTwdQSwYVFlcGAk8HUE8GFk8GFk8GFksGFRZXBgJPB1BPBicTUEsGFYEmCEkWVwYCTwJMUEsGFU8CCExPBVBPBFBPA1BMFlcGAlBPA1BPAlBMUCcGTFCwI0MxGRREMRhENhoBVwIAiAajJwkiTwJUJwZMULAjQzEZFEQxGEQ2GgFXAgCIBd8nCSJPAlQnBkxQsCNDMRkURDEYRDYaARc2GgIXNhoDFzYaBBeIBZgjQzEZFEQxGEQ2GgFXAgA2GgJXAgCIBVQjQzEZFEQxGEQ2GgEXiASRJwkiTwJUJwZMULAjQzEZFEQxGESIBD0jQzEZFEQxGESIA88jQzEZFEQxGEQ2GgFXAgCIA5EjQzEZFEQxGEQ2GgFXAgCIA1UjQzEZFEQxGESIArgjQzEZFEQxGEQ2GgEXNhoCVwIAiAJkI0MxGRREMRhENhoBFzYaAlcCAIgBzCNDMRkURDEYRDYaARc2GgJXAgCIAQMjQzEZFEQxGEQ2GgFXAgA2GgIXNhoDFzYaBBeIAI4jQzEZQP3oMRgURCNDigQBgABJi/4kC4v8JAsiiwSLAwxBAByL/YsESU4CWYsCCBZXBgKLAUxQjAEkCIwEQv/ci/0VjAAijASLBIsCDEEAHIv/iwRJTgJZiwAIFlcGAosBTFCMASQIjARC/9yL/Iv+CBZXBgKLAVCL/YsDiwBSUIv/FYv/iwJPAlJQjACJigQAIihlRBREKYv8ZyoiZygiZysiZycMImcnFIv9ZycVi/5nJxaL/2cnF4EKZycYgWRnJw2BgJTr3ANnJwiBgMivoCVnJwciZycKMgdnJwQiZycFImeJigIAMQCIBJdAAAoxACIpZUQSQQCaI0SL/kSL/iUMQQAPMgciJwxlRAkiJxRlRA9EIitlRCMISRZJJw5Qi/4WTEsBv0sBJxlQSbxIi/+/SwEnGlAxAEsBvEi/SwEnC1AyBxa/SwEnD1AiFkxLAb9LAicQUEy/TCcRUDIDSwG8SL8qi/5nKCNnK08CZycMMgdngBNFTUVSR0VOQ1lfQUNUSVZBVEVETFCL/1AxAFCwiSJC/2OKAgAxACIpZUQSRCIoZUREi/4WRwInD1BLAScQUE8CJxFQSwK9RQFESwK+TBdMRBREIitlRIv+EkQjFk8DTL8yBxZPAky/MQBLAbxIvyoiZygiZyInBGVEQQAIJwQiZycFImeAEkVNRVJHRU5DWV9SRVNPTFZFRIsAUIv/UDEAULCJigIAMQAiKWVEEkQiKGVERCIqZUSL/gxEKov+Z4v+FoATRU1FUkdFTkNZX0VTQ0FMQVRFRExQi/9QMQBQsImKAACAACIoZURAAAGJIitlRBYnC1C+TBdMRDIHTAmMACIqZUQjEkEAMCInFWVEiwAOQQAlIitlRIAbQXV0by1yZXNvbHZlZCBhZnRlciB0aW1lb3V0iP7oiSInFmVEiwAOQQAsKiVnIitlRBaAH0VNRVJHRU5DWV9NQVhfRFVSQVRJT05fRVhDRUVERURMULCJigEAMQAiKWVEEkSAGEVNRVJHRU5DWV9PUEVSQVRPUl9BRERFRIv/ULCJigEAMQAiKWVEEkSAGkVNRVJHRU5DWV9PUEVSQVRPUl9SRU1PVkVEi/9QsIkiKmVEJRJEMQCIAjlEIicEZURAAB4nBCNngBFyZWNvdmVyeVN0YXJ0VGltZTIHZycFImciJwVlRCMIJwVMZ4AWUkVDT1ZFUllfTU9ERV9BUFBST1ZBTDEAUCInBWVEFlCwiSInBGVERCInBWVEgQMPRDEAIillRBJEKiJnKCJnJwQiZycFImeAEVJFQ09WRVJZX0VYRUNVVEVEMQBQsImKAQGAADIHIicKZUQJgYCjBQpBAAknByJnJwoyB2ciJwdlRIv/CEmMACInCGVEDUEAJCSAG0RhaWx5IHZvbHVtZSBsaW1pdCBleGNlZWRlZIj8tCJMiSInDWVEi/8OQQBKi/8WgBlMQVJHRV9XSVRIRFJBV0FMX0RFVEVDVEVETFAxAFCwIihlREAAHyOAGUxhcmdlIHdpdGhkcmF3YWwgZGV0ZWN0ZWSI/FwnB4sAZyNMiYoCAIAcU1VTUElDSU9VU19BQ1RJVklUWV9SRVBPUlRFRIv+UIv/UDEAULCJigQAMQAiKWVEEkQnF4v8ZycYi/1nJw2L/mcnCIv/Z4mKAQGAACIoZURAAAMjTIkiKmVMSU4CjABEJRJBABaL/ycSEkAAB4v/KRJBAAMjTIkiQv/6iwCBAxJBAB6L/ycSEkAAD4v/KRJAAAiL/ycbEkEAAyNMiSJC//qLACQSQQAui/+ACHdpdGhkcmF3EkAAF4v/JxsSQAAPi/8nEhJAAAeL/ykSQQADI0yJIkL/+osAIxJBAA6L/4AHZGVwb3NpdBNMiSNMiYoBASIpZUSL/xKJigEHi/8WSScOUEsBJxlQSwInGlBLAycLUEsEJw9QSwUnEFBPBicRUE8GvkwXTERPBr5ETwa+RE8GvkwXTERPBr5MF0xETwa+TBdMRE8GvkSJigAFIkkoZURBABMiK2VEFicLUL5MF0xEMgdMCYwAIihlRCIqZUQiK2VEIicEZUROA4sATwRPBYmKAAQiSScIZUQiJwdlRA1BAA0iJwhlRCInB2VECYwAIicHZUQiJwhlRCInCmVETgKLAE8DTwSJigEBIoICAAIAACJJK2VEiwRBALqLA4v/DEEAsosEFicOUL1FAYsCjACLA4wBQQCNiwSI/wtPBhZLBhUWVwYCTwdQSwYVFlcGAk8HUE8GFk8GFk8GFksGFRZXBgJPB1BPBicTUEsGFYEmCEkWVwYCTwJMUEsGFU8CCExPBVBPBFBPA1BMFlcGAlBPA1BPAlBMUIACAAJMUCKAACNPA4j5HosCSSJZTFcCAEsCIllPA1cCAIj5CYsDIwiMAYwAiwCMAosBjAOLBCMJjARC/0GLAowAiQ==","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type GetCircuitBreakerStatusResult = {
  currentDailyVolume: bigint,
  maxDailyVolume: bigint,
  remainingVolume: bigint,
  lastReset: bigint
}


/**
 * Converts the ABI tuple representation of a getCircuitBreakerStatusResult to the struct representation
 */
export function GetCircuitBreakerStatusResultFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.getCircuitBreakerStatusResult, APP_SPEC.structs) as GetCircuitBreakerStatusResult
}

export type GetCurrentEmergencyStatusResult = {
  active: boolean,
  level: bigint,
  eventId: bigint,
  duration: bigint,
  recoveryMode: boolean
}


/**
 * Converts the ABI tuple representation of a getCurrentEmergencyStatusResult to the struct representation
 */
export function GetCurrentEmergencyStatusResultFromTuple(abiTuple: [boolean, bigint, bigint, bigint, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.getCurrentEmergencyStatusResult, APP_SPEC.structs) as GetCurrentEmergencyStatusResult
}

export type GetEmergencyEventResult = {
  level: bigint,
  reason: Uint8Array,
  triggeredBy: Uint8Array,
  timestamp: bigint,
  resolved: bigint,
  resolvedAt: bigint,
  resolvedBy: Uint8Array
}


/**
 * Converts the ABI tuple representation of a getEmergencyEventResult to the struct representation
 */
export function GetEmergencyEventResultFromTuple(abiTuple: [bigint, Uint8Array, Uint8Array, bigint, bigint, bigint, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.getEmergencyEventResult, APP_SPEC.structs) as GetEmergencyEventResult
}

/**
 * The argument types for the EmergencyPause contract
 */
export type EmergencyPauseArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initialize(byte[],uint64,uint64,uint64)void': {
      admin: Uint8Array
      cooldownPeriod: bigint | number
      autoResolveTime: bigint | number
      maxEmergencyDuration: bigint | number
    }
    'triggerEmergency(uint64,string)void': {
      level: bigint | number
      reason: string
    }
    'resolveEmergency(uint64,string)void': {
      eventId: bigint | number
      resolution: string
    }
    'escalateEmergency(uint64,string)void': {
      newLevel: bigint | number
      reason: string
    }
    'autoResolveCheck()void': Record<string, never>
    'addEmergencyOperator(byte[])void': {
      operator: Uint8Array
    }
    'removeEmergencyOperator(byte[])void': {
      operator: Uint8Array
    }
    'activateRecoveryMode()void': Record<string, never>
    'executeRecovery()void': Record<string, never>
    'checkCircuitBreaker(uint64)bool': {
      transactionAmount: bigint | number
    }
    'reportSuspiciousActivity(string,string)void': {
      activityType: string
      details: string
    }
    'updateEmergencyThresholds(uint64,uint64,uint64,uint64)void': {
      suspiciousThreshold: bigint | number
      failedTxThreshold: bigint | number
      largeWithdrawalThreshold: bigint | number
      maxDailyVolume: bigint | number
    }
    'isOperationAllowed(string)bool': {
      operationType: string
    }
    'isAuthorizedOperator(byte[])bool': {
      operator: Uint8Array
    }
    'getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])': {
      eventId: bigint | number
    }
    'getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)': Record<string, never>
    'getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)': Record<string, never>
    'getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]': {
      limit: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initialize(byte[],uint64,uint64,uint64)void': [admin: Uint8Array, cooldownPeriod: bigint | number, autoResolveTime: bigint | number, maxEmergencyDuration: bigint | number]
    'triggerEmergency(uint64,string)void': [level: bigint | number, reason: string]
    'resolveEmergency(uint64,string)void': [eventId: bigint | number, resolution: string]
    'escalateEmergency(uint64,string)void': [newLevel: bigint | number, reason: string]
    'autoResolveCheck()void': []
    'addEmergencyOperator(byte[])void': [operator: Uint8Array]
    'removeEmergencyOperator(byte[])void': [operator: Uint8Array]
    'activateRecoveryMode()void': []
    'executeRecovery()void': []
    'checkCircuitBreaker(uint64)bool': [transactionAmount: bigint | number]
    'reportSuspiciousActivity(string,string)void': [activityType: string, details: string]
    'updateEmergencyThresholds(uint64,uint64,uint64,uint64)void': [suspiciousThreshold: bigint | number, failedTxThreshold: bigint | number, largeWithdrawalThreshold: bigint | number, maxDailyVolume: bigint | number]
    'isOperationAllowed(string)bool': [operationType: string]
    'isAuthorizedOperator(byte[])bool': [operator: Uint8Array]
    'getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])': [eventId: bigint | number]
    'getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)': []
    'getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)': []
    'getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]': [limit: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type EmergencyPauseReturns = {
  'initialize(byte[],uint64,uint64,uint64)void': void
  'triggerEmergency(uint64,string)void': void
  'resolveEmergency(uint64,string)void': void
  'escalateEmergency(uint64,string)void': void
  'autoResolveCheck()void': void
  'addEmergencyOperator(byte[])void': void
  'removeEmergencyOperator(byte[])void': void
  'activateRecoveryMode()void': void
  'executeRecovery()void': void
  'checkCircuitBreaker(uint64)bool': boolean
  'reportSuspiciousActivity(string,string)void': void
  'updateEmergencyThresholds(uint64,uint64,uint64,uint64)void': void
  'isOperationAllowed(string)bool': boolean
  'isAuthorizedOperator(byte[])bool': boolean
  'getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])': GetEmergencyEventResult
  'getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)': GetCurrentEmergencyStatusResult
  'getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)': GetCircuitBreakerStatusResult
  'getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]': [bigint, Uint8Array, Uint8Array, bigint, bigint, bigint, Uint8Array][]
}

/**
 * Defines the types of available calls and state of the EmergencyPause smart contract.
 */
export type EmergencyPauseTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize(byte[],uint64,uint64,uint64)void' | 'initialize', {
      argsObj: EmergencyPauseArgs['obj']['initialize(byte[],uint64,uint64,uint64)void']
      argsTuple: EmergencyPauseArgs['tuple']['initialize(byte[],uint64,uint64,uint64)void']
      returns: EmergencyPauseReturns['initialize(byte[],uint64,uint64,uint64)void']
    }>
    & Record<'triggerEmergency(uint64,string)void' | 'triggerEmergency', {
      argsObj: EmergencyPauseArgs['obj']['triggerEmergency(uint64,string)void']
      argsTuple: EmergencyPauseArgs['tuple']['triggerEmergency(uint64,string)void']
      returns: EmergencyPauseReturns['triggerEmergency(uint64,string)void']
    }>
    & Record<'resolveEmergency(uint64,string)void' | 'resolveEmergency', {
      argsObj: EmergencyPauseArgs['obj']['resolveEmergency(uint64,string)void']
      argsTuple: EmergencyPauseArgs['tuple']['resolveEmergency(uint64,string)void']
      returns: EmergencyPauseReturns['resolveEmergency(uint64,string)void']
    }>
    & Record<'escalateEmergency(uint64,string)void' | 'escalateEmergency', {
      argsObj: EmergencyPauseArgs['obj']['escalateEmergency(uint64,string)void']
      argsTuple: EmergencyPauseArgs['tuple']['escalateEmergency(uint64,string)void']
      returns: EmergencyPauseReturns['escalateEmergency(uint64,string)void']
    }>
    & Record<'autoResolveCheck()void' | 'autoResolveCheck', {
      argsObj: EmergencyPauseArgs['obj']['autoResolveCheck()void']
      argsTuple: EmergencyPauseArgs['tuple']['autoResolveCheck()void']
      returns: EmergencyPauseReturns['autoResolveCheck()void']
    }>
    & Record<'addEmergencyOperator(byte[])void' | 'addEmergencyOperator', {
      argsObj: EmergencyPauseArgs['obj']['addEmergencyOperator(byte[])void']
      argsTuple: EmergencyPauseArgs['tuple']['addEmergencyOperator(byte[])void']
      returns: EmergencyPauseReturns['addEmergencyOperator(byte[])void']
    }>
    & Record<'removeEmergencyOperator(byte[])void' | 'removeEmergencyOperator', {
      argsObj: EmergencyPauseArgs['obj']['removeEmergencyOperator(byte[])void']
      argsTuple: EmergencyPauseArgs['tuple']['removeEmergencyOperator(byte[])void']
      returns: EmergencyPauseReturns['removeEmergencyOperator(byte[])void']
    }>
    & Record<'activateRecoveryMode()void' | 'activateRecoveryMode', {
      argsObj: EmergencyPauseArgs['obj']['activateRecoveryMode()void']
      argsTuple: EmergencyPauseArgs['tuple']['activateRecoveryMode()void']
      returns: EmergencyPauseReturns['activateRecoveryMode()void']
    }>
    & Record<'executeRecovery()void' | 'executeRecovery', {
      argsObj: EmergencyPauseArgs['obj']['executeRecovery()void']
      argsTuple: EmergencyPauseArgs['tuple']['executeRecovery()void']
      returns: EmergencyPauseReturns['executeRecovery()void']
    }>
    & Record<'checkCircuitBreaker(uint64)bool' | 'checkCircuitBreaker', {
      argsObj: EmergencyPauseArgs['obj']['checkCircuitBreaker(uint64)bool']
      argsTuple: EmergencyPauseArgs['tuple']['checkCircuitBreaker(uint64)bool']
      returns: EmergencyPauseReturns['checkCircuitBreaker(uint64)bool']
    }>
    & Record<'reportSuspiciousActivity(string,string)void' | 'reportSuspiciousActivity', {
      argsObj: EmergencyPauseArgs['obj']['reportSuspiciousActivity(string,string)void']
      argsTuple: EmergencyPauseArgs['tuple']['reportSuspiciousActivity(string,string)void']
      returns: EmergencyPauseReturns['reportSuspiciousActivity(string,string)void']
    }>
    & Record<'updateEmergencyThresholds(uint64,uint64,uint64,uint64)void' | 'updateEmergencyThresholds', {
      argsObj: EmergencyPauseArgs['obj']['updateEmergencyThresholds(uint64,uint64,uint64,uint64)void']
      argsTuple: EmergencyPauseArgs['tuple']['updateEmergencyThresholds(uint64,uint64,uint64,uint64)void']
      returns: EmergencyPauseReturns['updateEmergencyThresholds(uint64,uint64,uint64,uint64)void']
    }>
    & Record<'isOperationAllowed(string)bool' | 'isOperationAllowed', {
      argsObj: EmergencyPauseArgs['obj']['isOperationAllowed(string)bool']
      argsTuple: EmergencyPauseArgs['tuple']['isOperationAllowed(string)bool']
      returns: EmergencyPauseReturns['isOperationAllowed(string)bool']
    }>
    & Record<'isAuthorizedOperator(byte[])bool' | 'isAuthorizedOperator', {
      argsObj: EmergencyPauseArgs['obj']['isAuthorizedOperator(byte[])bool']
      argsTuple: EmergencyPauseArgs['tuple']['isAuthorizedOperator(byte[])bool']
      returns: EmergencyPauseReturns['isAuthorizedOperator(byte[])bool']
    }>
    & Record<'getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])' | 'getEmergencyEvent', {
      argsObj: EmergencyPauseArgs['obj']['getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])']
      argsTuple: EmergencyPauseArgs['tuple']['getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])']
      returns: EmergencyPauseReturns['getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])']
    }>
    & Record<'getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)' | 'getCurrentEmergencyStatus', {
      argsObj: EmergencyPauseArgs['obj']['getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)']
      argsTuple: EmergencyPauseArgs['tuple']['getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)']
      returns: EmergencyPauseReturns['getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)']
    }>
    & Record<'getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)' | 'getCircuitBreakerStatus', {
      argsObj: EmergencyPauseArgs['obj']['getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)']
      argsTuple: EmergencyPauseArgs['tuple']['getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)']
      returns: EmergencyPauseReturns['getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)']
    }>
    & Record<'getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]' | 'getEmergencyHistory', {
      argsObj: EmergencyPauseArgs['obj']['getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]']
      argsTuple: EmergencyPauseArgs['tuple']['getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]']
      returns: EmergencyPauseReturns['getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        currentEmergencyLevel: bigint
        emergencyActive: bigint
        emergencyCount: bigint
        lastEmergencyTime: bigint
        admin: BinaryState
        emergencyOperators: BinaryState
        cooldownPeriod: bigint
        autoResolveTime: bigint
        maxEmergencyDuration: bigint
        suspiciousActivityThreshold: bigint
        failedTransactionThreshold: bigint
        largeWithdrawalThreshold: bigint
        maxDailyVolume: bigint
        currentDailyVolume: bigint
        lastVolumeReset: bigint
        recoveryMode: bigint
        recoveryStartTime: bigint
        recoveryApprovals: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type EmergencyPauseSignatures = keyof EmergencyPauseTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type EmergencyPauseNonVoidMethodSignatures = keyof EmergencyPauseTypes['methods'] extends infer T ? T extends keyof EmergencyPauseTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the EmergencyPause smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends EmergencyPauseSignatures> = EmergencyPauseTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the EmergencyPause smart contract to the method's return type
 */
export type MethodReturn<TSignature extends EmergencyPauseSignatures> = EmergencyPauseTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = EmergencyPauseTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type EmergencyPauseCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type EmergencyPauseDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: EmergencyPauseCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the EmergencyPause smart contract
 */
export abstract class EmergencyPauseParamsFactory {
  /**
   * Constructs a no op call for the initialize(byte[],uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<EmergencyPauseArgs['obj']['initialize(byte[],uint64,uint64,uint64)void'] | EmergencyPauseArgs['tuple']['initialize(byte[],uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize(byte[],uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.admin, params.args.cooldownPeriod, params.args.autoResolveTime, params.args.maxEmergencyDuration],
    }
  }
  /**
   * Constructs a no op call for the triggerEmergency(uint64,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static triggerEmergency(params: CallParams<EmergencyPauseArgs['obj']['triggerEmergency(uint64,string)void'] | EmergencyPauseArgs['tuple']['triggerEmergency(uint64,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'triggerEmergency(uint64,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.level, params.args.reason],
    }
  }
  /**
   * Constructs a no op call for the resolveEmergency(uint64,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resolveEmergency(params: CallParams<EmergencyPauseArgs['obj']['resolveEmergency(uint64,string)void'] | EmergencyPauseArgs['tuple']['resolveEmergency(uint64,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'resolveEmergency(uint64,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.eventId, params.args.resolution],
    }
  }
  /**
   * Constructs a no op call for the escalateEmergency(uint64,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static escalateEmergency(params: CallParams<EmergencyPauseArgs['obj']['escalateEmergency(uint64,string)void'] | EmergencyPauseArgs['tuple']['escalateEmergency(uint64,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'escalateEmergency(uint64,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newLevel, params.args.reason],
    }
  }
  /**
   * Constructs a no op call for the autoResolveCheck()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static autoResolveCheck(params: CallParams<EmergencyPauseArgs['obj']['autoResolveCheck()void'] | EmergencyPauseArgs['tuple']['autoResolveCheck()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'autoResolveCheck()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the addEmergencyOperator(byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addEmergencyOperator(params: CallParams<EmergencyPauseArgs['obj']['addEmergencyOperator(byte[])void'] | EmergencyPauseArgs['tuple']['addEmergencyOperator(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addEmergencyOperator(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.operator],
    }
  }
  /**
   * Constructs a no op call for the removeEmergencyOperator(byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeEmergencyOperator(params: CallParams<EmergencyPauseArgs['obj']['removeEmergencyOperator(byte[])void'] | EmergencyPauseArgs['tuple']['removeEmergencyOperator(byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeEmergencyOperator(byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.operator],
    }
  }
  /**
   * Constructs a no op call for the activateRecoveryMode()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static activateRecoveryMode(params: CallParams<EmergencyPauseArgs['obj']['activateRecoveryMode()void'] | EmergencyPauseArgs['tuple']['activateRecoveryMode()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'activateRecoveryMode()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the executeRecovery()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static executeRecovery(params: CallParams<EmergencyPauseArgs['obj']['executeRecovery()void'] | EmergencyPauseArgs['tuple']['executeRecovery()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'executeRecovery()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the checkCircuitBreaker(uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static checkCircuitBreaker(params: CallParams<EmergencyPauseArgs['obj']['checkCircuitBreaker(uint64)bool'] | EmergencyPauseArgs['tuple']['checkCircuitBreaker(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'checkCircuitBreaker(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.transactionAmount],
    }
  }
  /**
   * Constructs a no op call for the reportSuspiciousActivity(string,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static reportSuspiciousActivity(params: CallParams<EmergencyPauseArgs['obj']['reportSuspiciousActivity(string,string)void'] | EmergencyPauseArgs['tuple']['reportSuspiciousActivity(string,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reportSuspiciousActivity(string,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.activityType, params.args.details],
    }
  }
  /**
   * Constructs a no op call for the updateEmergencyThresholds(uint64,uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateEmergencyThresholds(params: CallParams<EmergencyPauseArgs['obj']['updateEmergencyThresholds(uint64,uint64,uint64,uint64)void'] | EmergencyPauseArgs['tuple']['updateEmergencyThresholds(uint64,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateEmergencyThresholds(uint64,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.suspiciousThreshold, params.args.failedTxThreshold, params.args.largeWithdrawalThreshold, params.args.maxDailyVolume],
    }
  }
  /**
   * Constructs a no op call for the isOperationAllowed(string)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isOperationAllowed(params: CallParams<EmergencyPauseArgs['obj']['isOperationAllowed(string)bool'] | EmergencyPauseArgs['tuple']['isOperationAllowed(string)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'isOperationAllowed(string)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.operationType],
    }
  }
  /**
   * Constructs a no op call for the isAuthorizedOperator(byte[])bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isAuthorizedOperator(params: CallParams<EmergencyPauseArgs['obj']['isAuthorizedOperator(byte[])bool'] | EmergencyPauseArgs['tuple']['isAuthorizedOperator(byte[])bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'isAuthorizedOperator(byte[])bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.operator],
    }
  }
  /**
   * Constructs a no op call for the getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getEmergencyEvent(params: CallParams<EmergencyPauseArgs['obj']['getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])'] | EmergencyPauseArgs['tuple']['getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.eventId],
    }
  }
  /**
   * Constructs a no op call for the getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCurrentEmergencyStatus(params: CallParams<EmergencyPauseArgs['obj']['getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)'] | EmergencyPauseArgs['tuple']['getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getCircuitBreakerStatus()(uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCircuitBreakerStatus(params: CallParams<EmergencyPauseArgs['obj']['getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)'] | EmergencyPauseArgs['tuple']['getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getEmergencyHistory(params: CallParams<EmergencyPauseArgs['obj']['getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]'] | EmergencyPauseArgs['tuple']['getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.limit],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the EmergencyPause smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class EmergencyPauseFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `EmergencyPauseFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new EmergencyPauseClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new EmergencyPauseClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the EmergencyPause smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: EmergencyPauseDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new EmergencyPauseClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the EmergencyPause smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the EmergencyPause smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the EmergencyPause smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new EmergencyPauseClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the EmergencyPause smart contract
 */
export class EmergencyPauseClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `EmergencyPauseClient`
   *
   * @param appClient An `AppClient` instance which has been created with the EmergencyPause app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `EmergencyPauseClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends EmergencyPauseNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `EmergencyPauseClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<EmergencyPauseClient> {
    return new EmergencyPauseClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `EmergencyPauseClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<EmergencyPauseClient> {
    return new EmergencyPauseClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the EmergencyPause smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `initialize(byte[],uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<EmergencyPauseArgs['obj']['initialize(byte[],uint64,uint64,uint64)void'] | EmergencyPauseArgs['tuple']['initialize(byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EmergencyPauseParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `triggerEmergency(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    triggerEmergency: (params: CallParams<EmergencyPauseArgs['obj']['triggerEmergency(uint64,string)void'] | EmergencyPauseArgs['tuple']['triggerEmergency(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EmergencyPauseParamsFactory.triggerEmergency(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `resolveEmergency(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resolveEmergency: (params: CallParams<EmergencyPauseArgs['obj']['resolveEmergency(uint64,string)void'] | EmergencyPauseArgs['tuple']['resolveEmergency(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EmergencyPauseParamsFactory.resolveEmergency(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `escalateEmergency(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    escalateEmergency: (params: CallParams<EmergencyPauseArgs['obj']['escalateEmergency(uint64,string)void'] | EmergencyPauseArgs['tuple']['escalateEmergency(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EmergencyPauseParamsFactory.escalateEmergency(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `autoResolveCheck()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    autoResolveCheck: (params: CallParams<EmergencyPauseArgs['obj']['autoResolveCheck()void'] | EmergencyPauseArgs['tuple']['autoResolveCheck()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(EmergencyPauseParamsFactory.autoResolveCheck(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `addEmergencyOperator(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addEmergencyOperator: (params: CallParams<EmergencyPauseArgs['obj']['addEmergencyOperator(byte[])void'] | EmergencyPauseArgs['tuple']['addEmergencyOperator(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EmergencyPauseParamsFactory.addEmergencyOperator(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `removeEmergencyOperator(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeEmergencyOperator: (params: CallParams<EmergencyPauseArgs['obj']['removeEmergencyOperator(byte[])void'] | EmergencyPauseArgs['tuple']['removeEmergencyOperator(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EmergencyPauseParamsFactory.removeEmergencyOperator(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `activateRecoveryMode()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    activateRecoveryMode: (params: CallParams<EmergencyPauseArgs['obj']['activateRecoveryMode()void'] | EmergencyPauseArgs['tuple']['activateRecoveryMode()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(EmergencyPauseParamsFactory.activateRecoveryMode(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `executeRecovery()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    executeRecovery: (params: CallParams<EmergencyPauseArgs['obj']['executeRecovery()void'] | EmergencyPauseArgs['tuple']['executeRecovery()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(EmergencyPauseParamsFactory.executeRecovery(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `checkCircuitBreaker(uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    checkCircuitBreaker: (params: CallParams<EmergencyPauseArgs['obj']['checkCircuitBreaker(uint64)bool'] | EmergencyPauseArgs['tuple']['checkCircuitBreaker(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EmergencyPauseParamsFactory.checkCircuitBreaker(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `reportSuspiciousActivity(string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    reportSuspiciousActivity: (params: CallParams<EmergencyPauseArgs['obj']['reportSuspiciousActivity(string,string)void'] | EmergencyPauseArgs['tuple']['reportSuspiciousActivity(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EmergencyPauseParamsFactory.reportSuspiciousActivity(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `updateEmergencyThresholds(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateEmergencyThresholds: (params: CallParams<EmergencyPauseArgs['obj']['updateEmergencyThresholds(uint64,uint64,uint64,uint64)void'] | EmergencyPauseArgs['tuple']['updateEmergencyThresholds(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EmergencyPauseParamsFactory.updateEmergencyThresholds(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `isOperationAllowed(string)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isOperationAllowed: (params: CallParams<EmergencyPauseArgs['obj']['isOperationAllowed(string)bool'] | EmergencyPauseArgs['tuple']['isOperationAllowed(string)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EmergencyPauseParamsFactory.isOperationAllowed(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `isAuthorizedOperator(byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isAuthorizedOperator: (params: CallParams<EmergencyPauseArgs['obj']['isAuthorizedOperator(byte[])bool'] | EmergencyPauseArgs['tuple']['isAuthorizedOperator(byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EmergencyPauseParamsFactory.isAuthorizedOperator(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getEmergencyEvent: (params: CallParams<EmergencyPauseArgs['obj']['getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])'] | EmergencyPauseArgs['tuple']['getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EmergencyPauseParamsFactory.getEmergencyEvent(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCurrentEmergencyStatus: (params: CallParams<EmergencyPauseArgs['obj']['getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)'] | EmergencyPauseArgs['tuple']['getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(EmergencyPauseParamsFactory.getCurrentEmergencyStatus(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCircuitBreakerStatus: (params: CallParams<EmergencyPauseArgs['obj']['getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)'] | EmergencyPauseArgs['tuple']['getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(EmergencyPauseParamsFactory.getCircuitBreakerStatus(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getEmergencyHistory: (params: CallParams<EmergencyPauseArgs['obj']['getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]'] | EmergencyPauseArgs['tuple']['getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EmergencyPauseParamsFactory.getEmergencyHistory(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the EmergencyPause smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `initialize(byte[],uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<EmergencyPauseArgs['obj']['initialize(byte[],uint64,uint64,uint64)void'] | EmergencyPauseArgs['tuple']['initialize(byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EmergencyPauseParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `triggerEmergency(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    triggerEmergency: (params: CallParams<EmergencyPauseArgs['obj']['triggerEmergency(uint64,string)void'] | EmergencyPauseArgs['tuple']['triggerEmergency(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EmergencyPauseParamsFactory.triggerEmergency(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `resolveEmergency(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resolveEmergency: (params: CallParams<EmergencyPauseArgs['obj']['resolveEmergency(uint64,string)void'] | EmergencyPauseArgs['tuple']['resolveEmergency(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EmergencyPauseParamsFactory.resolveEmergency(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `escalateEmergency(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    escalateEmergency: (params: CallParams<EmergencyPauseArgs['obj']['escalateEmergency(uint64,string)void'] | EmergencyPauseArgs['tuple']['escalateEmergency(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EmergencyPauseParamsFactory.escalateEmergency(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `autoResolveCheck()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    autoResolveCheck: (params: CallParams<EmergencyPauseArgs['obj']['autoResolveCheck()void'] | EmergencyPauseArgs['tuple']['autoResolveCheck()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(EmergencyPauseParamsFactory.autoResolveCheck(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `addEmergencyOperator(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addEmergencyOperator: (params: CallParams<EmergencyPauseArgs['obj']['addEmergencyOperator(byte[])void'] | EmergencyPauseArgs['tuple']['addEmergencyOperator(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EmergencyPauseParamsFactory.addEmergencyOperator(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `removeEmergencyOperator(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeEmergencyOperator: (params: CallParams<EmergencyPauseArgs['obj']['removeEmergencyOperator(byte[])void'] | EmergencyPauseArgs['tuple']['removeEmergencyOperator(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EmergencyPauseParamsFactory.removeEmergencyOperator(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `activateRecoveryMode()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    activateRecoveryMode: (params: CallParams<EmergencyPauseArgs['obj']['activateRecoveryMode()void'] | EmergencyPauseArgs['tuple']['activateRecoveryMode()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(EmergencyPauseParamsFactory.activateRecoveryMode(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `executeRecovery()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    executeRecovery: (params: CallParams<EmergencyPauseArgs['obj']['executeRecovery()void'] | EmergencyPauseArgs['tuple']['executeRecovery()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(EmergencyPauseParamsFactory.executeRecovery(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `checkCircuitBreaker(uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    checkCircuitBreaker: (params: CallParams<EmergencyPauseArgs['obj']['checkCircuitBreaker(uint64)bool'] | EmergencyPauseArgs['tuple']['checkCircuitBreaker(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EmergencyPauseParamsFactory.checkCircuitBreaker(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `reportSuspiciousActivity(string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    reportSuspiciousActivity: (params: CallParams<EmergencyPauseArgs['obj']['reportSuspiciousActivity(string,string)void'] | EmergencyPauseArgs['tuple']['reportSuspiciousActivity(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EmergencyPauseParamsFactory.reportSuspiciousActivity(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `updateEmergencyThresholds(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateEmergencyThresholds: (params: CallParams<EmergencyPauseArgs['obj']['updateEmergencyThresholds(uint64,uint64,uint64,uint64)void'] | EmergencyPauseArgs['tuple']['updateEmergencyThresholds(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EmergencyPauseParamsFactory.updateEmergencyThresholds(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `isOperationAllowed(string)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isOperationAllowed: (params: CallParams<EmergencyPauseArgs['obj']['isOperationAllowed(string)bool'] | EmergencyPauseArgs['tuple']['isOperationAllowed(string)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EmergencyPauseParamsFactory.isOperationAllowed(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `isAuthorizedOperator(byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isAuthorizedOperator: (params: CallParams<EmergencyPauseArgs['obj']['isAuthorizedOperator(byte[])bool'] | EmergencyPauseArgs['tuple']['isAuthorizedOperator(byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EmergencyPauseParamsFactory.isAuthorizedOperator(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getEmergencyEvent: (params: CallParams<EmergencyPauseArgs['obj']['getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])'] | EmergencyPauseArgs['tuple']['getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EmergencyPauseParamsFactory.getEmergencyEvent(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCurrentEmergencyStatus: (params: CallParams<EmergencyPauseArgs['obj']['getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)'] | EmergencyPauseArgs['tuple']['getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(EmergencyPauseParamsFactory.getCurrentEmergencyStatus(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCircuitBreakerStatus: (params: CallParams<EmergencyPauseArgs['obj']['getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)'] | EmergencyPauseArgs['tuple']['getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(EmergencyPauseParamsFactory.getCircuitBreakerStatus(params))
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getEmergencyHistory: (params: CallParams<EmergencyPauseArgs['obj']['getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]'] | EmergencyPauseArgs['tuple']['getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EmergencyPauseParamsFactory.getEmergencyHistory(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the EmergencyPause smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `initialize(byte[],uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<EmergencyPauseArgs['obj']['initialize(byte[],uint64,uint64,uint64)void'] | EmergencyPauseArgs['tuple']['initialize(byte[],uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EmergencyPauseParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | EmergencyPauseReturns['initialize(byte[],uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `triggerEmergency(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    triggerEmergency: async (params: CallParams<EmergencyPauseArgs['obj']['triggerEmergency(uint64,string)void'] | EmergencyPauseArgs['tuple']['triggerEmergency(uint64,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EmergencyPauseParamsFactory.triggerEmergency(params))
      return {...result, return: result.return as unknown as (undefined | EmergencyPauseReturns['triggerEmergency(uint64,string)void'])}
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `resolveEmergency(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resolveEmergency: async (params: CallParams<EmergencyPauseArgs['obj']['resolveEmergency(uint64,string)void'] | EmergencyPauseArgs['tuple']['resolveEmergency(uint64,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EmergencyPauseParamsFactory.resolveEmergency(params))
      return {...result, return: result.return as unknown as (undefined | EmergencyPauseReturns['resolveEmergency(uint64,string)void'])}
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `escalateEmergency(uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    escalateEmergency: async (params: CallParams<EmergencyPauseArgs['obj']['escalateEmergency(uint64,string)void'] | EmergencyPauseArgs['tuple']['escalateEmergency(uint64,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EmergencyPauseParamsFactory.escalateEmergency(params))
      return {...result, return: result.return as unknown as (undefined | EmergencyPauseReturns['escalateEmergency(uint64,string)void'])}
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `autoResolveCheck()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    autoResolveCheck: async (params: CallParams<EmergencyPauseArgs['obj']['autoResolveCheck()void'] | EmergencyPauseArgs['tuple']['autoResolveCheck()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(EmergencyPauseParamsFactory.autoResolveCheck(params))
      return {...result, return: result.return as unknown as (undefined | EmergencyPauseReturns['autoResolveCheck()void'])}
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `addEmergencyOperator(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addEmergencyOperator: async (params: CallParams<EmergencyPauseArgs['obj']['addEmergencyOperator(byte[])void'] | EmergencyPauseArgs['tuple']['addEmergencyOperator(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EmergencyPauseParamsFactory.addEmergencyOperator(params))
      return {...result, return: result.return as unknown as (undefined | EmergencyPauseReturns['addEmergencyOperator(byte[])void'])}
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `removeEmergencyOperator(byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeEmergencyOperator: async (params: CallParams<EmergencyPauseArgs['obj']['removeEmergencyOperator(byte[])void'] | EmergencyPauseArgs['tuple']['removeEmergencyOperator(byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EmergencyPauseParamsFactory.removeEmergencyOperator(params))
      return {...result, return: result.return as unknown as (undefined | EmergencyPauseReturns['removeEmergencyOperator(byte[])void'])}
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `activateRecoveryMode()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    activateRecoveryMode: async (params: CallParams<EmergencyPauseArgs['obj']['activateRecoveryMode()void'] | EmergencyPauseArgs['tuple']['activateRecoveryMode()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(EmergencyPauseParamsFactory.activateRecoveryMode(params))
      return {...result, return: result.return as unknown as (undefined | EmergencyPauseReturns['activateRecoveryMode()void'])}
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `executeRecovery()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    executeRecovery: async (params: CallParams<EmergencyPauseArgs['obj']['executeRecovery()void'] | EmergencyPauseArgs['tuple']['executeRecovery()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(EmergencyPauseParamsFactory.executeRecovery(params))
      return {...result, return: result.return as unknown as (undefined | EmergencyPauseReturns['executeRecovery()void'])}
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `checkCircuitBreaker(uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    checkCircuitBreaker: async (params: CallParams<EmergencyPauseArgs['obj']['checkCircuitBreaker(uint64)bool'] | EmergencyPauseArgs['tuple']['checkCircuitBreaker(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EmergencyPauseParamsFactory.checkCircuitBreaker(params))
      return {...result, return: result.return as unknown as (undefined | EmergencyPauseReturns['checkCircuitBreaker(uint64)bool'])}
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `reportSuspiciousActivity(string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    reportSuspiciousActivity: async (params: CallParams<EmergencyPauseArgs['obj']['reportSuspiciousActivity(string,string)void'] | EmergencyPauseArgs['tuple']['reportSuspiciousActivity(string,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EmergencyPauseParamsFactory.reportSuspiciousActivity(params))
      return {...result, return: result.return as unknown as (undefined | EmergencyPauseReturns['reportSuspiciousActivity(string,string)void'])}
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `updateEmergencyThresholds(uint64,uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateEmergencyThresholds: async (params: CallParams<EmergencyPauseArgs['obj']['updateEmergencyThresholds(uint64,uint64,uint64,uint64)void'] | EmergencyPauseArgs['tuple']['updateEmergencyThresholds(uint64,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EmergencyPauseParamsFactory.updateEmergencyThresholds(params))
      return {...result, return: result.return as unknown as (undefined | EmergencyPauseReturns['updateEmergencyThresholds(uint64,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `isOperationAllowed(string)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isOperationAllowed: async (params: CallParams<EmergencyPauseArgs['obj']['isOperationAllowed(string)bool'] | EmergencyPauseArgs['tuple']['isOperationAllowed(string)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EmergencyPauseParamsFactory.isOperationAllowed(params))
      return {...result, return: result.return as unknown as (undefined | EmergencyPauseReturns['isOperationAllowed(string)bool'])}
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `isAuthorizedOperator(byte[])bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isAuthorizedOperator: async (params: CallParams<EmergencyPauseArgs['obj']['isAuthorizedOperator(byte[])bool'] | EmergencyPauseArgs['tuple']['isAuthorizedOperator(byte[])bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EmergencyPauseParamsFactory.isAuthorizedOperator(params))
      return {...result, return: result.return as unknown as (undefined | EmergencyPauseReturns['isAuthorizedOperator(byte[])bool'])}
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getEmergencyEvent: async (params: CallParams<EmergencyPauseArgs['obj']['getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])'] | EmergencyPauseArgs['tuple']['getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EmergencyPauseParamsFactory.getEmergencyEvent(params))
      return {...result, return: result.return as unknown as (undefined | EmergencyPauseReturns['getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])'])}
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCurrentEmergencyStatus: async (params: CallParams<EmergencyPauseArgs['obj']['getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)'] | EmergencyPauseArgs['tuple']['getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(EmergencyPauseParamsFactory.getCurrentEmergencyStatus(params))
      return {...result, return: result.return as unknown as (undefined | EmergencyPauseReturns['getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)'])}
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCircuitBreakerStatus: async (params: CallParams<EmergencyPauseArgs['obj']['getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)'] | EmergencyPauseArgs['tuple']['getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(EmergencyPauseParamsFactory.getCircuitBreakerStatus(params))
      return {...result, return: result.return as unknown as (undefined | EmergencyPauseReturns['getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the EmergencyPause smart contract using the `getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getEmergencyHistory: async (params: CallParams<EmergencyPauseArgs['obj']['getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]'] | EmergencyPauseArgs['tuple']['getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EmergencyPauseParamsFactory.getEmergencyHistory(params))
      return {...result, return: result.return as unknown as (undefined | EmergencyPauseReturns['getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new EmergencyPauseClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current EmergencyPause app
   */
  state = {
    /**
     * Methods to access global state for the current EmergencyPause app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          currentEmergencyLevel: result.currentEmergencyLevel,
          emergencyActive: result.emergencyActive,
          emergencyCount: result.emergencyCount,
          lastEmergencyTime: result.lastEmergencyTime,
          admin: new BinaryStateValue(result.admin),
          emergencyOperators: new BinaryStateValue(result.emergencyOperators),
          cooldownPeriod: result.cooldownPeriod,
          autoResolveTime: result.autoResolveTime,
          maxEmergencyDuration: result.maxEmergencyDuration,
          suspiciousActivityThreshold: result.suspiciousActivityThreshold,
          failedTransactionThreshold: result.failedTransactionThreshold,
          largeWithdrawalThreshold: result.largeWithdrawalThreshold,
          maxDailyVolume: result.maxDailyVolume,
          currentDailyVolume: result.currentDailyVolume,
          lastVolumeReset: result.lastVolumeReset,
          recoveryMode: result.recoveryMode,
          recoveryStartTime: result.recoveryStartTime,
          recoveryApprovals: result.recoveryApprovals,
        }
      },
      /**
       * Get the current value of the currentEmergencyLevel key in global state
       */
      currentEmergencyLevel: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("currentEmergencyLevel")) as bigint | undefined },
      /**
       * Get the current value of the emergencyActive key in global state
       */
      emergencyActive: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("emergencyActive")) as bigint | undefined },
      /**
       * Get the current value of the emergencyCount key in global state
       */
      emergencyCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("emergencyCount")) as bigint | undefined },
      /**
       * Get the current value of the lastEmergencyTime key in global state
       */
      lastEmergencyTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastEmergencyTime")) as bigint | undefined },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin")) as Uint8Array | undefined) },
      /**
       * Get the current value of the emergencyOperators key in global state
       */
      emergencyOperators: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("emergencyOperators")) as Uint8Array | undefined) },
      /**
       * Get the current value of the cooldownPeriod key in global state
       */
      cooldownPeriod: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("cooldownPeriod")) as bigint | undefined },
      /**
       * Get the current value of the autoResolveTime key in global state
       */
      autoResolveTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("autoResolveTime")) as bigint | undefined },
      /**
       * Get the current value of the maxEmergencyDuration key in global state
       */
      maxEmergencyDuration: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxEmergencyDuration")) as bigint | undefined },
      /**
       * Get the current value of the suspiciousActivityThreshold key in global state
       */
      suspiciousActivityThreshold: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("suspiciousActivityThreshold")) as bigint | undefined },
      /**
       * Get the current value of the failedTransactionThreshold key in global state
       */
      failedTransactionThreshold: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("failedTransactionThreshold")) as bigint | undefined },
      /**
       * Get the current value of the largeWithdrawalThreshold key in global state
       */
      largeWithdrawalThreshold: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("largeWithdrawalThreshold")) as bigint | undefined },
      /**
       * Get the current value of the maxDailyVolume key in global state
       */
      maxDailyVolume: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxDailyVolume")) as bigint | undefined },
      /**
       * Get the current value of the currentDailyVolume key in global state
       */
      currentDailyVolume: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("currentDailyVolume")) as bigint | undefined },
      /**
       * Get the current value of the lastVolumeReset key in global state
       */
      lastVolumeReset: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastVolumeReset")) as bigint | undefined },
      /**
       * Get the current value of the recoveryMode key in global state
       */
      recoveryMode: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("recoveryMode")) as bigint | undefined },
      /**
       * Get the current value of the recoveryStartTime key in global state
       */
      recoveryStartTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("recoveryStartTime")) as bigint | undefined },
      /**
       * Get the current value of the recoveryApprovals key in global state
       */
      recoveryApprovals: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("recoveryApprovals")) as bigint | undefined },
    },
  }

  public newGroup(): EmergencyPauseComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initialize(byte[],uint64,uint64,uint64)void method call against the EmergencyPause contract
       */
      initialize(params: CallParams<EmergencyPauseArgs['obj']['initialize(byte[],uint64,uint64,uint64)void'] | EmergencyPauseArgs['tuple']['initialize(byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a triggerEmergency(uint64,string)void method call against the EmergencyPause contract
       */
      triggerEmergency(params: CallParams<EmergencyPauseArgs['obj']['triggerEmergency(uint64,string)void'] | EmergencyPauseArgs['tuple']['triggerEmergency(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.triggerEmergency(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a resolveEmergency(uint64,string)void method call against the EmergencyPause contract
       */
      resolveEmergency(params: CallParams<EmergencyPauseArgs['obj']['resolveEmergency(uint64,string)void'] | EmergencyPauseArgs['tuple']['resolveEmergency(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resolveEmergency(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a escalateEmergency(uint64,string)void method call against the EmergencyPause contract
       */
      escalateEmergency(params: CallParams<EmergencyPauseArgs['obj']['escalateEmergency(uint64,string)void'] | EmergencyPauseArgs['tuple']['escalateEmergency(uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.escalateEmergency(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a autoResolveCheck()void method call against the EmergencyPause contract
       */
      autoResolveCheck(params: CallParams<EmergencyPauseArgs['obj']['autoResolveCheck()void'] | EmergencyPauseArgs['tuple']['autoResolveCheck()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.autoResolveCheck(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addEmergencyOperator(byte[])void method call against the EmergencyPause contract
       */
      addEmergencyOperator(params: CallParams<EmergencyPauseArgs['obj']['addEmergencyOperator(byte[])void'] | EmergencyPauseArgs['tuple']['addEmergencyOperator(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addEmergencyOperator(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a removeEmergencyOperator(byte[])void method call against the EmergencyPause contract
       */
      removeEmergencyOperator(params: CallParams<EmergencyPauseArgs['obj']['removeEmergencyOperator(byte[])void'] | EmergencyPauseArgs['tuple']['removeEmergencyOperator(byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeEmergencyOperator(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a activateRecoveryMode()void method call against the EmergencyPause contract
       */
      activateRecoveryMode(params: CallParams<EmergencyPauseArgs['obj']['activateRecoveryMode()void'] | EmergencyPauseArgs['tuple']['activateRecoveryMode()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.activateRecoveryMode(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a executeRecovery()void method call against the EmergencyPause contract
       */
      executeRecovery(params: CallParams<EmergencyPauseArgs['obj']['executeRecovery()void'] | EmergencyPauseArgs['tuple']['executeRecovery()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.executeRecovery(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a checkCircuitBreaker(uint64)bool method call against the EmergencyPause contract
       */
      checkCircuitBreaker(params: CallParams<EmergencyPauseArgs['obj']['checkCircuitBreaker(uint64)bool'] | EmergencyPauseArgs['tuple']['checkCircuitBreaker(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.checkCircuitBreaker(params)))
        resultMappers.push((v) => client.decodeReturnValue('checkCircuitBreaker(uint64)bool', v))
        return this
      },
      /**
       * Add a reportSuspiciousActivity(string,string)void method call against the EmergencyPause contract
       */
      reportSuspiciousActivity(params: CallParams<EmergencyPauseArgs['obj']['reportSuspiciousActivity(string,string)void'] | EmergencyPauseArgs['tuple']['reportSuspiciousActivity(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.reportSuspiciousActivity(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateEmergencyThresholds(uint64,uint64,uint64,uint64)void method call against the EmergencyPause contract
       */
      updateEmergencyThresholds(params: CallParams<EmergencyPauseArgs['obj']['updateEmergencyThresholds(uint64,uint64,uint64,uint64)void'] | EmergencyPauseArgs['tuple']['updateEmergencyThresholds(uint64,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateEmergencyThresholds(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a isOperationAllowed(string)bool method call against the EmergencyPause contract
       */
      isOperationAllowed(params: CallParams<EmergencyPauseArgs['obj']['isOperationAllowed(string)bool'] | EmergencyPauseArgs['tuple']['isOperationAllowed(string)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isOperationAllowed(params)))
        resultMappers.push((v) => client.decodeReturnValue('isOperationAllowed(string)bool', v))
        return this
      },
      /**
       * Add a isAuthorizedOperator(byte[])bool method call against the EmergencyPause contract
       */
      isAuthorizedOperator(params: CallParams<EmergencyPauseArgs['obj']['isAuthorizedOperator(byte[])bool'] | EmergencyPauseArgs['tuple']['isAuthorizedOperator(byte[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isAuthorizedOperator(params)))
        resultMappers.push((v) => client.decodeReturnValue('isAuthorizedOperator(byte[])bool', v))
        return this
      },
      /**
       * Add a getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[]) method call against the EmergencyPause contract
       */
      getEmergencyEvent(params: CallParams<EmergencyPauseArgs['obj']['getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])'] | EmergencyPauseArgs['tuple']['getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getEmergencyEvent(params)))
        resultMappers.push((v) => client.decodeReturnValue('getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])', v))
        return this
      },
      /**
       * Add a getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool) method call against the EmergencyPause contract
       */
      getCurrentEmergencyStatus(params: CallParams<EmergencyPauseArgs['obj']['getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)'] | EmergencyPauseArgs['tuple']['getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCurrentEmergencyStatus(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)', v))
        return this
      },
      /**
       * Add a getCircuitBreakerStatus()(uint64,uint64,uint64,uint64) method call against the EmergencyPause contract
       */
      getCircuitBreakerStatus(params: CallParams<EmergencyPauseArgs['obj']['getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)'] | EmergencyPauseArgs['tuple']['getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCircuitBreakerStatus(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[] method call against the EmergencyPause contract
       */
      getEmergencyHistory(params: CallParams<EmergencyPauseArgs['obj']['getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]'] | EmergencyPauseArgs['tuple']['getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getEmergencyHistory(params)))
        resultMappers.push((v) => client.decodeReturnValue('getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]', v))
        return this
      },
      /**
       * Add a clear state call to the EmergencyPause contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as EmergencyPauseComposer
  }
}
export type EmergencyPauseComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize(byte[],uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<EmergencyPauseArgs['obj']['initialize(byte[],uint64,uint64,uint64)void'] | EmergencyPauseArgs['tuple']['initialize(byte[],uint64,uint64,uint64)void']>): EmergencyPauseComposer<[...TReturns, EmergencyPauseReturns['initialize(byte[],uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the triggerEmergency(uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  triggerEmergency(params?: CallParams<EmergencyPauseArgs['obj']['triggerEmergency(uint64,string)void'] | EmergencyPauseArgs['tuple']['triggerEmergency(uint64,string)void']>): EmergencyPauseComposer<[...TReturns, EmergencyPauseReturns['triggerEmergency(uint64,string)void'] | undefined]>

  /**
   * Calls the resolveEmergency(uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resolveEmergency(params?: CallParams<EmergencyPauseArgs['obj']['resolveEmergency(uint64,string)void'] | EmergencyPauseArgs['tuple']['resolveEmergency(uint64,string)void']>): EmergencyPauseComposer<[...TReturns, EmergencyPauseReturns['resolveEmergency(uint64,string)void'] | undefined]>

  /**
   * Calls the escalateEmergency(uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  escalateEmergency(params?: CallParams<EmergencyPauseArgs['obj']['escalateEmergency(uint64,string)void'] | EmergencyPauseArgs['tuple']['escalateEmergency(uint64,string)void']>): EmergencyPauseComposer<[...TReturns, EmergencyPauseReturns['escalateEmergency(uint64,string)void'] | undefined]>

  /**
   * Calls the autoResolveCheck()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  autoResolveCheck(params?: CallParams<EmergencyPauseArgs['obj']['autoResolveCheck()void'] | EmergencyPauseArgs['tuple']['autoResolveCheck()void']>): EmergencyPauseComposer<[...TReturns, EmergencyPauseReturns['autoResolveCheck()void'] | undefined]>

  /**
   * Calls the addEmergencyOperator(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addEmergencyOperator(params?: CallParams<EmergencyPauseArgs['obj']['addEmergencyOperator(byte[])void'] | EmergencyPauseArgs['tuple']['addEmergencyOperator(byte[])void']>): EmergencyPauseComposer<[...TReturns, EmergencyPauseReturns['addEmergencyOperator(byte[])void'] | undefined]>

  /**
   * Calls the removeEmergencyOperator(byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeEmergencyOperator(params?: CallParams<EmergencyPauseArgs['obj']['removeEmergencyOperator(byte[])void'] | EmergencyPauseArgs['tuple']['removeEmergencyOperator(byte[])void']>): EmergencyPauseComposer<[...TReturns, EmergencyPauseReturns['removeEmergencyOperator(byte[])void'] | undefined]>

  /**
   * Calls the activateRecoveryMode()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  activateRecoveryMode(params?: CallParams<EmergencyPauseArgs['obj']['activateRecoveryMode()void'] | EmergencyPauseArgs['tuple']['activateRecoveryMode()void']>): EmergencyPauseComposer<[...TReturns, EmergencyPauseReturns['activateRecoveryMode()void'] | undefined]>

  /**
   * Calls the executeRecovery()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  executeRecovery(params?: CallParams<EmergencyPauseArgs['obj']['executeRecovery()void'] | EmergencyPauseArgs['tuple']['executeRecovery()void']>): EmergencyPauseComposer<[...TReturns, EmergencyPauseReturns['executeRecovery()void'] | undefined]>

  /**
   * Calls the checkCircuitBreaker(uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkCircuitBreaker(params?: CallParams<EmergencyPauseArgs['obj']['checkCircuitBreaker(uint64)bool'] | EmergencyPauseArgs['tuple']['checkCircuitBreaker(uint64)bool']>): EmergencyPauseComposer<[...TReturns, EmergencyPauseReturns['checkCircuitBreaker(uint64)bool'] | undefined]>

  /**
   * Calls the reportSuspiciousActivity(string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reportSuspiciousActivity(params?: CallParams<EmergencyPauseArgs['obj']['reportSuspiciousActivity(string,string)void'] | EmergencyPauseArgs['tuple']['reportSuspiciousActivity(string,string)void']>): EmergencyPauseComposer<[...TReturns, EmergencyPauseReturns['reportSuspiciousActivity(string,string)void'] | undefined]>

  /**
   * Calls the updateEmergencyThresholds(uint64,uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateEmergencyThresholds(params?: CallParams<EmergencyPauseArgs['obj']['updateEmergencyThresholds(uint64,uint64,uint64,uint64)void'] | EmergencyPauseArgs['tuple']['updateEmergencyThresholds(uint64,uint64,uint64,uint64)void']>): EmergencyPauseComposer<[...TReturns, EmergencyPauseReturns['updateEmergencyThresholds(uint64,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the isOperationAllowed(string)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isOperationAllowed(params?: CallParams<EmergencyPauseArgs['obj']['isOperationAllowed(string)bool'] | EmergencyPauseArgs['tuple']['isOperationAllowed(string)bool']>): EmergencyPauseComposer<[...TReturns, EmergencyPauseReturns['isOperationAllowed(string)bool'] | undefined]>

  /**
   * Calls the isAuthorizedOperator(byte[])bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isAuthorizedOperator(params?: CallParams<EmergencyPauseArgs['obj']['isAuthorizedOperator(byte[])bool'] | EmergencyPauseArgs['tuple']['isAuthorizedOperator(byte[])bool']>): EmergencyPauseComposer<[...TReturns, EmergencyPauseReturns['isAuthorizedOperator(byte[])bool'] | undefined]>

  /**
   * Calls the getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getEmergencyEvent(params?: CallParams<EmergencyPauseArgs['obj']['getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])'] | EmergencyPauseArgs['tuple']['getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])']>): EmergencyPauseComposer<[...TReturns, EmergencyPauseReturns['getEmergencyEvent(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])'] | undefined]>

  /**
   * Calls the getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCurrentEmergencyStatus(params?: CallParams<EmergencyPauseArgs['obj']['getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)'] | EmergencyPauseArgs['tuple']['getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)']>): EmergencyPauseComposer<[...TReturns, EmergencyPauseReturns['getCurrentEmergencyStatus()(bool,uint64,uint64,uint64,bool)'] | undefined]>

  /**
   * Calls the getCircuitBreakerStatus()(uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCircuitBreakerStatus(params?: CallParams<EmergencyPauseArgs['obj']['getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)'] | EmergencyPauseArgs['tuple']['getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)']>): EmergencyPauseComposer<[...TReturns, EmergencyPauseReturns['getCircuitBreakerStatus()(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getEmergencyHistory(params?: CallParams<EmergencyPauseArgs['obj']['getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]'] | EmergencyPauseArgs['tuple']['getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]']>): EmergencyPauseComposer<[...TReturns, EmergencyPauseReturns['getEmergencyHistory(uint64)(uint64,byte[],byte[],uint64,uint64,uint64,byte[])[]'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the EmergencyPause smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): EmergencyPauseComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): EmergencyPauseComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<EmergencyPauseComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<EmergencyPauseComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<EmergencyPauseComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<EmergencyPauseComposerResults<TReturns>>
}
export type EmergencyPauseComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

